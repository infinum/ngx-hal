{"hash":"8eb76221003b6110835e24363821e26706292c57","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport 'reflect-metadata';\nimport deepmerge from 'deepmerge';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { of, combineLatest, throwError } from 'rxjs';\nimport { map, flatMap, tap, catchError } from 'rxjs/operators';\nimport * as UriTemplates from 'uri-templates';\n\nclass NgxHalModule {\n}\nNgxHalModule.ɵfac = function NgxHalModule_Factory(t) { return new (t || NgxHalModule)(); };\nNgxHalModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxHalModule });\nNgxHalModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxHalModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [],\n                imports: [],\n                exports: [],\n            }]\n    }], null, null); })();\n\nconst ATTRIBUTE_PROPERTIES_METADATA_KEY = 'attributeProperties';\nconst HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY = 'headerAttributeProperties';\nconst HAS_MANY_PROPERTIES_METADATA_KEY = 'hasManyProperties';\nconst HAS_ONE_PROPERTIES_METADATA_KEY = 'hasOneProperties';\nconst HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY = 'halDatastoreDocumentClass';\nconst HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY = 'halModelDocumentClass';\n\nconst DEFAULT_NETWORK_CONFIG = {\n    baseUrl: '/',\n    endpoint: '',\n    globalRequestOptions: {},\n};\n\nfunction deepmergeWrapper(...args) {\n    const ensuredArgs = args.map((arg) => arg || {});\n    return deepmerge.all(ensuredArgs);\n}\n\nfunction DatastoreConfig(config) {\n    return function (target) {\n        const networkConfig = deepmergeWrapper(DEFAULT_NETWORK_CONFIG, config.network || {});\n        Object.defineProperty(target.prototype, 'paginationClass', {\n            value: config.paginationClass,\n        });\n        Object.defineProperty(target.prototype, '_cacheStrategy', {\n            value: config.cacheStrategy,\n        });\n        Object.defineProperty(target.prototype, '_storage', {\n            value: config.storage,\n        });\n        Object.defineProperty(target.prototype, 'networkConfig', {\n            value: networkConfig,\n            writable: true,\n        });\n        Reflect.defineMetadata(HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY, config.halDocumentClass, target);\n        return target;\n    };\n}\n\nfunction ModelServiceConfig(config) {\n    return function (target) {\n        return target;\n    };\n}\n\nclass ModelOptions {\n}\nconst DEFAULT_MODEL_OPTIONS = {\n    type: '',\n};\nconst DEFAULT_MODEL_TYPE = '__DEFAULT_MODEL_TYPE__';\n\nfunction ModelConfig(config) {\n    return function (target) {\n        const configValue = deepmergeWrapper(DEFAULT_MODEL_OPTIONS, config);\n        Object.defineProperty(target.prototype, 'config', {\n            value: configValue,\n            writable: true,\n        });\n        Reflect.defineMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, config.halDocumentClass, target);\n        return target;\n    };\n}\n\nconst DEFAULT_ATTRIBUTE_OPTIONS = {\n    excludeFromPayload: false,\n    useClass: false,\n};\n\nvar ModelProperty;\n(function (ModelProperty) {\n    ModelProperty[\"Attribute\"] = \"Attribute\";\n    ModelProperty[\"HasMany\"] = \"HasMany\";\n    ModelProperty[\"HasOne\"] = \"HasOne\";\n    ModelProperty[\"HeaderAttribute\"] = \"HeaderAttribute\";\n})(ModelProperty || (ModelProperty = {}));\n\nfunction updateModelPropertiesWithTheNewOne(modelProperties, newModelProperty) {\n    const properties = [].concat(modelProperties);\n    const existingProperty = properties.find((property) => {\n        return property.name === newModelProperty.name;\n    });\n    if (existingProperty) {\n        const indexOfExistingProperty = properties.indexOf(existingProperty);\n        properties[indexOfExistingProperty] = newModelProperty;\n    }\n    else {\n        properties.push(newModelProperty);\n    }\n    return properties;\n}\n\nfunction Attribute(options = {}) {\n    return (model, propertyName) => {\n        const attributeOptions = deepmergeWrapper(DEFAULT_ATTRIBUTE_OPTIONS, options);\n        const existingAttributeProperties = Reflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n        const attributeProperty = {\n            type: ModelProperty.Attribute,\n            transformResponseValue: attributeOptions.transformResponseValue,\n            transformBeforeSave: attributeOptions.transformBeforeSave,\n            name: propertyName,\n            externalName: options.externalName || propertyName,\n            excludeFromPayload: options.excludeFromPayload,\n        };\n        if (attributeOptions.useClass) {\n            if (attributeOptions.useClass === true) {\n                const propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n                attributeProperty.propertyClass = propertyClass;\n            }\n            else {\n                attributeProperty.propertyClass = attributeOptions.useClass;\n            }\n        }\n        const attributeProperties = updateModelPropertiesWithTheNewOne(existingAttributeProperties, attributeProperty);\n        Reflect.defineMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, attributeProperties, model);\n    };\n}\n\nconst DEFAULT_HEADER_ATTRIBUTE_OPTIONS = {\n    useClass: false,\n};\n\nfunction HeaderAttribute(options = {}) {\n    return (model, propertyName) => {\n        const headerAttributeOptions = deepmergeWrapper(DEFAULT_HEADER_ATTRIBUTE_OPTIONS, options);\n        // tslint:disable-next-line:max-line-length\n        const existingHeaderAttributeProperties = Reflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n        const attributeProperty = {\n            type: ModelProperty.HeaderAttribute,\n            transformResponseValue: headerAttributeOptions.transformResponseValue,\n            transformBeforeSave: headerAttributeOptions.transformBeforeSave,\n            name: propertyName,\n            externalName: options.externalName || propertyName,\n        };\n        if (headerAttributeOptions.useClass) {\n            if (headerAttributeOptions.useClass === true) {\n                const propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n                attributeProperty.propertyClass = propertyClass;\n            }\n            else {\n                attributeProperty.propertyClass = headerAttributeOptions.useClass;\n            }\n        }\n        const headerAttributeProperties = updateModelPropertiesWithTheNewOne(existingHeaderAttributeProperties, attributeProperty);\n        Reflect.defineMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, headerAttributeProperties, model);\n    };\n}\n\nconst DEFAULT_HAS_MANY_OPTIONS = {\n    includeInPayload: false,\n};\n\nfunction HasMany(options) {\n    return (model, propertyName) => {\n        const hasManyOptions = deepmergeWrapper(DEFAULT_HAS_MANY_OPTIONS, options);\n        const existingHasManyProperties = Reflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, model) || [];\n        const hasManyProperty = {\n            includeInPayload: hasManyOptions.includeInPayload,\n            name: propertyName,\n            propertyClass: hasManyOptions.itemsType,\n            type: ModelProperty.HasMany,\n            externalName: options.externalName || propertyName,\n        };\n        const hasManyProperties = updateModelPropertiesWithTheNewOne(existingHasManyProperties, hasManyProperty);\n        Reflect.defineMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, hasManyProperties, model);\n    };\n}\n\nconst DEFAULT_HAS_ONE_OPTIONS = {\n    includeInPayload: false,\n};\n\nfunction HasOne(options = {}) {\n    return (model, propertyName) => {\n        const hasOneOptions = deepmergeWrapper(DEFAULT_HAS_ONE_OPTIONS, options);\n        const existingHasOneProperties = Reflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, model) || [];\n        const hasOneProperty = {\n            includeInPayload: hasOneOptions.includeInPayload,\n            name: propertyName,\n            propertyClass: hasOneOptions.propertyClass || Reflect.getMetadata('design:type', model, propertyName),\n            type: ModelProperty.HasOne,\n            externalName: options.externalName || propertyName,\n        };\n        const hasOneProperties = updateModelPropertiesWithTheNewOne(existingHasOneProperties, hasOneProperty);\n        Reflect.defineMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, hasOneProperties, model);\n    };\n}\n\nconst EMBEDDED_PROPERTY_NAME = '_embedded';\nconst LINKS_PROPERTY_NAME = '_links';\nconst SELF_PROPERTY_NAME = 'self';\n\nconst LOCAL_MODEL_ID_PREFIX = 'local-MODEL-identificator';\nconst LOCAL_DOCUMENT_ID_PREFIX = 'local-document-identificator';\n\nfunction isArray(item) {\n    return Array.isArray(item);\n}\n\nfunction generateUUID() {\n    return `${Math.floor(Math.random() * 1e10)}-${Date.now()}`;\n}\n\nclass HalDocument {\n    constructor(rawResource, rawResponse, modelClass, datastore) {\n        this.rawResource = rawResource;\n        this.rawResponse = rawResponse;\n        this.modelClass = modelClass;\n        this.datastore = datastore;\n        this.parseRawResources(rawResource);\n        this.generateUniqueModelIdentificator();\n    }\n    get hasEmbeddedItems() {\n        const listPropertyName = this.getListPropertyName(this.rawResource);\n        return (this.rawResource[EMBEDDED_PROPERTY_NAME] &&\n            this.rawResource[EMBEDDED_PROPERTY_NAME][listPropertyName]);\n    }\n    get itemLinks() {\n        const listPropertyName = this.getListPropertyName(this.rawResource);\n        return this.links[listPropertyName] || [];\n    }\n    getPage(pageNumber, includeRelationships = [], requestOptions = {}, subsequentRequestsOptions = {}) {\n        requestOptions.params = requestOptions.params || {};\n        if (pageNumber || pageNumber === 0) {\n            requestOptions.params['page'] = pageNumber;\n        }\n        const relationshipUrl = this.links[SELF_PROPERTY_NAME].href;\n        return this.datastore.find(this.modelClass, {}, true, includeRelationships, requestOptions, relationshipUrl, subsequentRequestsOptions);\n    }\n    parseRawResources(resources) {\n        const items = this.getRawResourcesFromResponse(resources);\n        this.models = this.generateModels(items);\n        this.pagination = this.generatePagination(resources);\n    }\n    generateModels(resources) {\n        return resources.map((resource) => {\n            return new this.modelClass(resource, this.datastore, this.rawResponse);\n        });\n    }\n    generatePagination(pagination) {\n        if (!this.datastore.paginationClass) {\n            return null;\n        }\n        return new this.datastore.paginationClass(pagination);\n    }\n    getRawResourcesFromResponse(resources) {\n        const listPropertyName = this.getListPropertyName(resources);\n        if (!resources[EMBEDDED_PROPERTY_NAME]) {\n            return [];\n        }\n        return resources[EMBEDDED_PROPERTY_NAME][listPropertyName] || [];\n    }\n    getListPropertyName(listResponse) {\n        const links = listResponse[LINKS_PROPERTY_NAME];\n        const embdedded = this.rawResource[EMBEDDED_PROPERTY_NAME];\n        const fallbackListPropertyName = embdedded\n            ? Object.keys(embdedded)[0]\n            : 'noListPropertyPresent';\n        return (Object.keys(links || {}).find((propertyName) => {\n            return isArray(links[propertyName]);\n        }) || fallbackListPropertyName);\n    }\n    get selfLink() {\n        return this.links && this.links[SELF_PROPERTY_NAME]\n            ? this.links[SELF_PROPERTY_NAME].href\n            : null;\n    }\n    get links() {\n        return this.rawResource[LINKS_PROPERTY_NAME];\n    }\n    generateUniqueModelIdentificator() {\n        this.uniqueModelIdentificator = generateUUID();\n    }\n}\n\nfunction getResponseHeader(response, headerName) {\n    const emptyHeaders = new HttpHeaders();\n    const headers = response ? response.headers || emptyHeaders : emptyHeaders;\n    return headers.get(headerName);\n}\n\nfunction isHalModelInstance(classInstance) {\n    if (!classInstance) {\n        return false;\n    }\n    if (classInstance instanceof HalModel) {\n        return true;\n    }\n    return isHalModelInstance(classInstance.prototype);\n}\n\nfunction ensureRelationshipRequestDescriptors(relationships) {\n    return relationships.map((relationshipDescriptor) => {\n        if (typeof relationshipDescriptor === 'string') {\n            return { name: relationshipDescriptor };\n        }\n        return relationshipDescriptor;\n    });\n}\n\nfunction removeQueryParams(uri) {\n    const splittedUri = hasOnlyTemplatedQueryParameters(uri)\n        ? uri.split('{?')\n        : uri.split('?');\n    if (splittedUri.length > 1) {\n        splittedUri.pop();\n    }\n    return splittedUri.join('');\n}\nfunction hasOnlyTemplatedQueryParameters(uri) {\n    return uri.indexOf('{?') !== -1;\n}\n\nfunction setRequestHeader(initialHeaders, headerName, headerValue) {\n    if (initialHeaders instanceof HttpHeaders) {\n        return setHttpRequestHeader(initialHeaders, headerName, headerValue);\n    }\n    return setObjectRequestHeader(initialHeaders, headerName, headerValue);\n}\nfunction setHttpRequestHeader(initialHeaders, headerName, headerValue) {\n    if (headerValue !== undefined && headerValue !== null) {\n        return initialHeaders.append(headerName, headerValue);\n    }\n    return initialHeaders;\n}\nfunction setObjectRequestHeader(initialHeaders, headerName, headerValue) {\n    const headers = {};\n    Object.assign(headers, initialHeaders);\n    if (headerValue !== undefined && headerValue !== null) {\n        headers[headerName] = headerValue;\n    }\n    return headers;\n}\n\nfunction isString(item) {\n    return typeof item === 'string' || item instanceof String;\n}\n\nclass SimpleHalModel {\n}\n\nfunction isSimpleHalModelInstance(classInstance) {\n    if (!classInstance) {\n        return false;\n    }\n    if (classInstance instanceof SimpleHalModel) {\n        return true;\n    }\n    return isSimpleHalModelInstance(classInstance.prototype);\n}\n\nfunction isFunction(functionToCheck) {\n    return (typeof functionToCheck === 'function' &&\n        !isHalModelInstance(functionToCheck) &&\n        !isSimpleHalModelInstance(functionToCheck));\n}\n\nclass HalModel {\n    constructor(resource = {}, datastore, rawResponse) {\n        this.resource = resource;\n        this.datastore = datastore;\n        this.rawResponse = rawResponse;\n        this.config = this['config'] || DEFAULT_MODEL_OPTIONS;\n        this.temporarySelfLink = null;\n        this.internalHasManyDocumentIdentificators = {};\n        this.setLocalModelIdentificator();\n        this.parseAttributes(resource);\n        this.parseHeaderAttributes(rawResponse);\n        this.initializeHasOneProperties();\n        this.initialzieHasManyProperties();\n        this.extractEmbeddedProperties(resource);\n    }\n    get uniqueModelIdentificator() {\n        return this.getUniqueModelIdentificator();\n    }\n    getUniqueModelIdentificator() {\n        return this.selfLink || this.localModelIdentificator;\n    }\n    get id() {\n        if (!this.selfLink) {\n            return null;\n        }\n        const selfLink = removeQueryParams(this.selfLink);\n        return selfLink.split('/').pop();\n    }\n    get endpoint() {\n        return this.config.endpoint || 'unknownModelEndpoint';\n    }\n    get modelEndpoints() {\n        return null;\n    }\n    get networkConfig() {\n        return this.config.networkConfig;\n    }\n    get type() {\n        return this.config.type;\n    }\n    getHalDocumentClass() {\n        return Reflect.getMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, this.constructor);\n    }\n    getRelationshipUrl(relationshipName) {\n        const property = this.getPropertyData(relationshipName);\n        if (!property) {\n            console.warn(`Relationship with the name ${relationshipName} is not defined on the model.`);\n            return;\n        }\n        const fieldName = property.externalName || relationshipName;\n        return this.links[fieldName] ? this.links[fieldName].href : '';\n    }\n    getPropertyData(propertyName) {\n        const attributeProperty = this.attributeProperties.find((property) => property.name === propertyName);\n        const hasOneProperty = this.hasOneProperties.find((property) => property.name === propertyName);\n        const hasManyProperty = this.hasManyProperties.find((property) => property.name === propertyName);\n        return attributeProperty || hasOneProperty || hasManyProperty;\n    }\n    getEmbeddedResource(resourceName) {\n        const property = this.getPropertyData(resourceName);\n        if (this.resource[property.externalName]) {\n            return this.resource[property.externalName];\n        }\n        if (!this.resource[EMBEDDED_PROPERTY_NAME]) {\n            return;\n        }\n        return this.resource[EMBEDDED_PROPERTY_NAME][property.externalName];\n    }\n    save(requestOptions, options = {}) {\n        const modelClass = Object.getPrototypeOf(this).constructor;\n        return this.datastore.save(this, modelClass, requestOptions, options);\n    }\n    update(requestOptions, options = {}) {\n        return this.datastore.update(this, requestOptions, options);\n    }\n    delete(requestOptions, options = {}) {\n        return this.datastore.delete(this, requestOptions, options);\n    }\n    generatePayload(options = {}) {\n        const attributePropertiesPayload = this.getAttributePropertiesPayload(options);\n        const relationshipsPayload = this.generateRelationshipsPayload(options);\n        const hasRelationshipLinks = Boolean(Object.keys(relationshipsPayload).length);\n        const payload = { ...attributePropertiesPayload };\n        if (hasRelationshipLinks) {\n            payload[LINKS_PROPERTY_NAME] = relationshipsPayload;\n        }\n        return payload;\n    }\n    // Used only when HalModels or HalDocument are passed when creating a new model\n    extractEmbeddedProperties(rawResource) {\n        const embeddedProperties = rawResource[EMBEDDED_PROPERTY_NAME] || {};\n        Object.keys(embeddedProperties).forEach((propertyName) => {\n            const property = this.getPropertyData(propertyName);\n            const isRelationshipProperty = property && (this.isHasOneProperty(property) || this.isHasManyProperty(property));\n            const propertyValue = embeddedProperties[propertyName];\n            const isHalModelOrDocument = isHalModelInstance(propertyValue) || propertyValue instanceof HalDocument;\n            if (isRelationshipProperty && isHalModelOrDocument) {\n                this[property.name] = propertyValue;\n            }\n        });\n    }\n    getAttributePropertiesPayload(payloadOptions = {}) {\n        const { specificFields, changedPropertiesOnly } = payloadOptions;\n        return this.attributeProperties.reduce((payload, property) => {\n            const propertyName = property.name;\n            const isPropertyExcludedFromPaylaod = property.excludeFromPayload;\n            const isSpecificFieldsSpecified = specificFields && Boolean(specificFields.length);\n            const isSpecificFieldsConditionSatisfied = !isSpecificFieldsSpecified || specificFields.indexOf(propertyName) !== -1;\n            if (isPropertyExcludedFromPaylaod || !isSpecificFieldsConditionSatisfied) {\n                return payload;\n            }\n            const externalPropertyName = property.externalName;\n            const propertyPayload = property.transformBeforeSave\n                ? property.transformBeforeSave(this[propertyName])\n                : this[propertyName];\n            if (changedPropertiesOnly) {\n                const isPropertyChanged = propertyPayload !== this.resource[propertyName];\n                if (isPropertyChanged) {\n                    payload[externalPropertyName] = propertyPayload;\n                }\n            }\n            else {\n                payload[externalPropertyName] = propertyPayload;\n            }\n            return payload;\n        }, {});\n    }\n    generateHasOnePropertyPayload(property) {\n        const payload = {};\n        const propertyName = property.name;\n        const externalPropertyName = property.externalName;\n        if (!this[propertyName].selfLink) {\n            return payload;\n        }\n        payload[externalPropertyName] = {\n            href: this[propertyName].selfLink,\n        };\n        return payload;\n    }\n    generateHasManyPropertyPayload(property) {\n        const payload = {};\n        const hasManyPropertyLinks = [];\n        const propertyName = property.name;\n        const externalPropertyName = property.externalName;\n        // TODO check if this[propertyName] is an array of models or just a HalDocument\n        this[propertyName].forEach((model) => {\n            if (model && model.selfLink) {\n                hasManyPropertyLinks.push({\n                    href: model.selfLink,\n                });\n            }\n        });\n        if (hasManyPropertyLinks.length) {\n            payload[externalPropertyName] = hasManyPropertyLinks;\n        }\n        return payload;\n    }\n    generateRelationshipsPayload(payloadOptions = {}) {\n        const { specificFields } = payloadOptions;\n        const isSpecificFieldsSpecified = specificFields && Boolean(specificFields.length);\n        return [...this.hasOneProperties, ...this.hasManyProperties]\n            .filter((property) => property.includeInPayload)\n            .filter((property) => !isSpecificFieldsSpecified || specificFields.indexOf(property.name) !== -1)\n            .reduce((payload, property) => {\n            const propertyName = property.name;\n            if (!this[propertyName]) {\n                return payload;\n            }\n            const isHasOneProperty = property.type === ModelProperty.HasOne;\n            let propertyPayload;\n            if (isHasOneProperty) {\n                propertyPayload = this.generateHasOnePropertyPayload(property);\n            }\n            else {\n                propertyPayload = this.generateHasManyPropertyPayload(property);\n            }\n            Object.assign(payload, propertyPayload);\n            return payload;\n        }, {});\n    }\n    generateHeaders() {\n        return this.headerAttributeProperties.reduce((headers, property) => {\n            const externalPropertyName = property.externalName;\n            const propertyName = property.name;\n            const propertyValue = property.transformBeforeSave\n                ? property.transformBeforeSave(this[propertyName])\n                : this[propertyName];\n            return setRequestHeader(headers, externalPropertyName, propertyValue);\n        }, {});\n    }\n    get isSaved() {\n        return Boolean(this.id);\n    }\n    fetchRelationships(relationships, requestOptions = {}) {\n        const relationshipsArray = [].concat(relationships);\n        const relationshipDescriptors = ensureRelationshipRequestDescriptors(relationshipsArray);\n        return this.datastore.fetchModelRelationships(this, relationshipDescriptors, requestOptions);\n    }\n    getRelationship(relationshipName) {\n        const property = this.getPropertyData(relationshipName);\n        const isHasOneProperty = property.type === ModelProperty.HasOne;\n        if (isHasOneProperty) {\n            return this.getHasOneRelationship(property);\n        }\n        return this.getHasManyRelationship(property);\n    }\n    get attributeProperties() {\n        return Reflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    get headerAttributeProperties() {\n        return Reflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    get hasOneProperties() {\n        return Reflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    get hasManyProperties() {\n        return Reflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    initializeHasOneProperties() {\n        this.hasOneProperties.forEach((property) => {\n            Object.defineProperty(this, property.name, {\n                configurable: true,\n                get() {\n                    return this.getHasOneRelationship(property);\n                },\n                set(value) {\n                    if (isHalModelInstance(value) || !value) {\n                        this.replaceRelationshipModel(property.externalName, value);\n                    }\n                    else {\n                        console.warn(`Only HalModel instances can be assigned to property: ${property.name}. This will become an error in the next ngx-hal release`);\n                        // throw new Error(`Only HalModel instances can be assigned to property: ${property.name}`);\n                    }\n                },\n            });\n        });\n    }\n    initialzieHasManyProperties() {\n        this.hasManyProperties.forEach((property) => {\n            Object.defineProperty(this, property.name, {\n                configurable: true,\n                get() {\n                    const halDocument = this.getHasManyRelationship(property);\n                    if (!halDocument) {\n                        return;\n                    }\n                    return halDocument.models;\n                },\n                set(value) {\n                    const existingHalDocument = this.getHasManyRelationship(property);\n                    if (existingHalDocument) {\n                        existingHalDocument.models = value;\n                    }\n                    else {\n                        const halDocumentRaw = {\n                            models: value,\n                            uniqueModelIdentificator: `${LOCAL_DOCUMENT_ID_PREFIX}-${generateUUID()}`,\n                        };\n                        this.updateHasManyDocumentIdentificator(property, halDocumentRaw.uniqueModelIdentificator);\n                        this.datastore.storage.save(halDocumentRaw);\n                        this.replaceRelationshipModel(property.externalName, halDocumentRaw);\n                    }\n                },\n            });\n        });\n    }\n    setProperty(modelProperty, rawPropertyValue) {\n        if (isString(modelProperty.propertyClass)) {\n            this[modelProperty.name] = this.datastore.findModelClassByType(modelProperty.propertyClass);\n        }\n        else if (isFunction(modelProperty.propertyClass)) {\n            const propertyClass = modelProperty.propertyClass(rawPropertyValue);\n            this[modelProperty.name] = new propertyClass(rawPropertyValue);\n        }\n        else if (modelProperty.propertyClass) {\n            this[modelProperty.name] = new modelProperty.propertyClass(rawPropertyValue);\n        }\n        else if (modelProperty.transformResponseValue) {\n            this[modelProperty.name] = modelProperty.transformResponseValue(rawPropertyValue);\n        }\n        else {\n            this[modelProperty.name] = rawPropertyValue;\n        }\n    }\n    parseAttributes(resource) {\n        this.attributeProperties.forEach((attributeProperty) => {\n            const rawPropertyValue = resource[attributeProperty.externalName];\n            this.setProperty(attributeProperty, rawPropertyValue);\n        });\n    }\n    parseHeaderAttributes(response) {\n        this.headerAttributeProperties.forEach((headerAttributeProperty) => {\n            const rawPropertyValue = getResponseHeader(response, headerAttributeProperty.externalName);\n            this.setProperty(headerAttributeProperty, rawPropertyValue);\n        });\n    }\n    getHasOneRelationship(property) {\n        const relationshipLinks = this.links[property.externalName];\n        if (!relationshipLinks) {\n            return;\n        }\n        const modelIdentificator = relationshipLinks.href;\n        return this.datastore.storage.get(modelIdentificator);\n    }\n    getHasManyRelationship(property) {\n        const uniqueRelationshipIdentificator = this.hasManyDocumentIdentificators[property.externalName];\n        if (!uniqueRelationshipIdentificator) {\n            return;\n        }\n        const halDocument = this.datastore.storage.get(uniqueRelationshipIdentificator);\n        if (!halDocument) {\n            console.warn(`Has many relationship ${property.name} is not fetched.`);\n            return;\n        }\n        return halDocument;\n    }\n    get links() {\n        return this.resource[LINKS_PROPERTY_NAME] || {};\n    }\n    get selfLink() {\n        return this.links && this.links[SELF_PROPERTY_NAME]\n            ? this.links[SELF_PROPERTY_NAME].href\n            : this.temporarySelfLink;\n    }\n    set selfLink(link) {\n        this.temporarySelfLink = link;\n    }\n    replaceRelationshipModel(relationshipName, relationshipModel) {\n        this.resource[LINKS_PROPERTY_NAME] = this.resource[LINKS_PROPERTY_NAME] || {\n            self: null,\n        };\n        let relationshipLink = null;\n        if (relationshipModel) {\n            relationshipLink = {\n                href: relationshipModel.uniqueModelIdentificator || relationshipModel.selfLink,\n            };\n        }\n        this.resource[LINKS_PROPERTY_NAME][relationshipName] = relationshipLink;\n        // Save the model to the storage if it's not already there\n        if (!this[relationshipName] && relationshipModel) {\n            // TODO should the model be removed from the storage if relationshipModel does not exist?\n            this.datastore.storage.save(relationshipModel);\n        }\n    }\n    setLocalModelIdentificator() {\n        this.localModelIdentificator = `${LOCAL_MODEL_ID_PREFIX}-${generateUUID()}`;\n    }\n    isHasOneProperty(property) {\n        return property.type === ModelProperty.HasOne;\n    }\n    isHasManyProperty(property) {\n        return property.type === ModelProperty.HasMany;\n    }\n    updateHasManyDocumentIdentificator(property, identificator) {\n        this.hasManyDocumentIdentificators[property.externalName] = identificator;\n    }\n    set hasManyDocumentIdentificators(hasManyDocumentIdentificators) {\n        this.internalHasManyDocumentIdentificators = Object.assign({}, hasManyDocumentIdentificators);\n    }\n    get hasManyDocumentIdentificators() {\n        return this.internalHasManyDocumentIdentificators;\n    }\n}\nHalModel.modelType = DEFAULT_MODEL_TYPE;\n\nclass Pagination {\n    constructor(rawResource = {}) {\n        this.rawResource = rawResource;\n    }\n}\n\nclass HalStorage {\n    constructor() {\n        this.internalStorage = {};\n    }\n    saveAll(models, savePartialModels = false) {\n        models.forEach((model) => {\n            if (savePartialModels || !this.get(model.uniqueModelIdentificator)) {\n                this.save(model);\n            }\n        });\n    }\n    remove(model) {\n        delete this.internalStorage[model.uniqueModelIdentificator];\n    }\n    enrichRequestOptions(uniqueModelIdentificator, requestOptions) {\n        // noop\n    }\n}\n\nclass EtagHalStorage extends HalStorage {\n    save(model, response, alternateUniqueIdentificators = []) {\n        const storedModels = [];\n        const identificators = [].concat(alternateUniqueIdentificators);\n        identificators.push(model.uniqueModelIdentificator);\n        identificators.filter(Boolean).forEach((identificator) => {\n            const storedModel = {\n                model,\n                etag: this.getEtagFromResponse(response),\n            };\n            this.internalStorage[identificator] = storedModel;\n            storedModels.push(storedModel);\n        });\n        return storedModels;\n    }\n    get(uniqueModelIdentificator) {\n        const localModel = this.getRawStorageModel(uniqueModelIdentificator);\n        return localModel ? localModel.model : undefined;\n    }\n    enrichRequestOptions(uniqueModelIdentificator, requestOptions) {\n        const storageModel = this.getRawStorageModel(uniqueModelIdentificator);\n        if (!storageModel) {\n            return;\n        }\n        if (storageModel.etag) {\n            requestOptions.headers = setRequestHeader(requestOptions.headers, 'If-None-Match', storageModel.etag);\n        }\n    }\n    getRawStorageModel(uniqueModelIdentificator) {\n        return this.internalStorage[uniqueModelIdentificator];\n    }\n    getEtagFromResponse(response) {\n        if (!response || !response.headers || !response.headers.get) {\n            return;\n        }\n        return response.headers.get('ETag');\n    }\n}\n\nclass SimpleHalStorage extends HalStorage {\n    save(model, response, alternateUniqueIdentificators = []) {\n        const identificators = [].concat(alternateUniqueIdentificators);\n        identificators.push(model.uniqueModelIdentificator);\n        identificators.filter(Boolean).forEach((identificator) => {\n            this.internalStorage[identificator] = model;\n        });\n    }\n    get(uniqueModelIdentificator) {\n        return this.internalStorage[uniqueModelIdentificator];\n    }\n}\n\nvar CacheStrategy;\n(function (CacheStrategy) {\n    CacheStrategy[\"CUSTOM\"] = \"CUSTOM\";\n    CacheStrategy[\"ETAG\"] = \"ETAG\";\n    CacheStrategy[\"NONE\"] = \"NONE\";\n})(CacheStrategy || (CacheStrategy = {}));\n\nclass ModelServiceOptions {\n}\n\nconst DEFAULT_REQUEST_OPTIONS = {\n    observe: 'response',\n    params: {},\n};\n\nfunction createHalStorage(cacheStrategy = CacheStrategy.NONE, storageInstance) {\n    let storage;\n    switch (cacheStrategy) {\n        case CacheStrategy.NONE:\n            storage = new SimpleHalStorage();\n            break;\n        case CacheStrategy.ETAG:\n            storage = new EtagHalStorage();\n            break;\n        case CacheStrategy.CUSTOM:\n            if (!storageInstance) {\n                throw new Error('When CacheStrategy.CUSTOM is specified, config.storage is required.');\n            }\n            storage = storageInstance;\n            break;\n        default:\n            throw new Error(`Unknown CacheStrategy: ${cacheStrategy}`);\n            break;\n    }\n    return storage;\n}\n\nfunction makeQueryParamsString(params, sortAlphabetically = false) {\n    let paramKeys = Object.keys(params);\n    if (sortAlphabetically) {\n        paramKeys = paramKeys.sort();\n    }\n    const queryParamsString = paramKeys.reduce((paramsString, queryParamKey) => {\n        return `${paramsString}&${queryParamKey}=${params[queryParamKey]}`;\n    }, '');\n    return queryParamsString.slice(1);\n}\n\nfunction getQueryParams(url) {\n    const queryParams = {};\n    const parser = document.createElement('a');\n    parser.href = url;\n    const query = parser.search.substring(1);\n    if (!query) {\n        return {};\n    }\n    const params = query.split('&');\n    params.forEach((param) => {\n        const [key, value] = param.split('=');\n        if (queryParams[key]) {\n            queryParams[key] = [decodeURIComponentWithErrorHandling(value)].concat(queryParams[key]);\n        }\n        else {\n            const items = value.split(',');\n            if (items.length === 1) {\n                queryParams[key] = decodeURIComponentWithErrorHandling(value);\n            }\n            else {\n                queryParams[key] = items.map((urlParam) => decodeURIComponentWithErrorHandling(urlParam));\n            }\n        }\n    });\n    return queryParams;\n}\nfunction decodeURIComponentWithErrorHandling(value) {\n    try {\n        return decodeURIComponent(value);\n    }\n    catch (e) {\n        console.error(e);\n        return value;\n    }\n}\n\nfunction makeHttpParams(params, httpParamsOptions) {\n    let httpParams = new HttpParams(httpParamsOptions);\n    Object.keys(params).forEach((paramKey) => {\n        httpParams = httpParams.append(paramKey, params[paramKey]);\n    });\n    return httpParams;\n}\n\nconst UriTemplate = UriTemplates.default || UriTemplates;\nclass DatastoreService {\n    constructor(http) {\n        this.http = http;\n        this.networkConfig = this['networkConfig'] || DEFAULT_NETWORK_CONFIG;\n        this.internalStorage = createHalStorage(this.cacheStrategy, this.halStorage);\n        this.modelTypes = [];\n    }\n    getHalDocumentClass() {\n        return (Reflect.getMetadata(HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY, this.constructor) ||\n            HalDocument);\n    }\n    buildUrl(model) {\n        const hostUrl = this.buildHostUrl(model);\n        const urlParts = [hostUrl, model ? model.endpoint : null];\n        if (model && model.id) {\n            urlParts.push(model.id);\n        }\n        return urlParts.filter((urlPart) => urlPart).join('/');\n    }\n    createHalDocument(rawResource, modelClass, rawResponse) {\n        const propertyClass = isFunction(modelClass)\n            ? modelClass(rawResource)\n            : modelClass;\n        const representantiveModel = new propertyClass({}, this);\n        const halDocumentClass = representantiveModel.getHalDocumentClass() || this.getHalDocumentClass();\n        return new halDocumentClass(rawResource, rawResponse, propertyClass, this);\n    }\n    findOne(modelClass, modelId, includeRelationships = [], requestOptions = {}, customUrl, subsequentRequestsOptions = {}) {\n        const url = customUrl || this.buildModelUrl(modelClass, modelId);\n        const requestsOptions = {\n            mainRequest: requestOptions,\n            subsequentRequests: subsequentRequestsOptions,\n        };\n        const relationshipDescriptors = ensureRelationshipRequestDescriptors(includeRelationships);\n        return this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, true, relationshipDescriptors);\n    }\n    fetchModelRelationships(model, relationshipNames, requestOptions = {}) {\n        const ensuredRelationshipNames = [].concat(relationshipNames);\n        const relationships$ = this.fetchRelationships(model, ensuredRelationshipNames, requestOptions);\n        if (!relationships$.length) {\n            return of(model);\n        }\n        return combineLatest(relationships$).pipe(map(() => model));\n    }\n    fetchRelationships(model, relationshipDescriptors, requestOptions = {}) {\n        const relationshipCalls = [];\n        const relationshipMappings = this.extractCurrentLevelRelationships(relationshipDescriptors);\n        for (const relationshipName in relationshipMappings) {\n            const url = model.getRelationshipUrl(relationshipName);\n            const property = model.getPropertyData(relationshipName);\n            if (!property) {\n                continue;\n            }\n            let modelClass = property.propertyClass;\n            if (isString(modelClass)) {\n                modelClass = this.findModelClassByType(modelClass);\n            }\n            const isSingleResource = property.type === ModelProperty.Attribute || property.type === ModelProperty.HasOne;\n            // Checks if the relationship is already embdedded inside the emdedded property, or\n            // as a part of attribute properties\n            const embeddedRelationship = model.getEmbeddedResource(relationshipName);\n            let fetchedModels;\n            if (embeddedRelationship) {\n                fetchedModels = this.processRawResource(embeddedRelationship, modelClass, isSingleResource, model.rawResponse);\n            }\n            if (!url ||\n                url.startsWith(LOCAL_MODEL_ID_PREFIX) ||\n                url.startsWith(LOCAL_DOCUMENT_ID_PREFIX)) {\n                continue;\n            }\n            const relationshipRequestOptions = relationshipMappings[relationshipName]\n                .originalRelationshipDescriptor\n                ? relationshipMappings[relationshipName].originalRelationshipDescriptor.options\n                : null;\n            const requestsOptions = {\n                mainRequest: relationshipRequestOptions || requestOptions,\n                subsequentRequests: requestOptions,\n            };\n            const relationshipCall$ = this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, isSingleResource, relationshipMappings[relationshipName].childrenRelationships, fetchedModels).pipe(map((fetchedRelation) => {\n                const externalRelationshipName = property.externalName;\n                if (isHalModelInstance(model)) {\n                    if (property.type === ModelProperty.HasOne) {\n                        // The original relationship URL on the parent model must be replaced because\n                        // the actual relationship URL may have some query parameteres attached to it\n                        model.links[externalRelationshipName].href = fetchedRelation.uniqueModelIdentificator;\n                    }\n                    else {\n                        model.updateHasManyDocumentIdentificator(property, fetchedRelation.uniqueModelIdentificator);\n                        // In case of a HalDocument, halDocument.models may contain model instances which are not the same as the models\n                        // saved in local storage. That happens if the same models are fetch beforehand through another API call.\n                        // In that case, hasManyDocumentIdentificators of the models from HalDocument must be updated as well.\n                        const localModel = this.storage.get(model.uniqueModelIdentificator);\n                        if (localModel && localModel !== model) {\n                            localModel.updateHasManyDocumentIdentificator(property, fetchedRelation.uniqueModelIdentificator);\n                        }\n                    }\n                }\n                return fetchedRelation;\n            }));\n            relationshipCalls.push(relationshipCall$);\n        }\n        return relationshipCalls;\n    }\n    extractCurrentLevelRelationships(relationshipDescriptors) {\n        return relationshipDescriptors.reduce((relationships, currentRelationshipDescriptor) => {\n            const relationshipNameParts = currentRelationshipDescriptor.name.split('.');\n            const currentLevelRelationship = relationshipNameParts.shift();\n            relationships[currentLevelRelationship] = relationships[currentLevelRelationship] || {\n                childrenRelationships: [],\n            };\n            if (relationshipNameParts.length) {\n                relationships[currentLevelRelationship].childrenRelationships.push({\n                    name: relationshipNameParts.join('.'),\n                    options: currentRelationshipDescriptor.options,\n                });\n            }\n            else {\n                relationships[currentLevelRelationship].originalRelationshipDescriptor =\n                    currentRelationshipDescriptor;\n            }\n            return relationships;\n        }, {});\n    }\n    handleGetRequestWithRelationships(url, requestsOptions, modelClass, isSingleResource, includeRelationships = [], fetchedModels = null, storePartialModels) {\n        if (fetchedModels) {\n            return of(fetchedModels);\n        }\n        const httpRequest$ = this.makeGetRequestWrapper(url, requestsOptions, modelClass, isSingleResource, storePartialModels);\n        if (includeRelationships.length) {\n            return httpRequest$.pipe(flatMap((model) => {\n                const models = isSingleResource\n                    ? [model]\n                    : model.models;\n                const relationshipCalls = this.triggerFetchingModelRelationships(models, includeRelationships, requestsOptions.subsequentRequests);\n                if (!relationshipCalls.length) {\n                    return of(model);\n                }\n                return combineLatest(relationshipCalls).pipe(map(() => model));\n            }));\n        }\n        return httpRequest$;\n    }\n    makeGetRequestWrapper(url, requestsOptions, modelClass, isSingleResource, storePartialModels) {\n        const originalGetRequest$ = this.makeGetRequest(url, requestsOptions.mainRequest, modelClass, isSingleResource, storePartialModels);\n        if (this.storage.makeGetRequestWrapper) {\n            const { cleanUrl, urlWithParams, requestOptions: options, } = this.extractRequestInfo(url, requestsOptions.mainRequest);\n            const cachedResoucesFromUrl = this.storage.get(decodeURIComponentWithErrorHandling(url)) ||\n                this.storage.get(decodeURIComponentWithErrorHandling(urlWithParams));\n            return this.storage.makeGetRequestWrapper({ cleanUrl, urlWithParams, originalUrl: url }, cachedResoucesFromUrl, originalGetRequest$, options, modelClass, storePartialModels);\n        }\n        return originalGetRequest$;\n    }\n    triggerFetchingModelRelationships(models, includeRelationships, requestOptions) {\n        const modelRelationshipCalls = [];\n        models.forEach((model) => {\n            const relationshipCalls = this.fetchRelationships(model, includeRelationships, requestOptions);\n            modelRelationshipCalls.push(...relationshipCalls);\n        });\n        return modelRelationshipCalls;\n    }\n    find(modelClass, params = {}, includeMeta = false, includeRelationships = [], requestOptions = {}, customUrl, subsequentRequestsOptions = {}, storePartialModels = false) {\n        const url = customUrl || this.buildModelUrl(modelClass);\n        const subsequentOptions = deepmergeWrapper({}, subsequentRequestsOptions);\n        const paramsObject = this.ensureParamsObject(params || {});\n        requestOptions.params = this.ensureParamsObject(requestOptions.params || {});\n        requestOptions.params = Object.assign(requestOptions.params, paramsObject);\n        const options = deepmergeWrapper({}, requestOptions);\n        const requestsOptions = {\n            mainRequest: options,\n            subsequentRequests: subsequentOptions,\n        };\n        const relationshipDescriptors = ensureRelationshipRequestDescriptors(includeRelationships);\n        return this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, false, relationshipDescriptors, null, storePartialModels).pipe(flatMap((halDocument) => {\n            return this.fetchEmbeddedListItems(halDocument, modelClass, relationshipDescriptors, subsequentOptions).pipe(map((models) => {\n                halDocument.models = models;\n                return halDocument;\n            }));\n        }), map((halDocument) => (includeMeta ? halDocument : halDocument.models)));\n    }\n    save(model, modelClass, requestOptions, saveOptions = {}) {\n        const defaultSaveOptions = {\n            buildUrlFunction: this.defaultUrlBuildFunction,\n            specificFields: null,\n            transformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n        };\n        const options = deepmergeWrapper(defaultSaveOptions, saveOptions);\n        const url = options.buildUrlFunction(model, this.buildUrl(model));\n        const payload = model.generatePayload({\n            specificFields: options.specificFields,\n            changedPropertiesOnly: false,\n        });\n        const transformedPaylaod = options.transformPayloadBeforeSave(payload);\n        const modelHeaders = model.generateHeaders();\n        const modelRequestOptions = requestOptions || {};\n        modelRequestOptions.headers = modelRequestOptions.headers || {};\n        Object.assign(modelRequestOptions.headers, modelHeaders);\n        let request$;\n        if (model.isSaved) {\n            request$ = this.makePutRequest(url, transformedPaylaod, modelRequestOptions);\n        }\n        else {\n            request$ = this.makePostRequest(url, transformedPaylaod, modelRequestOptions);\n        }\n        return request$.pipe(map((response) => {\n            const rawResource = this.extractResourceFromResponse(response);\n            if (rawResource) {\n                return this.processRawResource(rawResource, modelClass, true, response);\n            }\n            const newLocationLink = getResponseHeader(response, 'Location');\n            if (newLocationLink && model.selfLink !== newLocationLink) {\n                model.selfLink = newLocationLink;\n            }\n            if (!this.storage.get(model.selfLink)) {\n                this.storage.save(model, response);\n            }\n            return model;\n        }));\n    }\n    // TODO this updated Attribute properties only, implement HasOne and HasMany properties\n    updateModelWithChangedProperties(model, payload) {\n        Object.keys(payload).forEach((externalPropertyName) => {\n            const property = model.getPropertyData(externalPropertyName);\n            if (payload[externalPropertyName] &&\n                property &&\n                property.type === ModelProperty.Attribute) {\n                model['resource'][externalPropertyName] = payload[externalPropertyName];\n            }\n        });\n    }\n    update(model, requestOptions, updateOptions = {}) {\n        const defaultUpdateOptions = {\n            buildUrlFunction: this.defaultUrlBuildFunction,\n            specificFields: null,\n            transformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n        };\n        const options = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n        const url = options.buildUrlFunction(model, this.buildUrl(model));\n        const payload = model.generatePayload({\n            specificFields: options.specificFields,\n            changedPropertiesOnly: true,\n        });\n        const transformedPaylaod = options.transformPayloadBeforeSave(payload);\n        const modelHeaders = model.generateHeaders();\n        const modelRequestOptions = requestOptions || {};\n        modelRequestOptions.headers = modelRequestOptions.headers || {};\n        Object.assign(modelRequestOptions.headers, modelHeaders);\n        return this.makePatchRequest(url, transformedPaylaod, modelRequestOptions).pipe(map(() => {\n            this.updateModelWithChangedProperties(model, transformedPaylaod);\n            return model;\n        }));\n    }\n    delete(model, requestOptions, updateOptions = {}) {\n        const defaultUpdateOptions = {\n            buildUrlFunction: this.defaultUrlBuildFunction,\n        };\n        const options = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n        const url = options.buildUrlFunction(model, this.buildUrl(model));\n        return this.makeDeleteRequest(url, requestOptions).pipe(tap(() => {\n            this.storage.remove(model);\n        }));\n    }\n    get storage() {\n        return this.internalStorage;\n    }\n    request(method, url, requestOptions, modelClass, singleResource, includeNetworkConfig = true) {\n        const customUrl = includeNetworkConfig\n            ? `${this.buildHostUrl(new modelClass({}, this))}/${url}`\n            : url;\n        switch (method.toLocaleLowerCase()) {\n            case 'get':\n                return this.makeGetRequest(customUrl, requestOptions, modelClass, singleResource);\n            default:\n                throw new Error(`Method ${method} is not supported.`);\n        }\n    }\n    makeGetRequest(url, requestOptions, modelClass, singleResource, storePartialModels) {\n        const { cleanUrl, requestOptions: options, urlWithParams, } = this.extractRequestInfo(url, requestOptions);\n        return this.http.get(cleanUrl, options).pipe(map((response) => {\n            const rawResource = this.extractResourceFromResponse(response);\n            return this.processRawResource(rawResource, modelClass, singleResource, response, urlWithParams, storePartialModels);\n        }), catchError((response) => {\n            if (response.status === 304) {\n                const cachedModel = this.storage.get(url) || this.storage.get(response.url);\n                if (cachedModel) {\n                    return of(cachedModel);\n                }\n            }\n            return throwError(response);\n        }));\n    }\n    head(url, requestOptions) {\n        const { cleanUrl, requestOptions: options } = this.extractRequestInfo(url, requestOptions);\n        return this.http.head(cleanUrl, options);\n    }\n    extractRequestInfo(url, options) {\n        const params = this.ensureParamsObject(options.params || {});\n        Object.assign(options, { params });\n        const requestOptions = deepmergeWrapper(DEFAULT_REQUEST_OPTIONS, this.networkConfig.globalRequestOptions, options);\n        this.storage.enrichRequestOptions(url, options);\n        const fillParams = Object.assign({}, options.params, options.routeParams);\n        const templatedUrl = new UriTemplate(url).fill(fillParams);\n        const urlQueryParams = getQueryParams(templatedUrl);\n        requestOptions.params = Object.assign(urlQueryParams, requestOptions.params);\n        const cleanUrl = removeQueryParams(templatedUrl);\n        const queryParamsString = makeQueryParamsString(requestOptions.params, true);\n        const urlWithParams = queryParamsString ? `${cleanUrl}?${queryParamsString}` : cleanUrl;\n        requestOptions.params = makeHttpParams(requestOptions.params, this.httpParamsOptions);\n        return {\n            cleanUrl,\n            urlWithParams,\n            requestOptions,\n        };\n    }\n    ensureParamsObject(params) {\n        if (params instanceof HttpParams) {\n            return params.keys().reduce((paramsObject, paramName) => {\n                const arrayParam = params.getAll(paramName);\n                paramsObject[paramName] = arrayParam.length > 1 ? arrayParam : params.get(paramName);\n                return paramsObject;\n            }, {});\n        }\n        return params;\n    }\n    makePostRequest(url, payload, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.post(cleanUrl, payload, options);\n    }\n    makePutRequest(url, payload, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.put(cleanUrl, payload, options);\n    }\n    makePatchRequest(url, payload, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.patch(cleanUrl, payload, options);\n    }\n    makeDeleteRequest(url, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.delete(cleanUrl, options);\n    }\n    processRawResource(rawResource, modelClass, isSingleResource, response, url, savePartialModels) {\n        if (isSingleResource) {\n            const propertyClass = isFunction(modelClass)\n                ? modelClass(rawResource)\n                : modelClass;\n            const model = new propertyClass(rawResource, this, response);\n            this.populateResourceWithRelationshipIndentificators(model);\n            this.storage.save(model, response, [url]);\n            return model;\n        }\n        const halDocument = this.createHalDocument(rawResource, modelClass, response);\n        this.storage.saveAll(halDocument.models, savePartialModels);\n        halDocument.models.forEach((listModel) => {\n            this.populateResourceWithRelationshipIndentificators(listModel);\n        });\n        this.storage.save(halDocument, response, [url]);\n        return halDocument;\n    }\n    buildModelUrl(modelClass, modelId) {\n        const model = new modelClass({}, this);\n        if (modelId && model.modelEndpoints?.singleResourceEndpoint) {\n            return model.modelEndpoints.singleResourceEndpoint;\n        }\n        else if (!modelId && model.modelEndpoints?.collectionEndpoint) {\n            return model.modelEndpoints.collectionEndpoint;\n        }\n        const modelUrl = this.buildUrl(model);\n        return modelId ? `${modelUrl}/${modelId}` : modelUrl;\n    }\n    extractResourceFromResponse(response) {\n        return response.body;\n    }\n    populateResourceWithRelationshipIndentificators(model) {\n        const localResource = this.storage.get(model.uniqueModelIdentificator);\n        if (localResource) {\n            model.hasManyDocumentIdentificators = localResource.hasManyDocumentIdentificators;\n        }\n    }\n    fetchEmbeddedListItems(halDocument, modelClass, includeRelationships = [], requestOptions = {}) {\n        const modelCalls = [];\n        const requestsOptions = {\n            mainRequest: requestOptions,\n            subsequentRequests: requestOptions,\n        };\n        // Don't fetch list items if they are embedded\n        if (halDocument.hasEmbeddedItems) {\n            halDocument.models.forEach((model) => {\n                const call$ = this.handleGetRequestWithRelationships(null, requestsOptions, modelClass, true, includeRelationships, model);\n                modelCalls.push(call$);\n            });\n        }\n        else {\n            halDocument.itemLinks.forEach((link) => {\n                const url = link.href;\n                if (url) {\n                    const call$ = this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, true, includeRelationships);\n                    modelCalls.push(call$);\n                }\n            });\n        }\n        if (!modelCalls.length) {\n            return of([]);\n        }\n        return combineLatest(modelCalls);\n    }\n    buildHostUrl(model) {\n        // tslint:disable-next-line:max-line-length\n        const baseUrl = model && model.networkConfig && model.networkConfig.baseUrl\n            ? model.networkConfig.baseUrl\n            : this.networkConfig.baseUrl;\n        // tslint:disable-next-line:max-line-length\n        const networkEndpoint = model && model.networkConfig && model.networkConfig.endpoint\n            ? model.networkConfig.endpoint\n            : this.networkConfig.endpoint;\n        return [baseUrl, networkEndpoint].filter((urlPart) => urlPart).join('/');\n    }\n    defaultUrlBuildFunction(model, urlFromModel) {\n        if (model.isSaved && model.selfLink) {\n            return model.selfLink;\n        }\n        if (model.id && model.modelEndpoints?.singleResourceEndpoint) {\n            return model.modelEndpoints.singleResourceEndpoint;\n        }\n        else if (!model.id && model.modelEndpoints?.collectionEndpoint) {\n            return model.modelEndpoints.collectionEndpoint;\n        }\n        return urlFromModel;\n    }\n    defaultTransformPayloadBeforeSaveFunction(payload) {\n        return payload;\n    }\n    get cacheStrategy() {\n        return this._cacheStrategy;\n    }\n    get halStorage() {\n        return this._storage;\n    }\n    findModelClassByType(modelType) {\n        const modelClass = this.modelTypes.find((modelClass) => modelClass.modelType === modelType);\n        if (!modelClass) {\n            throw new Error(`Provided model name \"${modelType}\" cannot be found in the Datastore. Provide it in DatastoreService.modelTypes`);\n        }\n        return modelClass;\n    }\n    createModel(modelClass, recordData = {}) {\n        const rawRecordData = Object.assign({}, recordData);\n        rawRecordData[EMBEDDED_PROPERTY_NAME] = Object.assign({}, recordData, recordData[EMBEDDED_PROPERTY_NAME]);\n        const model = new modelClass(rawRecordData, this);\n        return model;\n    }\n}\nDatastoreService.ɵfac = function DatastoreService_Factory(t) { return new (t || DatastoreService)(i0.ɵɵinject(i1.HttpClient)); };\nDatastoreService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatastoreService, factory: DatastoreService.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatastoreService, [{\n        type: Injectable\n    }], function () { return [{ type: i1.HttpClient }]; }, null); })();\n\nclass ModelService {\n    constructor(datastore, modelClass) {\n        this.datastore = datastore;\n        this.modelClass = modelClass;\n    }\n    findOne(modelId, includeRelationships = [], requestOptions = {}, subsequentRequestsOptions = {}, customUrl) {\n        return this.datastore.findOne(this.modelClass, modelId, includeRelationships, requestOptions, customUrl, subsequentRequestsOptions);\n    }\n    find(params = {}, includeMeta = false, includeRelationships = [], requestOptions = {}, subsequentRequestsOptions = {}, customUrl, storePartialModels) {\n        return this.datastore.find(this.modelClass, params, includeMeta, includeRelationships, requestOptions, customUrl, subsequentRequestsOptions, storePartialModels);\n    }\n    createNewModel(recordData = {}) {\n        const model = this.datastore.createModel(this.modelClass, recordData);\n        this.datastore.storage.save(model);\n        return model;\n    }\n}\n\nfunction arrayAttr(classType) {\n    return class ArrayAttribute {\n        constructor(args = []) {\n            return args.map((arg) => new classType(arg));\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Attribute, CacheStrategy, DEFAULT_ATTRIBUTE_OPTIONS, DEFAULT_HAS_MANY_OPTIONS, DEFAULT_HAS_ONE_OPTIONS, DEFAULT_NETWORK_CONFIG, DatastoreConfig, DatastoreService, EtagHalStorage, HalDocument, HalModel, HalStorage, HasMany, HasOne, HeaderAttribute, ModelConfig, ModelService, ModelServiceConfig, ModelServiceOptions, NgxHalModule, Pagination, SimpleHalModel, SimpleHalStorage, arrayAttr };\n//# sourceMappingURL=ngx-hal.mjs.map\n","map":{"version":3,"file":"ngx-hal.mjs","sources":["../../../projects/ngx-hal/src/lib/ngx-hal.module.ts","../../../projects/ngx-hal/src/lib/constants/metadata.constant.ts","../../../projects/ngx-hal/src/lib/interfaces/network-config.interface.ts","../../../projects/ngx-hal/src/lib/utils/deepmerge-wrapper.ts","../../../projects/ngx-hal/src/lib/decorators/datastore-config.decorator.ts","../../../projects/ngx-hal/src/lib/decorators/model-service-config.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/model-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/model-config.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/attribute-options.interface.ts","../../../projects/ngx-hal/src/lib/enums/model-property.enum.ts","../../../projects/ngx-hal/src/lib/helpers/replace-model-property/replace-model-property.helper.ts","../../../projects/ngx-hal/src/lib/decorators/attribute.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/header-attribute-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/header-attribute.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/has-many-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/has-many.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/has-one-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/has-one.decorator.ts","../../../projects/ngx-hal/src/lib/constants/hal.constant.ts","../../../projects/ngx-hal/src/lib/constants/general.constant.ts","../../../projects/ngx-hal/src/lib/utils/is-array/is-array.util.ts","../../../projects/ngx-hal/src/lib/helpers/uuid/uuid.helper.ts","../../../projects/ngx-hal/src/lib/classes/hal-document.ts","../../../projects/ngx-hal/src/lib/utils/get-response-headers/get-response-header.util.ts","../../../projects/ngx-hal/src/lib/helpers/is-hal-model-instance.ts/is-hal-model-instance.helper.ts","../../../projects/ngx-hal/src/lib/utils/ensure-relationship-descriptors/ensure-relationship-descriptors.util.ts","../../../projects/ngx-hal/src/lib/utils/remove-query-params/remove-query-params.util.ts","../../../projects/ngx-hal/src/lib/utils/set-request-header/set-request-header.util.ts","../../../projects/ngx-hal/src/lib/utils/is-string/is-string.util.ts","../../../projects/ngx-hal/src/lib/models/simple-hal.model.ts","../../../projects/ngx-hal/src/lib/helpers/is-simple-hal-model-instance.ts/is-simple-hal-model-instance.helper.ts","../../../projects/ngx-hal/src/lib/helpers/is-function/is-function.helper.ts","../../../projects/ngx-hal/src/lib/models/hal.model.ts","../../../projects/ngx-hal/src/lib/classes/pagination.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/hal-storage.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/etag-hal-storage.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/simple-hal-storage.ts","../../../projects/ngx-hal/src/lib/enums/cache-strategy.enum.ts","../../../projects/ngx-hal/src/lib/interfaces/model-service-options.interface.ts","../../../projects/ngx-hal/src/lib/constants/request.constant.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/hal-storage-factory.ts","../../../projects/ngx-hal/src/lib/helpers/make-query-params-string/make-query-params-string.helper.ts","../../../projects/ngx-hal/src/lib/utils/get-query-params/get-query-params.util.ts","../../../projects/ngx-hal/src/lib/helpers/make-http-params/make-http-params.helper.ts","../../../projects/ngx-hal/src/lib/services/datastore/datastore.service.ts","../../../projects/ngx-hal/src/lib/services/model-service/model.service.ts","../../../projects/ngx-hal/src/lib/helpers/array-attribute-class/array-attribute-class.ts","../../../projects/ngx-hal/src/ngx-hal.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport 'reflect-metadata';\n\n@NgModule({\n\tdeclarations: [],\n\timports: [],\n\texports: [],\n})\nexport class NgxHalModule {}\n","export const ATTRIBUTE_PROPERTIES_METADATA_KEY = 'attributeProperties';\nexport const HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY = 'headerAttributeProperties';\nexport const HAS_MANY_PROPERTIES_METADATA_KEY = 'hasManyProperties';\nexport const HAS_ONE_PROPERTIES_METADATA_KEY = 'hasOneProperties';\nexport const HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY = 'halDatastoreDocumentClass';\nexport const HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY = 'halModelDocumentClass';\n","import { RequestOptions } from '../types/request-options.type';\n\nexport interface NetworkConfig {\n\tbaseUrl?: string;\n\tendpoint?: string;\n\tglobalRequestOptions?: RequestOptions;\n}\n\nexport const DEFAULT_NETWORK_CONFIG: NetworkConfig = {\n\tbaseUrl: '/',\n\tendpoint: '',\n\tglobalRequestOptions: {},\n};\n","import deepmerge from 'deepmerge';\n\nexport function deepmergeWrapper<T = { [K: string]: any }>(...args): T {\n\tconst ensuredArgs = args.map((arg: any) => arg || {});\n\treturn deepmerge.all(ensuredArgs) as unknown as T;\n}\n","import { DatastoreOptions } from '../interfaces/datastore-options.interface';\nimport { HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY } from '../constants/metadata.constant';\nimport { DEFAULT_NETWORK_CONFIG, NetworkConfig } from '../interfaces/network-config.interface';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function DatastoreConfig(config: DatastoreOptions) {\n\treturn function (target: any) {\n\t\tconst networkConfig = deepmergeWrapper<NetworkConfig>(\n\t\t\tDEFAULT_NETWORK_CONFIG,\n\t\t\tconfig.network || {},\n\t\t);\n\t\tObject.defineProperty(target.prototype, 'paginationClass', {\n\t\t\tvalue: config.paginationClass,\n\t\t});\n\t\tObject.defineProperty(target.prototype, '_cacheStrategy', {\n\t\t\tvalue: config.cacheStrategy,\n\t\t});\n\t\tObject.defineProperty(target.prototype, '_storage', {\n\t\t\tvalue: config.storage,\n\t\t});\n\t\tObject.defineProperty(target.prototype, 'networkConfig', {\n\t\t\tvalue: networkConfig,\n\t\t\twritable: true,\n\t\t});\n\t\tReflect.defineMetadata(\n\t\t\tHAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY,\n\t\t\tconfig.halDocumentClass,\n\t\t\ttarget,\n\t\t);\n\t\treturn target;\n\t};\n}\n","import { ModelServiceOptions } from '../interfaces/model-service-options.interface';\n\nexport function ModelServiceConfig(config: ModelServiceOptions) {\n\treturn function (target: any) {\n\t\treturn target;\n\t};\n}\n","import { HalDocumentConstructor } from '../types/hal-document-construtor.type';\nimport { HalModel } from '../models/hal.model';\nimport { NetworkConfig } from './network-config.interface';\n\nexport class ModelOptions {\n\ttype: string;\n\tendpoint?: string;\n\thalDocumentClass?: HalDocumentConstructor<HalModel>;\n\tnetworkConfig?: NetworkConfig;\n}\n\nexport const DEFAULT_MODEL_OPTIONS: ModelOptions = {\n\ttype: '',\n};\n\nexport const DEFAULT_MODEL_TYPE = '__DEFAULT_MODEL_TYPE__';\n","import { ModelOptions, DEFAULT_MODEL_OPTIONS } from '../interfaces/model-options.interface';\nimport { HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY } from '../constants/metadata.constant';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function ModelConfig(config: ModelOptions) {\n\treturn function (target: any) {\n\t\tconst configValue = deepmergeWrapper<ModelOptions>(DEFAULT_MODEL_OPTIONS, config);\n\t\tObject.defineProperty(target.prototype, 'config', {\n\t\t\tvalue: configValue,\n\t\t\twritable: true,\n\t\t});\n\t\tReflect.defineMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, config.halDocumentClass, target);\n\t\treturn target;\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface AttributeOptions {\n\tuseClass?: boolean | string | ModelConstructor<any> | ModelConstructorFn<any>;\n\ttransformResponseValue?: (rawAttribute: any) => any;\n\ttransformBeforeSave?: (raw: any) => any;\n\texternalName?: string;\n\texcludeFromPayload?: boolean;\n}\n\nexport const DEFAULT_ATTRIBUTE_OPTIONS = {\n\texcludeFromPayload: false,\n\tuseClass: false,\n};\n","export enum ModelProperty {\n\tAttribute = 'Attribute',\n\tHasMany = 'HasMany',\n\tHasOne = 'HasOne',\n\tHeaderAttribute = 'HeaderAttribute',\n}\n","import { ModelProperty } from '../../interfaces/model-property.interface';\n\nexport function updateModelPropertiesWithTheNewOne<T extends ModelProperty>(\n\tmodelProperties: Array<T>,\n\tnewModelProperty: T,\n): Array<T> {\n\tconst properties: Array<T> = [].concat(modelProperties);\n\n\tconst existingProperty: T = properties.find((property: T) => {\n\t\treturn property.name === newModelProperty.name;\n\t});\n\n\tif (existingProperty) {\n\t\tconst indexOfExistingProperty: number = properties.indexOf(existingProperty);\n\t\tproperties[indexOfExistingProperty] = newModelProperty;\n\t} else {\n\t\tproperties.push(newModelProperty);\n\t}\n\n\treturn properties;\n}\n","import { HalModel } from '../models/hal.model';\nimport { ATTRIBUTE_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport {\n\tAttributeOptions,\n\tDEFAULT_ATTRIBUTE_OPTIONS,\n} from '../interfaces/attribute-options.interface';\nimport { AttributeModelProperty } from '../interfaces/model-property.interface';\nimport { ModelProperty as ModelPropertyEnum } from '../enums/model-property.enum';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function Attribute(options: AttributeOptions = {}) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst attributeOptions: AttributeOptions = deepmergeWrapper(DEFAULT_ATTRIBUTE_OPTIONS, options);\n\t\tconst existingAttributeProperties: Array<AttributeModelProperty> =\n\t\t\tReflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst attributeProperty: AttributeModelProperty = {\n\t\t\ttype: ModelPropertyEnum.Attribute,\n\t\t\ttransformResponseValue: attributeOptions.transformResponseValue,\n\t\t\ttransformBeforeSave: attributeOptions.transformBeforeSave,\n\t\t\tname: propertyName,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t\texcludeFromPayload: options.excludeFromPayload,\n\t\t};\n\n\t\tif (attributeOptions.useClass) {\n\t\t\tif (attributeOptions.useClass === true) {\n\t\t\t\tconst propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n\t\t\t\tattributeProperty.propertyClass = propertyClass;\n\t\t\t} else {\n\t\t\t\tattributeProperty.propertyClass = attributeOptions.useClass;\n\t\t\t}\n\t\t}\n\n\t\tconst attributeProperties: Array<AttributeModelProperty> = updateModelPropertiesWithTheNewOne(\n\t\t\texistingAttributeProperties,\n\t\t\tattributeProperty,\n\t\t);\n\n\t\tReflect.defineMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, attributeProperties, model);\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface HeaderAttributeOptions {\n\tuseClass?: boolean | ModelConstructor<any> | ModelConstructorFn<any>;\n\ttransformResponseValue?: (rawAttribute: any) => any;\n\ttransformBeforeSave?: (raw: any) => any;\n\texternalName?: string;\n}\n\nexport const DEFAULT_HEADER_ATTRIBUTE_OPTIONS = {\n\tuseClass: false,\n};\n","import { HalModel } from '../models/hal.model';\nimport { HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport {\n\tAttributeModelProperty,\n\tHeaderAttributeModelProperty,\n} from '../interfaces/model-property.interface';\nimport { ModelProperty as ModelPropertyEnum } from '../enums/model-property.enum';\nimport {\n\tHeaderAttributeOptions,\n\tDEFAULT_HEADER_ATTRIBUTE_OPTIONS,\n} from '../interfaces/header-attribute-options.interface';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function HeaderAttribute(options: HeaderAttributeOptions = {}) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst headerAttributeOptions: HeaderAttributeOptions = deepmergeWrapper(\n\t\t\tDEFAULT_HEADER_ATTRIBUTE_OPTIONS,\n\t\t\toptions,\n\t\t);\n\n\t\t// tslint:disable-next-line:max-line-length\n\t\tconst existingHeaderAttributeProperties: Array<AttributeModelProperty> =\n\t\t\tReflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst attributeProperty: HeaderAttributeModelProperty = {\n\t\t\ttype: ModelPropertyEnum.HeaderAttribute,\n\t\t\ttransformResponseValue: headerAttributeOptions.transformResponseValue,\n\t\t\ttransformBeforeSave: headerAttributeOptions.transformBeforeSave,\n\t\t\tname: propertyName,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t};\n\n\t\tif (headerAttributeOptions.useClass) {\n\t\t\tif (headerAttributeOptions.useClass === true) {\n\t\t\t\tconst propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n\t\t\t\tattributeProperty.propertyClass = propertyClass;\n\t\t\t} else {\n\t\t\t\tattributeProperty.propertyClass = headerAttributeOptions.useClass;\n\t\t\t}\n\t\t}\n\n\t\tconst headerAttributeProperties: Array<HeaderAttributeModelProperty> =\n\t\t\tupdateModelPropertiesWithTheNewOne(existingHeaderAttributeProperties, attributeProperty);\n\n\t\tReflect.defineMetadata(\n\t\t\tHEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY,\n\t\t\theaderAttributeProperties,\n\t\t\tmodel,\n\t\t);\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface HasManyOptions {\n\titemsType: string | ModelConstructor<any> | ModelConstructorFn<any>;\n\tincludeInPayload?: boolean;\n\texternalName?: string;\n}\n\nexport const DEFAULT_HAS_MANY_OPTIONS = {\n\tincludeInPayload: false,\n};\n","import { HalModel } from '../models/hal.model';\nimport { HAS_MANY_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport { HasManyModelProperty } from '../interfaces/model-property.interface';\nimport { ModelProperty } from '../enums/model-property.enum';\nimport { HasManyOptions, DEFAULT_HAS_MANY_OPTIONS } from '../interfaces/has-many-options.interface';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function HasMany(options: HasManyOptions) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst hasManyOptions: HasManyOptions = deepmergeWrapper(DEFAULT_HAS_MANY_OPTIONS, options);\n\n\t\tconst existingHasManyProperties: Array<HasManyModelProperty> =\n\t\t\tReflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst hasManyProperty: HasManyModelProperty = {\n\t\t\tincludeInPayload: hasManyOptions.includeInPayload,\n\t\t\tname: propertyName,\n\t\t\tpropertyClass: hasManyOptions.itemsType,\n\t\t\ttype: ModelProperty.HasMany,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t};\n\n\t\tconst hasManyProperties: Array<HasManyModelProperty> = updateModelPropertiesWithTheNewOne(\n\t\t\texistingHasManyProperties,\n\t\t\thasManyProperty,\n\t\t);\n\n\t\tReflect.defineMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, hasManyProperties, model);\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface HasOneOptions {\n\texternalName?: string;\n\tincludeInPayload?: boolean;\n\tpropertyClass?: string | ModelConstructor<any> | ModelConstructorFn<any>;\n}\n\nexport const DEFAULT_HAS_ONE_OPTIONS = {\n\tincludeInPayload: false,\n};\n","import { HalModel } from '../models/hal.model';\nimport { HAS_ONE_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport { HasOneModelProperty } from '../interfaces/model-property.interface';\nimport { ModelProperty } from '../enums/model-property.enum';\nimport { HasOneOptions, DEFAULT_HAS_ONE_OPTIONS } from '../interfaces/has-one-options.interface';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function HasOne(options: HasOneOptions = {}) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst hasOneOptions: HasOneOptions = deepmergeWrapper(DEFAULT_HAS_ONE_OPTIONS, options);\n\n\t\tconst existingHasOneProperties: Array<HasOneModelProperty> =\n\t\t\tReflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst hasOneProperty: HasOneModelProperty = {\n\t\t\tincludeInPayload: hasOneOptions.includeInPayload,\n\t\t\tname: propertyName,\n\t\t\tpropertyClass:\n\t\t\t\thasOneOptions.propertyClass || Reflect.getMetadata('design:type', model, propertyName),\n\t\t\ttype: ModelProperty.HasOne,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t};\n\n\t\tconst hasOneProperties: Array<HasOneModelProperty> = updateModelPropertiesWithTheNewOne(\n\t\t\texistingHasOneProperties,\n\t\t\thasOneProperty,\n\t\t);\n\n\t\tReflect.defineMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, hasOneProperties, model);\n\t};\n}\n","export const EMBEDDED_PROPERTY_NAME = '_embedded';\nexport const LINKS_PROPERTY_NAME = '_links';\nexport const SELF_PROPERTY_NAME = 'self';\n","export const LOCAL_MODEL_ID_PREFIX = 'local-MODEL-identificator';\nexport const LOCAL_DOCUMENT_ID_PREFIX = 'local-document-identificator';\n","export function isArray(item: any): boolean {\n\treturn Array.isArray(item);\n}\n","export function generateUUID() {\n\treturn `${Math.floor(Math.random() * 1e10)}-${Date.now()}`;\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RawHalResource } from '../interfaces/raw-hal-resource.interface';\nimport {\n\tLINKS_PROPERTY_NAME,\n\tEMBEDDED_PROPERTY_NAME,\n\tSELF_PROPERTY_NAME,\n} from '../constants/hal.constant';\nimport { HalModel } from '../models/hal.model';\nimport { Pagination } from './pagination';\nimport { ModelConstructor } from '../types/model-constructor.type';\nimport { DatastoreService } from '../services/datastore/datastore.service';\nimport { isArray } from '../utils/is-array/is-array.util';\nimport { RawHalLink } from '../interfaces/raw-hal-link.interface';\nimport { RawHalLinks } from '../interfaces/raw-hal-links.interface';\nimport { RequestOptions } from '../types/request-options.type';\nimport { RelationshipRequestDescriptor } from '../types/relationship-request-descriptor.type';\nimport { generateUUID } from '../helpers/uuid/uuid.helper';\n\nexport class HalDocument<T extends HalModel> {\n\tpublic models: Array<T>;\n\tpublic pagination: Pagination;\n\tpublic uniqueModelIdentificator: string;\n\n\tconstructor(\n\t\tprivate rawResource: RawHalResource,\n\t\tprivate rawResponse: HttpResponse<any>,\n\t\tprivate modelClass: ModelConstructor<T>,\n\t\tprivate datastore: DatastoreService,\n\t) {\n\t\tthis.parseRawResources(rawResource);\n\t\tthis.generateUniqueModelIdentificator();\n\t}\n\n\tpublic get hasEmbeddedItems(): boolean {\n\t\tconst listPropertyName: string = this.getListPropertyName(this.rawResource);\n\t\treturn (\n\t\t\tthis.rawResource[EMBEDDED_PROPERTY_NAME] &&\n\t\t\tthis.rawResource[EMBEDDED_PROPERTY_NAME][listPropertyName]\n\t\t);\n\t}\n\n\tpublic get itemLinks(): Array<RawHalLink> {\n\t\tconst listPropertyName: string = this.getListPropertyName(this.rawResource);\n\t\treturn (this.links[listPropertyName] as any) || [];\n\t}\n\n\tpublic getPage(\n\t\tpageNumber: number,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t): Observable<HalDocument<T>> {\n\t\trequestOptions.params = requestOptions.params || {};\n\n\t\tif (pageNumber || pageNumber === 0) {\n\t\t\trequestOptions.params['page'] = pageNumber;\n\t\t}\n\n\t\tconst relationshipUrl: string = this.links[SELF_PROPERTY_NAME].href;\n\n\t\treturn this.datastore.find(\n\t\t\tthis.modelClass,\n\t\t\t{},\n\t\t\ttrue,\n\t\t\tincludeRelationships,\n\t\t\trequestOptions,\n\t\t\trelationshipUrl,\n\t\t\tsubsequentRequestsOptions,\n\t\t);\n\t}\n\n\tprivate parseRawResources(resources: RawHalResource): void {\n\t\tconst items: Array<RawHalResource> = this.getRawResourcesFromResponse(resources);\n\t\tthis.models = this.generateModels(items);\n\t\tthis.pagination = this.generatePagination(resources);\n\t}\n\n\tprivate generateModels(resources: Array<RawHalResource>): Array<T> {\n\t\treturn resources.map((resource: RawHalResource) => {\n\t\t\treturn new this.modelClass(resource, this.datastore, this.rawResponse);\n\t\t});\n\t}\n\n\tprivate generatePagination(pagination: RawHalResource): Pagination {\n\t\tif (!this.datastore.paginationClass) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new this.datastore.paginationClass(pagination);\n\t}\n\n\tprivate getRawResourcesFromResponse(resources: RawHalResource): Array<RawHalResource> {\n\t\tconst listPropertyName: string = this.getListPropertyName(resources);\n\n\t\tif (!resources[EMBEDDED_PROPERTY_NAME]) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn resources[EMBEDDED_PROPERTY_NAME][listPropertyName] || [];\n\t}\n\n\tprivate getListPropertyName(listResponse: RawHalResource): string {\n\t\tconst links = listResponse[LINKS_PROPERTY_NAME];\n\n\t\tconst embdedded: object = this.rawResource[EMBEDDED_PROPERTY_NAME];\n\t\tconst fallbackListPropertyName = embdedded\n\t\t\t? Object.keys(embdedded)[0]\n\t\t\t: 'noListPropertyPresent';\n\n\t\treturn (\n\t\t\tObject.keys(links || {}).find((propertyName: string) => {\n\t\t\t\treturn isArray(links[propertyName]);\n\t\t\t}) || fallbackListPropertyName\n\t\t);\n\t}\n\n\tpublic get selfLink(): string {\n\t\treturn this.links && this.links[SELF_PROPERTY_NAME]\n\t\t\t? this.links[SELF_PROPERTY_NAME].href\n\t\t\t: null;\n\t}\n\n\tprivate get links(): RawHalLinks {\n\t\treturn this.rawResource[LINKS_PROPERTY_NAME];\n\t}\n\n\tprivate generateUniqueModelIdentificator(): void {\n\t\tthis.uniqueModelIdentificator = generateUUID();\n\t}\n}\n","import { HttpResponse, HttpHeaders } from '@angular/common/http';\n\nexport function getResponseHeader(response: HttpResponse<any>, headerName: string): any {\n\tconst emptyHeaders: HttpHeaders = new HttpHeaders();\n\tconst headers: HttpHeaders = response ? response.headers || emptyHeaders : emptyHeaders;\n\treturn headers.get(headerName);\n}\n","import { HalModel } from '../../models/hal.model';\n\nexport function isHalModelInstance(classInstance: any): boolean {\n\tif (!classInstance) {\n\t\treturn false;\n\t}\n\n\tif (classInstance instanceof HalModel) {\n\t\treturn true;\n\t}\n\n\treturn isHalModelInstance(classInstance.prototype);\n}\n","import { RelationshipRequestDescriptor } from '../../types/relationship-request-descriptor.type';\n\nexport function ensureRelationshipRequestDescriptors(\n\trelationships: Array<string | RelationshipRequestDescriptor>,\n): Array<RelationshipRequestDescriptor> {\n\treturn relationships.map((relationshipDescriptor: string | RelationshipRequestDescriptor) => {\n\t\tif (typeof relationshipDescriptor === 'string') {\n\t\t\treturn { name: relationshipDescriptor };\n\t\t}\n\n\t\treturn relationshipDescriptor;\n\t});\n}\n","export function removeQueryParams(uri: string): string {\n\tconst splittedUri: Array<string> = hasOnlyTemplatedQueryParameters(uri)\n\t\t? uri.split('{?')\n\t\t: uri.split('?');\n\n\tif (splittedUri.length > 1) {\n\t\tsplittedUri.pop();\n\t}\n\n\treturn splittedUri.join('');\n}\n\nfunction hasOnlyTemplatedQueryParameters(uri: string): boolean {\n\treturn uri.indexOf('{?') !== -1;\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { PlainHeaders } from '../../types/request-options.type';\n\nexport function setRequestHeader<HttpHeaders>(\n\tinitialHeaders: HttpHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): HttpHeaders;\nexport function setRequestHeader<PlainHeaders>(\n\tinitialHeaders: PlainHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): PlainHeaders;\nexport function setRequestHeader(\n\tinitialHeaders: HttpHeaders | PlainHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): HttpHeaders | PlainHeaders {\n\tif (initialHeaders instanceof HttpHeaders) {\n\t\treturn setHttpRequestHeader(initialHeaders, headerName, headerValue);\n\t}\n\n\treturn setObjectRequestHeader(initialHeaders, headerName, headerValue);\n}\n\nfunction setHttpRequestHeader(\n\tinitialHeaders: HttpHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): HttpHeaders {\n\tif (headerValue !== undefined && headerValue !== null) {\n\t\treturn initialHeaders.append(headerName, headerValue);\n\t}\n\n\treturn initialHeaders;\n}\n\nfunction setObjectRequestHeader(\n\tinitialHeaders: PlainHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): PlainHeaders {\n\tconst headers: PlainHeaders = {};\n\n\tObject.assign(headers, initialHeaders);\n\n\tif (headerValue !== undefined && headerValue !== null) {\n\t\theaders[headerName] = headerValue;\n\t}\n\n\treturn headers;\n}\n","export function isString(item: any): boolean {\n\treturn typeof item === 'string' || item instanceof String;\n}\n","export class SimpleHalModel {}\n","import { SimpleHalModel } from '../../models/simple-hal.model';\n\nexport function isSimpleHalModelInstance(classInstance: any): boolean {\n\tif (!classInstance) {\n\t\treturn false;\n\t}\n\n\tif (classInstance instanceof SimpleHalModel) {\n\t\treturn true;\n\t}\n\n\treturn isSimpleHalModelInstance(classInstance.prototype);\n}\n","import { isHalModelInstance } from '../is-hal-model-instance.ts/is-hal-model-instance.helper';\nimport { isSimpleHalModelInstance } from '../is-simple-hal-model-instance.ts/is-simple-hal-model-instance.helper';\n\nexport function isFunction(functionToCheck) {\n\treturn (\n\t\ttypeof functionToCheck === 'function' &&\n\t\t!isHalModelInstance(functionToCheck) &&\n\t\t!isSimpleHalModelInstance(functionToCheck)\n\t);\n}\n","import { Observable } from 'rxjs';\nimport { HttpResponse } from '@angular/common/http';\nimport {\n\tModelOptions,\n\tDEFAULT_MODEL_OPTIONS,\n\tDEFAULT_MODEL_TYPE,\n} from '../interfaces/model-options.interface';\nimport { RawHalResource } from '../interfaces/raw-hal-resource.interface';\nimport {\n\tATTRIBUTE_PROPERTIES_METADATA_KEY,\n\tHAL_MODEL_DOCUMENT_CLASS_METADATA_KEY,\n\tHAS_ONE_PROPERTIES_METADATA_KEY,\n\tHAS_MANY_PROPERTIES_METADATA_KEY,\n\tHEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY,\n} from '../constants/metadata.constant';\nimport { HalDocumentConstructor } from '../types/hal-document-construtor.type';\nimport {\n\tModelProperty,\n\tAttributeModelProperty,\n\tHasOneModelProperty,\n\tHasManyModelProperty,\n\tHeaderAttributeModelProperty,\n} from '../interfaces/model-property.interface';\nimport {\n\tLINKS_PROPERTY_NAME,\n\tSELF_PROPERTY_NAME,\n\tEMBEDDED_PROPERTY_NAME,\n} from '../constants/hal.constant';\nimport { LOCAL_DOCUMENT_ID_PREFIX, LOCAL_MODEL_ID_PREFIX } from '../constants/general.constant';\nimport { DatastoreService } from '../services/datastore/datastore.service';\nimport { RawHalLink } from '../interfaces/raw-hal-link.interface';\nimport { RawHalLinks } from '../interfaces/raw-hal-links.interface';\nimport { HalDocument } from '../classes/hal-document';\nimport { NetworkConfig } from '../interfaces/network-config.interface';\nimport { generateUUID } from '../helpers/uuid/uuid.helper';\nimport { getResponseHeader } from '../utils/get-response-headers/get-response-header.util';\nimport { isHalModelInstance } from '../helpers/is-hal-model-instance.ts/is-hal-model-instance.helper';\nimport { PlainHeaders, RequestOptions } from '../types/request-options.type';\nimport { ModelProperty as ModelPropertyEnum } from '../enums/model-property.enum';\nimport { GeneratePayloadOptions } from '../interfaces/generate-payload-options.interface';\nimport { CustomOptions } from '../interfaces/custom-options.interface';\nimport { ensureRelationshipRequestDescriptors } from '../utils/ensure-relationship-descriptors/ensure-relationship-descriptors.util';\nimport { RelationshipRequestDescriptor } from '../types/relationship-request-descriptor.type';\nimport { removeQueryParams } from '../utils/remove-query-params/remove-query-params.util';\nimport { setRequestHeader } from '../utils/set-request-header/set-request-header.util';\nimport { isString } from '../utils/is-string/is-string.util';\nimport { isFunction } from '../helpers/is-function/is-function.helper';\nimport { ModelEndpoints } from '../interfaces/model-endpoints.interface';\n\nexport abstract class HalModel<Datastore extends DatastoreService = DatastoreService> {\n\tprivate config: ModelOptions = this['config'] || DEFAULT_MODEL_OPTIONS;\n\tprivate temporarySelfLink: string = null;\n\tprivate localModelIdentificator: string;\n\tprivate internalHasManyDocumentIdentificators: { [K: string]: string } = {};\n\tpublic static readonly modelType: string = DEFAULT_MODEL_TYPE;\n\n\tconstructor(\n\t\tprotected resource: RawHalResource = {},\n\t\tprotected datastore: Datastore,\n\t\tpublic rawResponse?: HttpResponse<any>,\n\t) {\n\t\tthis.setLocalModelIdentificator();\n\t\tthis.parseAttributes(resource);\n\t\tthis.parseHeaderAttributes(rawResponse);\n\t\tthis.initializeHasOneProperties();\n\t\tthis.initialzieHasManyProperties();\n\t\tthis.extractEmbeddedProperties(resource);\n\t}\n\n\tpublic get uniqueModelIdentificator(): string {\n\t\treturn this.getUniqueModelIdentificator();\n\t}\n\n\tprotected getUniqueModelIdentificator(): string {\n\t\treturn this.selfLink || this.localModelIdentificator;\n\t}\n\n\tpublic get id(): string {\n\t\tif (!this.selfLink) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst selfLink: string = removeQueryParams(this.selfLink);\n\t\treturn selfLink.split('/').pop();\n\t}\n\n\tpublic get endpoint(): string {\n\t\treturn this.config.endpoint || 'unknownModelEndpoint';\n\t}\n\n\tpublic get modelEndpoints(): ModelEndpoints {\n\t\treturn null;\n\t}\n\n\tpublic get networkConfig(): NetworkConfig {\n\t\treturn this.config.networkConfig;\n\t}\n\n\tpublic get type(): string {\n\t\treturn this.config.type;\n\t}\n\n\tpublic getHalDocumentClass<T extends this>(): HalDocumentConstructor<T> {\n\t\treturn Reflect.getMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, this.constructor);\n\t}\n\n\tpublic getRelationshipUrl(relationshipName: string): string {\n\t\tconst property: ModelProperty = this.getPropertyData(relationshipName);\n\n\t\tif (!property) {\n\t\t\tconsole.warn(`Relationship with the name ${relationshipName} is not defined on the model.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst fieldName: string = property.externalName || relationshipName;\n\t\treturn this.links[fieldName] ? this.links[fieldName].href : '';\n\t}\n\n\tpublic getPropertyData(propertyName: string): ModelProperty {\n\t\tconst attributeProperty = this.attributeProperties.find(\n\t\t\t(property: ModelProperty) => property.name === propertyName,\n\t\t);\n\t\tconst hasOneProperty = this.hasOneProperties.find(\n\t\t\t(property: ModelProperty) => property.name === propertyName,\n\t\t);\n\t\tconst hasManyProperty = this.hasManyProperties.find(\n\t\t\t(property: ModelProperty) => property.name === propertyName,\n\t\t);\n\t\treturn attributeProperty || hasOneProperty || hasManyProperty;\n\t}\n\n\tpublic getEmbeddedResource(resourceName: string): RawHalResource | undefined {\n\t\tconst property: ModelProperty = this.getPropertyData(resourceName);\n\n\t\tif (this.resource[property.externalName]) {\n\t\t\treturn this.resource[property.externalName];\n\t\t}\n\n\t\tif (!this.resource[EMBEDDED_PROPERTY_NAME]) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.resource[EMBEDDED_PROPERTY_NAME][property.externalName];\n\t}\n\n\tpublic save(\n\t\trequestOptions?: RequestOptions,\n\t\toptions: CustomOptions<this> = {},\n\t): Observable<this> {\n\t\tconst modelClass = Object.getPrototypeOf(this).constructor;\n\t\treturn this.datastore.save(this, modelClass, requestOptions, options);\n\t}\n\n\tpublic update(\n\t\trequestOptions?: RequestOptions,\n\t\toptions: CustomOptions<this> = {},\n\t): Observable<this> {\n\t\treturn this.datastore.update(this, requestOptions, options);\n\t}\n\n\tpublic delete(\n\t\trequestOptions?: RequestOptions,\n\t\toptions: CustomOptions<this> = {},\n\t): Observable<void> {\n\t\treturn this.datastore.delete(this, requestOptions, options);\n\t}\n\n\tpublic generatePayload(options: GeneratePayloadOptions = {}): object {\n\t\tconst attributePropertiesPayload: object = this.getAttributePropertiesPayload(options);\n\t\tconst relationshipsPayload: object = this.generateRelationshipsPayload(options);\n\t\tconst hasRelationshipLinks: boolean = Boolean(Object.keys(relationshipsPayload).length);\n\n\t\tconst payload = { ...attributePropertiesPayload };\n\n\t\tif (hasRelationshipLinks) {\n\t\t\tpayload[LINKS_PROPERTY_NAME] = relationshipsPayload;\n\t\t}\n\n\t\treturn payload;\n\t}\n\n\t// Used only when HalModels or HalDocument are passed when creating a new model\n\tprivate extractEmbeddedProperties(rawResource: RawHalResource): void {\n\t\tconst embeddedProperties: object = rawResource[EMBEDDED_PROPERTY_NAME] || {};\n\n\t\tObject.keys(embeddedProperties).forEach((propertyName: string) => {\n\t\t\tconst property: ModelProperty = this.getPropertyData(propertyName);\n\t\t\tconst isRelationshipProperty: boolean =\n\t\t\t\tproperty && (this.isHasOneProperty(property) || this.isHasManyProperty(property));\n\t\t\tconst propertyValue = embeddedProperties[propertyName];\n\t\t\tconst isHalModelOrDocument: boolean =\n\t\t\t\tisHalModelInstance(propertyValue) || propertyValue instanceof HalDocument;\n\n\t\t\tif (isRelationshipProperty && isHalModelOrDocument) {\n\t\t\t\tthis[property.name] = propertyValue;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getAttributePropertiesPayload(payloadOptions: GeneratePayloadOptions = {}): object {\n\t\tconst { specificFields, changedPropertiesOnly } = payloadOptions;\n\n\t\treturn this.attributeProperties.reduce((payload: object, property: AttributeModelProperty) => {\n\t\t\tconst propertyName: string = property.name;\n\t\t\tconst isPropertyExcludedFromPaylaod: boolean = property.excludeFromPayload;\n\t\t\tconst isSpecificFieldsSpecified: boolean = specificFields && Boolean(specificFields.length);\n\t\t\tconst isSpecificFieldsConditionSatisfied: boolean =\n\t\t\t\t!isSpecificFieldsSpecified || specificFields.indexOf(propertyName) !== -1;\n\n\t\t\tif (isPropertyExcludedFromPaylaod || !isSpecificFieldsConditionSatisfied) {\n\t\t\t\treturn payload;\n\t\t\t}\n\n\t\t\tconst externalPropertyName: string = property.externalName;\n\t\t\tconst propertyPayload: object = property.transformBeforeSave\n\t\t\t\t? property.transformBeforeSave(this[propertyName])\n\t\t\t\t: this[propertyName];\n\n\t\t\tif (changedPropertiesOnly) {\n\t\t\t\tconst isPropertyChanged: boolean = propertyPayload !== this.resource[propertyName];\n\n\t\t\t\tif (isPropertyChanged) {\n\t\t\t\t\tpayload[externalPropertyName] = propertyPayload;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpayload[externalPropertyName] = propertyPayload;\n\t\t\t}\n\n\t\t\treturn payload;\n\t\t}, {});\n\t}\n\n\tprivate generateHasOnePropertyPayload(property: HasOneModelProperty): object {\n\t\tconst payload: object = {};\n\n\t\tconst propertyName: string = property.name;\n\t\tconst externalPropertyName: string = property.externalName;\n\n\t\tif (!this[propertyName].selfLink) {\n\t\t\treturn payload;\n\t\t}\n\n\t\tpayload[externalPropertyName] = {\n\t\t\thref: this[propertyName].selfLink,\n\t\t};\n\n\t\treturn payload;\n\t}\n\n\tprivate generateHasManyPropertyPayload(property: HasManyModelProperty): object {\n\t\tconst payload: object = {};\n\t\tconst hasManyPropertyLinks = [];\n\n\t\tconst propertyName: string = property.name;\n\t\tconst externalPropertyName: string = property.externalName;\n\n\t\t// TODO check if this[propertyName] is an array of models or just a HalDocument\n\t\tthis[propertyName].forEach((model: HalModel) => {\n\t\t\tif (model && model.selfLink) {\n\t\t\t\thasManyPropertyLinks.push({\n\t\t\t\t\thref: model.selfLink,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasManyPropertyLinks.length) {\n\t\t\tpayload[externalPropertyName] = hasManyPropertyLinks;\n\t\t}\n\n\t\treturn payload;\n\t}\n\n\tprivate generateRelationshipsPayload(payloadOptions: GeneratePayloadOptions = {}): object {\n\t\tconst { specificFields } = payloadOptions;\n\t\tconst isSpecificFieldsSpecified: boolean = specificFields && Boolean(specificFields.length);\n\n\t\treturn [...this.hasOneProperties, ...this.hasManyProperties]\n\t\t\t.filter((property: HasOneModelProperty) => property.includeInPayload)\n\t\t\t.filter(\n\t\t\t\t(property: HasOneModelProperty) =>\n\t\t\t\t\t!isSpecificFieldsSpecified || specificFields.indexOf(property.name) !== -1,\n\t\t\t)\n\t\t\t.reduce((payload: object, property: HasOneModelProperty) => {\n\t\t\t\tconst propertyName: string = property.name;\n\n\t\t\t\tif (!this[propertyName]) {\n\t\t\t\t\treturn payload;\n\t\t\t\t}\n\n\t\t\t\tconst isHasOneProperty: boolean = property.type === ModelPropertyEnum.HasOne;\n\t\t\t\tlet propertyPayload: object;\n\n\t\t\t\tif (isHasOneProperty) {\n\t\t\t\t\tpropertyPayload = this.generateHasOnePropertyPayload(property);\n\t\t\t\t} else {\n\t\t\t\t\tpropertyPayload = this.generateHasManyPropertyPayload(property);\n\t\t\t\t}\n\n\t\t\t\tObject.assign(payload, propertyPayload);\n\n\t\t\t\treturn payload;\n\t\t\t}, {});\n\t}\n\n\tpublic generateHeaders(): PlainHeaders {\n\t\treturn this.headerAttributeProperties.reduce(\n\t\t\t(headers: PlainHeaders, property: HeaderAttributeModelProperty) => {\n\t\t\t\tconst externalPropertyName: string = property.externalName;\n\t\t\t\tconst propertyName: string = property.name;\n\t\t\t\tconst propertyValue = property.transformBeforeSave\n\t\t\t\t\t? property.transformBeforeSave(this[propertyName])\n\t\t\t\t\t: this[propertyName];\n\n\t\t\t\treturn setRequestHeader(headers, externalPropertyName, propertyValue);\n\t\t\t},\n\t\t\t{},\n\t\t);\n\t}\n\n\tpublic get isSaved(): boolean {\n\t\treturn Boolean(this.id);\n\t}\n\n\tpublic fetchRelationships(\n\t\trelationships:\n\t\t\t| string\n\t\t\t| RelationshipRequestDescriptor\n\t\t\t| Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions = {},\n\t): Observable<this> {\n\t\tconst relationshipsArray: Array<string | RelationshipRequestDescriptor> = [].concat(\n\t\t\trelationships,\n\t\t);\n\t\tconst relationshipDescriptors: Array<RelationshipRequestDescriptor> =\n\t\t\tensureRelationshipRequestDescriptors(relationshipsArray);\n\t\treturn this.datastore.fetchModelRelationships(this, relationshipDescriptors, requestOptions);\n\t}\n\n\tpublic getRelationship<T extends HalModel>(relationshipName: string): T | HalDocument<T> {\n\t\tconst property: ModelProperty = this.getPropertyData(relationshipName);\n\n\t\tconst isHasOneProperty: boolean = property.type === ModelPropertyEnum.HasOne;\n\n\t\tif (isHasOneProperty) {\n\t\t\treturn this.getHasOneRelationship(property) as T;\n\t\t}\n\n\t\treturn this.getHasManyRelationship(property);\n\t}\n\n\tprivate get attributeProperties(): Array<AttributeModelProperty> {\n\t\treturn Reflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate get headerAttributeProperties(): Array<HeaderAttributeModelProperty> {\n\t\treturn Reflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate get hasOneProperties(): Array<HasOneModelProperty> {\n\t\treturn Reflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate get hasManyProperties(): Array<HasManyModelProperty> {\n\t\treturn Reflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate initializeHasOneProperties(): void {\n\t\tthis.hasOneProperties.forEach((property: ModelProperty) => {\n\t\t\tObject.defineProperty(this, property.name, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget() {\n\t\t\t\t\treturn this.getHasOneRelationship(property);\n\t\t\t\t},\n\t\t\t\tset<T extends HalModel>(value: T) {\n\t\t\t\t\tif (isHalModelInstance(value) || !value) {\n\t\t\t\t\t\tthis.replaceRelationshipModel(property.externalName, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t`Only HalModel instances can be assigned to property: ${property.name}. This will become an error in the next ngx-hal release`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// throw new Error(`Only HalModel instances can be assigned to property: ${property.name}`);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate initialzieHasManyProperties(): void {\n\t\tthis.hasManyProperties.forEach((property: ModelProperty) => {\n\t\t\tObject.defineProperty(this, property.name, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget() {\n\t\t\t\t\tconst halDocument: HalDocument<HalModel> = this.getHasManyRelationship(property);\n\n\t\t\t\t\tif (!halDocument) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn halDocument.models;\n\t\t\t\t},\n\t\t\t\tset<T extends HalModel>(value: Array<T>) {\n\t\t\t\t\tconst existingHalDocument: HalDocument<HalModel> = this.getHasManyRelationship(property);\n\n\t\t\t\t\tif (existingHalDocument) {\n\t\t\t\t\t\texistingHalDocument.models = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst halDocumentRaw = {\n\t\t\t\t\t\t\tmodels: value,\n\t\t\t\t\t\t\tuniqueModelIdentificator: `${LOCAL_DOCUMENT_ID_PREFIX}-${generateUUID()}`,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.updateHasManyDocumentIdentificator(\n\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\thalDocumentRaw.uniqueModelIdentificator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.datastore.storage.save(halDocumentRaw);\n\t\t\t\t\t\tthis.replaceRelationshipModel(property.externalName, halDocumentRaw);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate setProperty(\n\t\tmodelProperty: AttributeModelProperty | HeaderAttributeModelProperty,\n\t\trawPropertyValue: any,\n\t): void {\n\t\tif (isString(modelProperty.propertyClass)) {\n\t\t\tthis[modelProperty.name] = this.datastore.findModelClassByType(modelProperty.propertyClass);\n\t\t} else if (isFunction(modelProperty.propertyClass)) {\n\t\t\tconst propertyClass = modelProperty.propertyClass(rawPropertyValue);\n\t\t\tthis[modelProperty.name] = new propertyClass(rawPropertyValue);\n\t\t} else if (modelProperty.propertyClass) {\n\t\t\tthis[modelProperty.name] = new modelProperty.propertyClass(rawPropertyValue);\n\t\t} else if (modelProperty.transformResponseValue) {\n\t\t\tthis[modelProperty.name] = modelProperty.transformResponseValue(rawPropertyValue);\n\t\t} else {\n\t\t\tthis[modelProperty.name] = rawPropertyValue;\n\t\t}\n\t}\n\n\tprivate parseAttributes(resource: RawHalResource): void {\n\t\tthis.attributeProperties.forEach((attributeProperty: AttributeModelProperty) => {\n\t\t\tconst rawPropertyValue: any = resource[attributeProperty.externalName];\n\t\t\tthis.setProperty(attributeProperty, rawPropertyValue);\n\t\t});\n\t}\n\n\tprivate parseHeaderAttributes(response: HttpResponse<any>): void {\n\t\tthis.headerAttributeProperties.forEach(\n\t\t\t(headerAttributeProperty: HeaderAttributeModelProperty) => {\n\t\t\t\tconst rawPropertyValue: any = getResponseHeader(\n\t\t\t\t\tresponse,\n\t\t\t\t\theaderAttributeProperty.externalName,\n\t\t\t\t);\n\t\t\t\tthis.setProperty(headerAttributeProperty, rawPropertyValue);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate getHasOneRelationship<T extends HalModel>(property: ModelProperty): T {\n\t\tconst relationshipLinks: RawHalLink = this.links[property.externalName];\n\n\t\tif (!relationshipLinks) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelIdentificator: string = relationshipLinks.href;\n\n\t\treturn this.datastore.storage.get(modelIdentificator);\n\t}\n\n\tprivate getHasManyRelationship<T extends HalModel>(property: ModelProperty): HalDocument<T> {\n\t\tconst uniqueRelationshipIdentificator: string =\n\t\t\tthis.hasManyDocumentIdentificators[property.externalName];\n\n\t\tif (!uniqueRelationshipIdentificator) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst halDocument: HalDocument<T> = this.datastore.storage.get(\n\t\t\tuniqueRelationshipIdentificator,\n\t\t) as HalDocument<T>;\n\n\t\tif (!halDocument) {\n\t\t\tconsole.warn(`Has many relationship ${property.name} is not fetched.`);\n\t\t\treturn;\n\t\t}\n\n\t\treturn halDocument;\n\t}\n\n\tpublic get links(): RawHalLinks | { [relationshipName: string]: RawHalLink } {\n\t\treturn this.resource[LINKS_PROPERTY_NAME] || {};\n\t}\n\n\tpublic get selfLink(): string {\n\t\treturn this.links && this.links[SELF_PROPERTY_NAME]\n\t\t\t? this.links[SELF_PROPERTY_NAME].href\n\t\t\t: this.temporarySelfLink;\n\t}\n\n\tpublic set selfLink(link: string) {\n\t\tthis.temporarySelfLink = link;\n\t}\n\n\tprivate replaceRelationshipModel<T extends HalModel>(\n\t\trelationshipName: string,\n\t\trelationshipModel: T,\n\t): void {\n\t\tthis.resource[LINKS_PROPERTY_NAME] = this.resource[LINKS_PROPERTY_NAME] || {\n\t\t\tself: null,\n\t\t};\n\n\t\tlet relationshipLink = null;\n\t\tif (relationshipModel) {\n\t\t\trelationshipLink = {\n\t\t\t\thref: relationshipModel.uniqueModelIdentificator || relationshipModel.selfLink,\n\t\t\t};\n\t\t}\n\n\t\tthis.resource[LINKS_PROPERTY_NAME][relationshipName] = relationshipLink;\n\n\t\t// Save the model to the storage if it's not already there\n\t\tif (!this[relationshipName] && relationshipModel) {\n\t\t\t// TODO should the model be removed from the storage if relationshipModel does not exist?\n\t\t\tthis.datastore.storage.save(relationshipModel);\n\t\t}\n\t}\n\n\tprivate setLocalModelIdentificator(): void {\n\t\tthis.localModelIdentificator = `${LOCAL_MODEL_ID_PREFIX}-${generateUUID()}`;\n\t}\n\n\tprivate isHasOneProperty(property: ModelOptions): boolean {\n\t\treturn property.type === ModelPropertyEnum.HasOne;\n\t}\n\n\tprivate isHasManyProperty(property: ModelOptions): boolean {\n\t\treturn property.type === ModelPropertyEnum.HasMany;\n\t}\n\n\tpublic updateHasManyDocumentIdentificator(\n\t\tproperty: HasManyModelProperty,\n\t\tidentificator: string,\n\t): void {\n\t\tthis.hasManyDocumentIdentificators[property.externalName] = identificator;\n\t}\n\n\tpublic set hasManyDocumentIdentificators(hasManyDocumentIdentificators: { [K: string]: string }) {\n\t\tthis.internalHasManyDocumentIdentificators = Object.assign({}, hasManyDocumentIdentificators);\n\t}\n\n\tpublic get hasManyDocumentIdentificators(): { [K: string]: string } {\n\t\treturn this.internalHasManyDocumentIdentificators;\n\t}\n}\n","import { RawHalResource } from '../interfaces/raw-hal-resource.interface';\n\nexport abstract class Pagination {\n\tconstructor(protected rawResource: RawHalResource = {}) {}\n}\n","import { HalModel } from '../../models/hal.model';\nimport { HalDocument } from './../hal-document';\nimport { HttpResponse } from '@angular/common/http';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { Observable } from 'rxjs';\nimport { ModelConstructor, ModelConstructorFn } from '../../types/model-constructor.type';\n\nexport abstract class HalStorage {\n\tprotected internalStorage: { [K: string]: any } = {};\n\n\tpublic abstract save<T extends HalModel>(\n\t\tmodel: T | HalDocument<T>,\n\t\tresponse?: HttpResponse<T>,\n\t\talternateUniqueIdentificators?: Array<string>,\n\t): void;\n\n\tpublic abstract get<T extends HalModel>(uniqueModelIdentificator: string): T | HalDocument<T>;\n\n\tpublic saveAll<T extends HalModel>(models: Array<T>, savePartialModels: boolean = false): void {\n\t\tmodels.forEach((model: T) => {\n\t\t\tif (savePartialModels || !this.get(model.uniqueModelIdentificator)) {\n\t\t\t\tthis.save(model);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic remove(model: HalModel): void {\n\t\tdelete this.internalStorage[model.uniqueModelIdentificator];\n\t}\n\n\tpublic enrichRequestOptions(\n\t\tuniqueModelIdentificator: string,\n\t\trequestOptions: RequestOptions,\n\t): void {\n\t\t// noop\n\t}\n\n\tpublic makeGetRequestWrapper?<T extends HalModel>(\n\t\turls: { originalUrl: string; cleanUrl: string; urlWithParams: string },\n\t\tcachedResource: T | HalDocument<T>,\n\t\toriginalGetRequest$: Observable<T | HalDocument<T>>,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T | HalDocument<T>>;\n}\n","import { HalModel } from '../../models/hal.model';\nimport { HalDocument } from './../hal-document';\nimport { HttpResponse } from '@angular/common/http';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { HalStorage } from './hal-storage';\nimport { setRequestHeader } from '../../utils/set-request-header/set-request-header.util';\n\nexport interface EtagStorageModel<T extends HalModel> {\n\tmodel: T | HalDocument<T>;\n\tetag: string;\n}\n\nexport class EtagHalStorage extends HalStorage {\n\tpublic save<T extends HalModel>(\n\t\tmodel: T | HalDocument<T>,\n\t\tresponse?: HttpResponse<T>,\n\t\talternateUniqueIdentificators: Array<string> = [],\n\t): Array<EtagStorageModel<T>> {\n\t\tconst storedModels: Array<EtagStorageModel<T>> = [];\n\n\t\tconst identificators: Array<string> = [].concat(alternateUniqueIdentificators);\n\t\tidentificators.push(model.uniqueModelIdentificator);\n\n\t\tidentificators.filter(Boolean).forEach((identificator: string) => {\n\t\t\tconst storedModel = {\n\t\t\t\tmodel,\n\t\t\t\tetag: this.getEtagFromResponse(response),\n\t\t\t};\n\t\t\tthis.internalStorage[identificator] = storedModel;\n\t\t\tstoredModels.push(storedModel);\n\t\t});\n\n\t\treturn storedModels;\n\t}\n\n\tpublic get<T extends HalModel>(uniqueModelIdentificator: string): T | HalDocument<T> {\n\t\tconst localModel: EtagStorageModel<T> = this.getRawStorageModel(uniqueModelIdentificator);\n\t\treturn localModel ? localModel.model : undefined;\n\t}\n\n\tpublic enrichRequestOptions(\n\t\tuniqueModelIdentificator: string,\n\t\trequestOptions: RequestOptions,\n\t): void {\n\t\tconst storageModel: EtagStorageModel<any> = this.getRawStorageModel(uniqueModelIdentificator);\n\n\t\tif (!storageModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (storageModel.etag) {\n\t\t\trequestOptions.headers = setRequestHeader(\n\t\t\t\trequestOptions.headers,\n\t\t\t\t'If-None-Match',\n\t\t\t\tstorageModel.etag,\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected getRawStorageModel<T extends HalModel>(\n\t\tuniqueModelIdentificator: string,\n\t): EtagStorageModel<T> {\n\t\treturn this.internalStorage[uniqueModelIdentificator];\n\t}\n\n\tprivate getEtagFromResponse<T>(response: HttpResponse<T>): string {\n\t\tif (!response || !response.headers || !response.headers.get) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn response.headers.get('ETag');\n\t}\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { HalModel } from '../../models/hal.model';\nimport { HalDocument } from './../hal-document';\nimport { HalStorage } from './hal-storage';\n\nexport class SimpleHalStorage extends HalStorage {\n\tpublic save<T extends HalModel>(\n\t\tmodel: T | HalDocument<T>,\n\t\tresponse?: HttpResponse<T>,\n\t\talternateUniqueIdentificators: Array<string> = [],\n\t): void {\n\t\tconst identificators: Array<string> = [].concat(alternateUniqueIdentificators);\n\t\tidentificators.push(model.uniqueModelIdentificator);\n\n\t\tidentificators.filter(Boolean).forEach((identificator: string) => {\n\t\t\tthis.internalStorage[identificator] = model;\n\t\t});\n\t}\n\n\tpublic get<T extends HalModel>(uniqueModelIdentificator: string): T | HalDocument<T> {\n\t\treturn this.internalStorage[uniqueModelIdentificator];\n\t}\n}\n","export enum CacheStrategy {\n\tCUSTOM = 'CUSTOM',\n\tETAG = 'ETAG',\n\tNONE = 'NONE',\n}\n","export class ModelServiceOptions {}\n","export const DEFAULT_REQUEST_OPTIONS = {\n\tobserve: 'response',\n\tparams: {},\n};\n","import { CacheStrategy } from '../../enums/cache-strategy.enum';\nimport { SimpleHalStorage } from '../../classes/hal-storage/simple-hal-storage';\nimport { EtagHalStorage } from '../../classes/hal-storage/etag-hal-storage';\nimport { HalStorage } from './hal-storage';\n\nexport type HalStorageType = SimpleHalStorage | EtagHalStorage;\n\nexport function createHalStorage(\n\tcacheStrategy: CacheStrategy = CacheStrategy.NONE,\n\tstorageInstance: HalStorage,\n): HalStorageType {\n\tlet storage: HalStorageType;\n\n\tswitch (cacheStrategy) {\n\t\tcase CacheStrategy.NONE:\n\t\t\tstorage = new SimpleHalStorage();\n\t\t\tbreak;\n\t\tcase CacheStrategy.ETAG:\n\t\t\tstorage = new EtagHalStorage();\n\t\t\tbreak;\n\t\tcase CacheStrategy.CUSTOM:\n\t\t\tif (!storageInstance) {\n\t\t\t\tthrow new Error('When CacheStrategy.CUSTOM is specified, config.storage is required.');\n\t\t\t}\n\t\t\tstorage = storageInstance;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown CacheStrategy: ${cacheStrategy}`);\n\t\t\tbreak;\n\t}\n\n\treturn storage;\n}\n","export function makeQueryParamsString(params: object, sortAlphabetically: boolean = false): string {\n\tlet paramKeys: Array<string> = Object.keys(params);\n\n\tif (sortAlphabetically) {\n\t\tparamKeys = paramKeys.sort();\n\t}\n\n\tconst queryParamsString: string = paramKeys.reduce(\n\t\t(paramsString: string, queryParamKey: string) => {\n\t\t\treturn `${paramsString}&${queryParamKey}=${params[queryParamKey]}`;\n\t\t},\n\t\t'',\n\t);\n\n\treturn queryParamsString.slice(1);\n}\n","export function getQueryParams(url: string): object {\n\tconst queryParams: object = {};\n\tconst parser: HTMLAnchorElement = document.createElement('a');\n\tparser.href = url;\n\n\tconst query: string = parser.search.substring(1);\n\n\tif (!query) {\n\t\treturn {};\n\t}\n\n\tconst params: Array<string> = query.split('&');\n\n\tparams.forEach((param: string) => {\n\t\tconst [key, value] = param.split('=');\n\n\t\tif (queryParams[key]) {\n\t\t\tqueryParams[key] = [decodeURIComponentWithErrorHandling(value)].concat(queryParams[key]);\n\t\t} else {\n\t\t\tconst items: Array<string> = value.split(',');\n\t\t\tif (items.length === 1) {\n\t\t\t\tqueryParams[key] = decodeURIComponentWithErrorHandling(value);\n\t\t\t} else {\n\t\t\t\tqueryParams[key] = items.map((urlParam: string) =>\n\t\t\t\t\tdecodeURIComponentWithErrorHandling(urlParam),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn queryParams;\n}\n\nexport function decodeURIComponentWithErrorHandling(value: string): string {\n\ttry {\n\t\treturn decodeURIComponent(value);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\treturn value;\n\t}\n}\n","import { HttpParams } from '@angular/common/http';\n\nexport function makeHttpParams(params: object, httpParamsOptions?: object): HttpParams {\n\tlet httpParams: HttpParams = new HttpParams(httpParamsOptions);\n\n\tObject.keys(params).forEach((paramKey: string) => {\n\t\thttpParams = httpParams.append(paramKey, params[paramKey]);\n\t});\n\n\treturn httpParams;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport { Observable, combineLatest, of, throwError, from } from 'rxjs';\nimport { map, flatMap, tap, catchError, mergeMap, delay } from 'rxjs/operators';\nimport * as UriTemplates from 'uri-templates';\nimport { NetworkConfig, DEFAULT_NETWORK_CONFIG } from '../../interfaces/network-config.interface';\nimport { HalModel } from '../../models/hal.model';\nimport { HalDocument } from '../../classes/hal-document';\nimport { ModelConstructor, ModelConstructorFn } from '../../types/model-constructor.type';\nimport { HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY } from '../../constants/metadata.constant';\nimport { LOCAL_MODEL_ID_PREFIX, LOCAL_DOCUMENT_ID_PREFIX } from '../../constants/general.constant';\nimport { HalDocumentConstructor } from '../../types/hal-document-construtor.type';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { DEFAULT_REQUEST_OPTIONS } from '../../constants/request.constant';\nimport { RawHalResource } from '../../interfaces/raw-hal-resource.interface';\nimport { ModelProperty, AttributeModelProperty } from '../../interfaces/model-property.interface';\nimport { ModelProperty as ModelPropertyEnum } from '../../enums/model-property.enum';\nimport { RawHalLink } from '../../interfaces/raw-hal-link.interface';\nimport { PaginationConstructor } from '../../types/pagination.type';\nimport { getResponseHeader } from '../../utils/get-response-headers/get-response-header.util';\nimport { CacheStrategy } from '../../enums/cache-strategy.enum';\nimport { createHalStorage } from '../../classes/hal-storage/hal-storage-factory';\nimport { RequestsOptions } from '../../interfaces/requests-options.interface';\nimport { makeQueryParamsString } from '../../helpers/make-query-params-string/make-query-params-string.helper';\nimport { removeQueryParams } from '../../utils/remove-query-params/remove-query-params.util';\nimport {\n\tgetQueryParams,\n\tdecodeURIComponentWithErrorHandling,\n} from '../../utils/get-query-params/get-query-params.util';\nimport { isHalModelInstance } from '../../helpers/is-hal-model-instance.ts/is-hal-model-instance.helper';\nimport { makeHttpParams } from '../../helpers/make-http-params/make-http-params.helper';\nimport { CustomOptions } from '../../interfaces/custom-options.interface';\nimport { deepmergeWrapper } from '../../utils/deepmerge-wrapper';\nimport { RelationshipRequestDescriptor } from '../../types/relationship-request-descriptor.type';\nimport { ensureRelationshipRequestDescriptors } from '../../utils/ensure-relationship-descriptors/ensure-relationship-descriptors.util';\nimport { RelationshipDescriptorMappings } from '../../types/relationship-descriptor-mappings.type';\nimport { EMBEDDED_PROPERTY_NAME } from '../../constants/hal.constant';\nimport { HalStorage } from '../../classes/hal-storage/hal-storage';\nimport { isString } from '../../utils/is-string/is-string.util';\nimport { isFunction } from '../../helpers/is-function/is-function.helper';\n\nconst UriTemplate = UriTemplates.default || UriTemplates;\n\n@Injectable()\nexport class DatastoreService {\n\tpublic networkConfig: NetworkConfig = this['networkConfig'] || DEFAULT_NETWORK_CONFIG;\n\tprivate _cacheStrategy: CacheStrategy;\n\t// tslint:disable-next-line\n\tprivate _storage: HalStorage; // set by Config decorator\n\tprivate internalStorage = createHalStorage(this.cacheStrategy, this.halStorage);\n\tprotected httpParamsOptions?: object;\n\tpublic paginationClass: PaginationConstructor;\n\tpublic modelTypes = [];\n\n\tconstructor(public http: HttpClient) {}\n\n\tprivate getHalDocumentClass<T extends HalModel>(): HalDocumentConstructor<T> {\n\t\treturn (\n\t\t\tReflect.getMetadata(HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY, this.constructor) ||\n\t\t\tHalDocument\n\t\t);\n\t}\n\n\tpublic buildUrl(model?: HalModel): string {\n\t\tconst hostUrl: string = this.buildHostUrl(model);\n\n\t\tconst urlParts: Array<string> = [hostUrl, model ? model.endpoint : null];\n\n\t\tif (model && model.id) {\n\t\t\turlParts.push(model.id);\n\t\t}\n\n\t\treturn urlParts.filter((urlPart) => urlPart).join('/');\n\t}\n\n\tpublic createHalDocument<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\trawResponse?: HttpResponse<any>,\n\t): HalDocument<T> {\n\t\tconst propertyClass: ModelConstructor<T> = isFunction(modelClass)\n\t\t\t? (modelClass as ModelConstructorFn<T>)(rawResource)\n\t\t\t: (modelClass as ModelConstructor<T>);\n\t\tconst representantiveModel: T = new propertyClass({}, this);\n\t\tconst halDocumentClass =\n\t\t\trepresentantiveModel.getHalDocumentClass() || this.getHalDocumentClass<T>();\n\t\treturn new halDocumentClass(rawResource, rawResponse, propertyClass, this);\n\t}\n\n\tpublic findOne<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tmodelId: string,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t): Observable<T> {\n\t\tconst url: string = customUrl || this.buildModelUrl(modelClass, modelId);\n\n\t\tconst requestsOptions: RequestsOptions = {\n\t\t\tmainRequest: requestOptions,\n\t\t\tsubsequentRequests: subsequentRequestsOptions,\n\t\t};\n\n\t\tconst relationshipDescriptors: Array<RelationshipRequestDescriptor> =\n\t\t\tensureRelationshipRequestDescriptors(includeRelationships);\n\n\t\treturn this.handleGetRequestWithRelationships(\n\t\t\turl,\n\t\t\trequestsOptions,\n\t\t\tmodelClass,\n\t\t\ttrue,\n\t\t\trelationshipDescriptors,\n\t\t);\n\t}\n\n\tpublic fetchModelRelationships<T extends HalModel>(\n\t\tmodel: T,\n\t\trelationshipNames: RelationshipRequestDescriptor | Array<RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions = {},\n\t): Observable<T> {\n\t\tconst ensuredRelationshipNames: Array<RelationshipRequestDescriptor> = [].concat(\n\t\t\trelationshipNames,\n\t\t);\n\n\t\tconst relationships$: Array<Observable<any>> = this.fetchRelationships(\n\t\t\tmodel,\n\t\t\tensuredRelationshipNames,\n\t\t\trequestOptions,\n\t\t);\n\n\t\tif (!relationships$.length) {\n\t\t\treturn of(model);\n\t\t}\n\n\t\treturn combineLatest(relationships$).pipe(map(() => model));\n\t}\n\n\tprivate fetchRelationships<T extends HalModel>(\n\t\tmodel: T,\n\t\trelationshipDescriptors: Array<RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions = {}, // \"global\" options for all requests\n\t): Array<Observable<any>> {\n\t\tconst relationshipCalls: Array<Observable<any>> = [];\n\n\t\tconst relationshipMappings: RelationshipDescriptorMappings =\n\t\t\tthis.extractCurrentLevelRelationships(relationshipDescriptors);\n\n\t\tfor (const relationshipName in relationshipMappings) {\n\t\t\tconst url: string = model.getRelationshipUrl(relationshipName);\n\t\t\tconst property: ModelProperty = model.getPropertyData(relationshipName);\n\n\t\t\tif (!property) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet modelClass = property.propertyClass;\n\n\t\t\tif (isString(modelClass)) {\n\t\t\t\tmodelClass = this.findModelClassByType(modelClass);\n\t\t\t}\n\n\t\t\tconst isSingleResource: boolean =\n\t\t\t\tproperty.type === ModelPropertyEnum.Attribute || property.type === ModelPropertyEnum.HasOne;\n\n\t\t\t// Checks if the relationship is already embdedded inside the emdedded property, or\n\t\t\t// as a part of attribute properties\n\t\t\tconst embeddedRelationship: RawHalResource = model.getEmbeddedResource(relationshipName);\n\t\t\tlet fetchedModels: T | HalDocument<T>;\n\n\t\t\tif (embeddedRelationship) {\n\t\t\t\tfetchedModels = this.processRawResource(\n\t\t\t\t\tembeddedRelationship,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\tisSingleResource,\n\t\t\t\t\tmodel.rawResponse,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!url ||\n\t\t\t\turl.startsWith(LOCAL_MODEL_ID_PREFIX) ||\n\t\t\t\turl.startsWith(LOCAL_DOCUMENT_ID_PREFIX)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst relationshipRequestOptions = relationshipMappings[relationshipName]\n\t\t\t\t.originalRelationshipDescriptor\n\t\t\t\t? relationshipMappings[relationshipName].originalRelationshipDescriptor.options\n\t\t\t\t: null;\n\t\t\tconst requestsOptions: RequestsOptions = {\n\t\t\t\tmainRequest: relationshipRequestOptions || requestOptions,\n\t\t\t\tsubsequentRequests: requestOptions,\n\t\t\t};\n\n\t\t\tconst relationshipCall$: Observable<any> = this.handleGetRequestWithRelationships(\n\t\t\t\turl,\n\t\t\t\trequestsOptions,\n\t\t\t\tmodelClass,\n\t\t\t\tisSingleResource,\n\t\t\t\trelationshipMappings[relationshipName].childrenRelationships,\n\t\t\t\tfetchedModels,\n\t\t\t).pipe(\n\t\t\t\tmap((fetchedRelation) => {\n\t\t\t\t\tconst externalRelationshipName: string = property.externalName;\n\n\t\t\t\t\tif (isHalModelInstance(model)) {\n\t\t\t\t\t\tif (property.type === ModelPropertyEnum.HasOne) {\n\t\t\t\t\t\t\t// The original relationship URL on the parent model must be replaced because\n\t\t\t\t\t\t\t// the actual relationship URL may have some query parameteres attached to it\n\t\t\t\t\t\t\tmodel.links[externalRelationshipName].href = fetchedRelation.uniqueModelIdentificator;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmodel.updateHasManyDocumentIdentificator(\n\t\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\t\tfetchedRelation.uniqueModelIdentificator,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// In case of a HalDocument, halDocument.models may contain model instances which are not the same as the models\n\t\t\t\t\t\t\t// saved in local storage. That happens if the same models are fetch beforehand through another API call.\n\t\t\t\t\t\t\t// In that case, hasManyDocumentIdentificators of the models from HalDocument must be updated as well.\n\t\t\t\t\t\t\tconst localModel: T = this.storage.get(model.uniqueModelIdentificator);\n\t\t\t\t\t\t\tif (localModel && localModel !== model) {\n\t\t\t\t\t\t\t\tlocalModel.updateHasManyDocumentIdentificator(\n\t\t\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\t\t\tfetchedRelation.uniqueModelIdentificator,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fetchedRelation;\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\trelationshipCalls.push(relationshipCall$);\n\t\t}\n\n\t\treturn relationshipCalls;\n\t}\n\n\tprivate extractCurrentLevelRelationships(\n\t\trelationshipDescriptors: Array<RelationshipRequestDescriptor>,\n\t): RelationshipDescriptorMappings {\n\t\treturn relationshipDescriptors.reduce(\n\t\t\t(\n\t\t\t\trelationships: RelationshipDescriptorMappings,\n\t\t\t\tcurrentRelationshipDescriptor: RelationshipRequestDescriptor,\n\t\t\t) => {\n\t\t\t\tconst relationshipNameParts: Array<string> = currentRelationshipDescriptor.name.split('.');\n\t\t\t\tconst currentLevelRelationship: string = relationshipNameParts.shift();\n\n\t\t\t\trelationships[currentLevelRelationship] = relationships[currentLevelRelationship] || {\n\t\t\t\t\tchildrenRelationships: [],\n\t\t\t\t};\n\t\t\t\tif (relationshipNameParts.length) {\n\t\t\t\t\trelationships[currentLevelRelationship].childrenRelationships.push({\n\t\t\t\t\t\tname: relationshipNameParts.join('.'),\n\t\t\t\t\t\toptions: currentRelationshipDescriptor.options,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\trelationships[currentLevelRelationship].originalRelationshipDescriptor =\n\t\t\t\t\t\tcurrentRelationshipDescriptor;\n\t\t\t\t}\n\n\t\t\t\treturn relationships;\n\t\t\t},\n\t\t\t{},\n\t\t);\n\t}\n\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: true,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t): Observable<T>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: false,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t): Observable<HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t): Observable<T | HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: true,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: T | HalDocument<T>,\n\t): Observable<T>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: T,\n\t): Observable<T>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: HalDocument<T>,\n\t): Observable<HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: T | HalDocument<T>,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T | HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor> = [],\n\t\tfetchedModels: T | HalDocument<T> = null,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T | HalDocument<T>> {\n\t\tif (fetchedModels) {\n\t\t\treturn of(fetchedModels);\n\t\t}\n\n\t\tconst httpRequest$ = this.makeGetRequestWrapper(\n\t\t\turl,\n\t\t\trequestsOptions,\n\t\t\tmodelClass,\n\t\t\tisSingleResource,\n\t\t\tstorePartialModels,\n\t\t);\n\n\t\tif (includeRelationships.length) {\n\t\t\treturn httpRequest$.pipe(\n\t\t\t\tflatMap((model: T | HalDocument<T>) => {\n\t\t\t\t\tconst models: Array<T> = isSingleResource\n\t\t\t\t\t\t? ([model] as Array<T>)\n\t\t\t\t\t\t: (model as HalDocument<T>).models;\n\n\t\t\t\t\tconst relationshipCalls: Array<Observable<any>> = this.triggerFetchingModelRelationships(\n\t\t\t\t\t\tmodels,\n\t\t\t\t\t\tincludeRelationships,\n\t\t\t\t\t\trequestsOptions.subsequentRequests,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!relationshipCalls.length) {\n\t\t\t\t\t\treturn of(model);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn combineLatest(relationshipCalls).pipe(map(() => model));\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn httpRequest$;\n\t}\n\n\tprivate makeGetRequestWrapper<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T> | T> {\n\t\tconst originalGetRequest$: Observable<T | HalDocument<T>> = this.makeGetRequest(\n\t\t\turl,\n\t\t\trequestsOptions.mainRequest,\n\t\t\tmodelClass,\n\t\t\tisSingleResource,\n\t\t\tstorePartialModels,\n\t\t);\n\n\t\tif (this.storage.makeGetRequestWrapper) {\n\t\t\tconst {\n\t\t\t\tcleanUrl,\n\t\t\t\turlWithParams,\n\t\t\t\trequestOptions: options,\n\t\t\t} = this.extractRequestInfo(url, requestsOptions.mainRequest);\n\t\t\tconst cachedResoucesFromUrl =\n\t\t\t\tthis.storage.get(decodeURIComponentWithErrorHandling(url)) ||\n\t\t\t\tthis.storage.get(decodeURIComponentWithErrorHandling(urlWithParams));\n\t\t\treturn this.storage.makeGetRequestWrapper(\n\t\t\t\t{ cleanUrl, urlWithParams, originalUrl: url },\n\t\t\t\tcachedResoucesFromUrl,\n\t\t\t\toriginalGetRequest$,\n\t\t\t\toptions,\n\t\t\t\tmodelClass,\n\t\t\t\tstorePartialModels,\n\t\t\t);\n\t\t}\n\n\t\treturn originalGetRequest$;\n\t}\n\n\tprivate triggerFetchingModelRelationships<T extends HalModel>(\n\t\tmodels: Array<T>,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\trequestOptions?: RequestOptions,\n\t): Array<Observable<any>> {\n\t\tconst modelRelationshipCalls: Array<Observable<any>> = [];\n\n\t\tmodels.forEach((model: T) => {\n\t\t\tconst relationshipCalls = this.fetchRelationships(\n\t\t\t\tmodel,\n\t\t\t\tincludeRelationships,\n\t\t\t\trequestOptions,\n\t\t\t);\n\t\t\tmodelRelationshipCalls.push(...relationshipCalls);\n\t\t});\n\n\t\treturn modelRelationshipCalls;\n\t}\n\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl?: string,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tstorePartialModels?: boolean,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams = {},\n\t\tincludeMeta: boolean = false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t\tstorePartialModels: boolean = false,\n\t): Observable<HalDocument<T> | Array<T>> {\n\t\tconst url: string = customUrl || this.buildModelUrl(modelClass);\n\n\t\tconst subsequentOptions: RequestOptions = deepmergeWrapper({}, subsequentRequestsOptions);\n\n\t\tconst paramsObject: object = this.ensureParamsObject(params || {});\n\t\trequestOptions.params = this.ensureParamsObject(requestOptions.params || {});\n\t\trequestOptions.params = Object.assign(requestOptions.params, paramsObject);\n\n\t\tconst options: RequestOptions = deepmergeWrapper({}, requestOptions);\n\n\t\tconst requestsOptions: RequestsOptions = {\n\t\t\tmainRequest: options,\n\t\t\tsubsequentRequests: subsequentOptions,\n\t\t};\n\n\t\tconst relationshipDescriptors: Array<RelationshipRequestDescriptor> =\n\t\t\tensureRelationshipRequestDescriptors(includeRelationships);\n\n\t\treturn this.handleGetRequestWithRelationships(\n\t\t\turl,\n\t\t\trequestsOptions,\n\t\t\tmodelClass,\n\t\t\tfalse,\n\t\t\trelationshipDescriptors,\n\t\t\tnull,\n\t\t\tstorePartialModels,\n\t\t).pipe(\n\t\t\tflatMap((halDocument: HalDocument<T>) => {\n\t\t\t\treturn this.fetchEmbeddedListItems(\n\t\t\t\t\thalDocument,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\trelationshipDescriptors,\n\t\t\t\t\tsubsequentOptions,\n\t\t\t\t).pipe(\n\t\t\t\t\tmap((models: Array<T>) => {\n\t\t\t\t\t\thalDocument.models = models;\n\t\t\t\t\t\treturn halDocument;\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t\tmap((halDocument: HalDocument<T>) => (includeMeta ? halDocument : halDocument.models)),\n\t\t);\n\t}\n\n\tpublic save<T extends HalModel>(\n\t\tmodel: T,\n\t\tmodelClass: ModelConstructor<T>,\n\t\trequestOptions?: RequestOptions,\n\t\tsaveOptions: CustomOptions<T> = {},\n\t): Observable<T> {\n\t\tconst defaultSaveOptions: CustomOptions<T> = {\n\t\t\tbuildUrlFunction: this.defaultUrlBuildFunction,\n\t\t\tspecificFields: null,\n\t\t\ttransformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n\t\t};\n\n\t\tconst options: CustomOptions<T> = deepmergeWrapper(defaultSaveOptions, saveOptions);\n\n\t\tconst url: string = options.buildUrlFunction(model, this.buildUrl(model));\n\n\t\tconst payload: object = model.generatePayload({\n\t\t\tspecificFields: options.specificFields,\n\t\t\tchangedPropertiesOnly: false,\n\t\t});\n\n\t\tconst transformedPaylaod: object = options.transformPayloadBeforeSave(payload);\n\t\tconst modelHeaders: object = model.generateHeaders();\n\n\t\tconst modelRequestOptions: RequestOptions = requestOptions || {};\n\t\tmodelRequestOptions.headers = modelRequestOptions.headers || {};\n\t\tObject.assign(modelRequestOptions.headers, modelHeaders);\n\n\t\tlet request$;\n\n\t\tif (model.isSaved) {\n\t\t\trequest$ = this.makePutRequest(url, transformedPaylaod, modelRequestOptions);\n\t\t} else {\n\t\t\trequest$ = this.makePostRequest(url, transformedPaylaod, modelRequestOptions);\n\t\t}\n\n\t\treturn request$.pipe(\n\t\t\tmap((response: HttpResponse<T>) => {\n\t\t\t\tconst rawResource: RawHalResource = this.extractResourceFromResponse(response);\n\t\t\t\tif (rawResource) {\n\t\t\t\t\treturn this.processRawResource(rawResource, modelClass, true, response);\n\t\t\t\t}\n\n\t\t\t\tconst newLocationLink: string = getResponseHeader(response, 'Location');\n\t\t\t\tif (newLocationLink && model.selfLink !== newLocationLink) {\n\t\t\t\t\tmodel.selfLink = newLocationLink;\n\t\t\t\t}\n\n\t\t\t\tif (!this.storage.get(model.selfLink)) {\n\t\t\t\t\tthis.storage.save(model, response);\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\t\t\t}),\n\t\t);\n\t}\n\n\t// TODO this updated Attribute properties only, implement HasOne and HasMany properties\n\tprivate updateModelWithChangedProperties<T extends HalModel>(model: T, payload: object) {\n\t\tObject.keys(payload).forEach((externalPropertyName: string) => {\n\t\t\tconst property: AttributeModelProperty = model.getPropertyData(externalPropertyName);\n\n\t\t\tif (\n\t\t\t\tpayload[externalPropertyName] &&\n\t\t\t\tproperty &&\n\t\t\t\tproperty.type === ModelPropertyEnum.Attribute\n\t\t\t) {\n\t\t\t\tmodel['resource'][externalPropertyName] = payload[externalPropertyName];\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic update<T extends HalModel>(\n\t\tmodel: T,\n\t\trequestOptions?: RequestOptions,\n\t\tupdateOptions: CustomOptions<T> = {},\n\t): Observable<T> {\n\t\tconst defaultUpdateOptions: CustomOptions<T> = {\n\t\t\tbuildUrlFunction: this.defaultUrlBuildFunction,\n\t\t\tspecificFields: null,\n\t\t\ttransformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n\t\t};\n\n\t\tconst options: CustomOptions<T> = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n\n\t\tconst url: string = options.buildUrlFunction(model, this.buildUrl(model));\n\t\tconst payload: object = model.generatePayload({\n\t\t\tspecificFields: options.specificFields,\n\t\t\tchangedPropertiesOnly: true,\n\t\t});\n\t\tconst transformedPaylaod: object = options.transformPayloadBeforeSave(payload);\n\t\tconst modelHeaders: object = model.generateHeaders();\n\n\t\tconst modelRequestOptions: RequestOptions = requestOptions || {};\n\t\tmodelRequestOptions.headers = modelRequestOptions.headers || {};\n\t\tObject.assign(modelRequestOptions.headers, modelHeaders);\n\n\t\treturn this.makePatchRequest(url, transformedPaylaod, modelRequestOptions).pipe(\n\t\t\tmap(() => {\n\t\t\t\tthis.updateModelWithChangedProperties(model, transformedPaylaod);\n\t\t\t\treturn model;\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic delete<T extends HalModel>(\n\t\tmodel: T,\n\t\trequestOptions?: RequestOptions,\n\t\tupdateOptions: CustomOptions<T> = {},\n\t): Observable<void> {\n\t\tconst defaultUpdateOptions: CustomOptions<T> = {\n\t\t\tbuildUrlFunction: this.defaultUrlBuildFunction,\n\t\t};\n\n\t\tconst options: CustomOptions<T> = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n\t\tconst url: string = options.buildUrlFunction(model, this.buildUrl(model));\n\n\t\treturn this.makeDeleteRequest(url, requestOptions).pipe(\n\t\t\ttap(() => {\n\t\t\t\tthis.storage.remove(model);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic get storage(): any {\n\t\treturn this.internalStorage;\n\t}\n\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: false,\n\t): Observable<HalDocument<T>>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: false,\n\t\tincludeNetworkConfig: false,\n\t): Observable<HalDocument<T>>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: false,\n\t\tincludeNetworkConfig: true,\n\t): Observable<HalDocument<T>>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: true,\n\t): Observable<T>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: boolean,\n\t): Observable<HalDocument<T> | T>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: boolean,\n\t\tincludeNetworkConfig?: boolean,\n\t): Observable<HalDocument<T> | T>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: boolean,\n\t\tincludeNetworkConfig: boolean = true,\n\t): Observable<HalDocument<T> | T> {\n\t\tconst customUrl: string = includeNetworkConfig\n\t\t\t? `${this.buildHostUrl(new modelClass({}, this))}/${url}`\n\t\t\t: url;\n\n\t\tswitch (method.toLocaleLowerCase()) {\n\t\t\tcase 'get':\n\t\t\t\treturn this.makeGetRequest(customUrl, requestOptions, modelClass, singleResource);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Method ${method} is not supported.`);\n\t\t}\n\t}\n\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: false,\n\t): Observable<HalDocument<T>>;\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: true,\n\t): Observable<T>;\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T> | T>;\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T> | T> {\n\t\tconst {\n\t\t\tcleanUrl,\n\t\t\trequestOptions: options,\n\t\t\turlWithParams,\n\t\t} = this.extractRequestInfo(url, requestOptions);\n\n\t\treturn this.http.get<T>(cleanUrl, options as any).pipe(\n\t\t\tmap((response: HttpResponse<T>) => {\n\t\t\t\tconst rawResource: RawHalResource = this.extractResourceFromResponse(response);\n\t\t\t\treturn this.processRawResource(\n\t\t\t\t\trawResource,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\tsingleResource,\n\t\t\t\t\tresponse,\n\t\t\t\t\turlWithParams,\n\t\t\t\t\tstorePartialModels,\n\t\t\t\t);\n\t\t\t}),\n\t\t\tcatchError((response: HttpResponse<T>) => {\n\t\t\t\tif (response.status === 304) {\n\t\t\t\t\tconst cachedModel: T = this.storage.get(url) || this.storage.get(response.url);\n\n\t\t\t\t\tif (cachedModel) {\n\t\t\t\t\t\treturn of(cachedModel);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn throwError(response);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic head<T extends HalModel>(url: string, requestOptions: RequestOptions): Observable<any> {\n\t\tconst { cleanUrl, requestOptions: options } = this.extractRequestInfo(url, requestOptions);\n\n\t\treturn this.http.head<T>(cleanUrl, options as any);\n\t}\n\n\tprivate extractRequestInfo(\n\t\turl: string,\n\t\toptions: RequestOptions,\n\t): {\n\t\tcleanUrl: string;\n\t\turlWithParams: string;\n\t\trequestOptions: RequestOptions;\n\t} {\n\t\tconst params: object = this.ensureParamsObject(options.params || {});\n\t\tObject.assign(options, { params });\n\t\tconst requestOptions: RequestOptions = deepmergeWrapper(\n\t\t\tDEFAULT_REQUEST_OPTIONS,\n\t\t\tthis.networkConfig.globalRequestOptions,\n\t\t\toptions,\n\t\t);\n\n\t\tthis.storage.enrichRequestOptions(url, options);\n\n\t\tconst fillParams = Object.assign({}, options.params, options.routeParams);\n\t\tconst templatedUrl: string = new UriTemplate(url).fill(fillParams);\n\n\t\tconst urlQueryParams: object = getQueryParams(templatedUrl);\n\t\trequestOptions.params = Object.assign(urlQueryParams, requestOptions.params);\n\n\t\tconst cleanUrl: string = removeQueryParams(templatedUrl);\n\t\tconst queryParamsString: string = makeQueryParamsString(requestOptions.params, true);\n\t\tconst urlWithParams = queryParamsString ? `${cleanUrl}?${queryParamsString}` : cleanUrl;\n\n\t\trequestOptions.params = makeHttpParams(requestOptions.params, this.httpParamsOptions);\n\n\t\treturn {\n\t\t\tcleanUrl,\n\t\t\turlWithParams,\n\t\t\trequestOptions,\n\t\t};\n\t}\n\n\tprivate ensureParamsObject(\n\t\tparams: HttpParams | { [param: string]: string | string[] } | object,\n\t): { [param: string]: string | string[] } | object {\n\t\tif (params instanceof HttpParams) {\n\t\t\treturn params.keys().reduce((paramsObject: object, paramName: string) => {\n\t\t\t\tconst arrayParam = params.getAll(paramName);\n\t\t\t\tparamsObject[paramName] = arrayParam.length > 1 ? arrayParam : params.get(paramName);\n\t\t\t\treturn paramsObject;\n\t\t\t}, {});\n\t\t}\n\n\t\treturn params;\n\t}\n\n\tprivate makePostRequest<T extends HalModel>(\n\t\turl: string,\n\t\tpayload: object,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.post<T>(cleanUrl, payload, options as { [K: string]: any });\n\t}\n\n\tprivate makePutRequest<T extends HalModel>(\n\t\turl: string,\n\t\tpayload: object,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.put<T>(cleanUrl, payload, options as { [K: string]: any });\n\t}\n\n\tprivate makePatchRequest<T extends HalModel>(\n\t\turl: string,\n\t\tpayload: object,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.patch<T>(cleanUrl, payload, options as { [K: string]: any });\n\t}\n\n\tprivate makeDeleteRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.delete<T>(cleanUrl, options as { [K: string]: any });\n\t}\n\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: false,\n\t\tresponse: HttpResponse<T>,\n\t): HalDocument<T>;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: true,\n\t\tresponse: HttpResponse<T>,\n\t): T;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tresponse: HttpResponse<T>,\n\t): T | HalDocument<T>;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tresponse: HttpResponse<T>,\n\t\turl?: string,\n\t\tsavePartialModels?: boolean,\n\t): T | HalDocument<T>;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tresponse: HttpResponse<T>,\n\t\turl?: string,\n\t\tsavePartialModels?: boolean,\n\t): T | HalDocument<T> {\n\t\tif (isSingleResource) {\n\t\t\tconst propertyClass: ModelConstructor<T> = isFunction(modelClass)\n\t\t\t\t? (modelClass as ModelConstructorFn<T>)(rawResource)\n\t\t\t\t: (modelClass as ModelConstructor<T>);\n\t\t\tconst model: T = new propertyClass(rawResource, this, response);\n\t\t\tthis.populateResourceWithRelationshipIndentificators(model);\n\t\t\tthis.storage.save(model, response, [url]);\n\t\t\treturn model;\n\t\t}\n\n\t\tconst halDocument: HalDocument<T> = this.createHalDocument(rawResource, modelClass, response);\n\n\t\tthis.storage.saveAll(halDocument.models, savePartialModels);\n\n\t\thalDocument.models.forEach((listModel: T) => {\n\t\t\tthis.populateResourceWithRelationshipIndentificators(listModel);\n\t\t});\n\n\t\tthis.storage.save(halDocument, response, [url]);\n\t\treturn halDocument;\n\t}\n\n\tprivate buildModelUrl(modelClass: ModelConstructor<HalModel>, modelId?: string): string {\n\t\tconst model = new modelClass({}, this);\n\n\t\tif (modelId && model.modelEndpoints?.singleResourceEndpoint) {\n\t\t\treturn model.modelEndpoints.singleResourceEndpoint;\n\t\t} else if (!modelId && model.modelEndpoints?.collectionEndpoint) {\n\t\t\treturn model.modelEndpoints.collectionEndpoint;\n\t\t}\n\n\t\tconst modelUrl: string = this.buildUrl(model);\n\t\treturn modelId ? `${modelUrl}/${modelId}` : modelUrl;\n\t}\n\n\tprivate extractResourceFromResponse(response: HttpResponse<object>): RawHalResource {\n\t\treturn response.body;\n\t}\n\n\tprivate populateResourceWithRelationshipIndentificators<T extends HalModel>(model: T): void {\n\t\tconst localResource: T = this.storage.get(model.uniqueModelIdentificator);\n\t\tif (localResource) {\n\t\t\tmodel.hasManyDocumentIdentificators = localResource.hasManyDocumentIdentificators;\n\t\t}\n\t}\n\n\tprivate fetchEmbeddedListItems<T extends HalModel>(\n\t\thalDocument: HalDocument<T>,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t): Observable<Array<T>> {\n\t\tconst modelCalls: Array<Observable<T>> = [];\n\n\t\tconst requestsOptions: RequestsOptions = {\n\t\t\tmainRequest: requestOptions,\n\t\t\tsubsequentRequests: requestOptions,\n\t\t};\n\n\t\t// Don't fetch list items if they are embedded\n\t\tif (halDocument.hasEmbeddedItems) {\n\t\t\thalDocument.models.forEach((model: T) => {\n\t\t\t\tconst call$ = this.handleGetRequestWithRelationships(\n\t\t\t\t\tnull,\n\t\t\t\t\trequestsOptions,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\ttrue,\n\t\t\t\t\tincludeRelationships,\n\t\t\t\t\tmodel,\n\t\t\t\t);\n\t\t\t\tmodelCalls.push(call$);\n\t\t\t});\n\t\t} else {\n\t\t\thalDocument.itemLinks.forEach((link: RawHalLink) => {\n\t\t\t\tconst url: string = link.href;\n\n\t\t\t\tif (url) {\n\t\t\t\t\tconst call$ = this.handleGetRequestWithRelationships(\n\t\t\t\t\t\turl,\n\t\t\t\t\t\trequestsOptions,\n\t\t\t\t\t\tmodelClass,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tincludeRelationships,\n\t\t\t\t\t);\n\t\t\t\t\tmodelCalls.push(call$);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (!modelCalls.length) {\n\t\t\treturn of([]);\n\t\t}\n\n\t\treturn combineLatest(modelCalls);\n\t}\n\n\tprivate buildHostUrl(model?: HalModel): string {\n\t\t// tslint:disable-next-line:max-line-length\n\t\tconst baseUrl: string =\n\t\t\tmodel && model.networkConfig && model.networkConfig.baseUrl\n\t\t\t\t? model.networkConfig.baseUrl\n\t\t\t\t: this.networkConfig.baseUrl;\n\t\t// tslint:disable-next-line:max-line-length\n\t\tconst networkEndpoint: string =\n\t\t\tmodel && model.networkConfig && model.networkConfig.endpoint\n\t\t\t\t? model.networkConfig.endpoint\n\t\t\t\t: this.networkConfig.endpoint;\n\n\t\treturn [baseUrl, networkEndpoint].filter((urlPart) => urlPart).join('/');\n\t}\n\n\tprivate defaultUrlBuildFunction<T extends HalModel>(model: T, urlFromModel: string): string {\n\t\tif (model.isSaved && model.selfLink) {\n\t\t\treturn model.selfLink;\n\t\t}\n\n\t\tif (model.id && model.modelEndpoints?.singleResourceEndpoint) {\n\t\t\treturn model.modelEndpoints.singleResourceEndpoint;\n\t\t} else if (!model.id && model.modelEndpoints?.collectionEndpoint) {\n\t\t\treturn model.modelEndpoints.collectionEndpoint;\n\t\t}\n\n\t\treturn urlFromModel;\n\t}\n\n\tprivate defaultTransformPayloadBeforeSaveFunction(payload: object): object {\n\t\treturn payload;\n\t}\n\n\tprivate get cacheStrategy(): CacheStrategy {\n\t\treturn this._cacheStrategy;\n\t}\n\n\tprivate get halStorage(): HalStorage {\n\t\treturn this._storage;\n\t}\n\n\tpublic findModelClassByType(modelType: string): typeof HalModel {\n\t\tconst modelClass: typeof HalModel = this.modelTypes.find(\n\t\t\t(modelClass) => modelClass.modelType === modelType,\n\t\t);\n\n\t\tif (!modelClass) {\n\t\t\tthrow new Error(\n\t\t\t\t`Provided model name \"${modelType}\" cannot be found in the Datastore. Provide it in DatastoreService.modelTypes`,\n\t\t\t);\n\t\t}\n\n\t\treturn modelClass;\n\t}\n\n\tpublic createModel<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\trecordData: object = {},\n\t): T {\n\t\tconst rawRecordData: object = Object.assign({}, recordData);\n\t\trawRecordData[EMBEDDED_PROPERTY_NAME] = Object.assign(\n\t\t\t{},\n\t\t\trecordData,\n\t\t\trecordData[EMBEDDED_PROPERTY_NAME],\n\t\t);\n\t\tconst model: T = new modelClass(rawRecordData, this);\n\t\treturn model;\n\t}\n}\n","import { HttpResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HalModel } from '../../models/hal.model';\nimport { DatastoreService } from '../datastore/datastore.service';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { HalDocument } from '../../classes/hal-document';\nimport { ModelConstructor } from '../../types/model-constructor.type';\nimport { RelationshipRequestDescriptor } from '../../types/relationship-request-descriptor.type';\n\nexport abstract class ModelService<Model extends HalModel> {\n\tconstructor(protected datastore: DatastoreService, private modelClass: ModelConstructor<Model>) {}\n\n\tpublic findOne(\n\t\tmodelId: string,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t): Observable<Model> {\n\t\treturn this.datastore.findOne<Model>(\n\t\t\tthis.modelClass,\n\t\t\tmodelId,\n\t\t\tincludeRelationships,\n\t\t\trequestOptions,\n\t\t\tcustomUrl,\n\t\t\tsubsequentRequestsOptions,\n\t\t);\n\t}\n\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tcustomUrl?: string,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tcustomUrl?: string,\n\t\tstorePartialModels?: boolean,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams = {},\n\t\tincludeMeta: boolean = false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<Model> | Array<Model>> {\n\t\treturn this.datastore.find(\n\t\t\tthis.modelClass,\n\t\t\tparams,\n\t\t\tincludeMeta,\n\t\t\tincludeRelationships,\n\t\t\trequestOptions,\n\t\t\tcustomUrl,\n\t\t\tsubsequentRequestsOptions,\n\t\t\tstorePartialModels,\n\t\t);\n\t}\n\n\tpublic createNewModel(recordData: object = {}): Model {\n\t\tconst model: Model = this.datastore.createModel(this.modelClass, recordData);\n\t\tthis.datastore.storage.save(model);\n\t\treturn model;\n\t}\n}\n","export function arrayAttr<T>(classType: { new (...args): T }) {\n\treturn class ArrayAttribute<T> {\n\t\tconstructor(args = []) {\n\t\t\treturn args.map((arg) => new classType(arg));\n\t\t}\n\t};\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["ModelPropertyEnum"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport 'reflect-metadata';\nimport deepmerge from 'deepmerge';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { of, combineLatest, throwError } from 'rxjs';\nimport { map, flatMap, tap, catchError } from 'rxjs/operators';\nimport * as UriTemplates from 'uri-templates';\n\nclass NgxHalModule {\n}\nNgxHalModule.ɵfac = function NgxHalModule_Factory(t) { return new (t || NgxHalModule)(); };\nNgxHalModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxHalModule });\nNgxHalModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[]] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxHalModule, [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [],\n                    exports: [],\n                }]\n        }], null, null);\n})();\n\nconst ATTRIBUTE_PROPERTIES_METADATA_KEY = 'attributeProperties';\nconst HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY = 'headerAttributeProperties';\nconst HAS_MANY_PROPERTIES_METADATA_KEY = 'hasManyProperties';\nconst HAS_ONE_PROPERTIES_METADATA_KEY = 'hasOneProperties';\nconst HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY = 'halDatastoreDocumentClass';\nconst HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY = 'halModelDocumentClass';\n\nconst DEFAULT_NETWORK_CONFIG = {\n    baseUrl: '/',\n    endpoint: '',\n    globalRequestOptions: {},\n};\n\nfunction deepmergeWrapper(...args) {\n    const ensuredArgs = args.map((arg) => arg || {});\n    return deepmerge.all(ensuredArgs);\n}\n\nfunction DatastoreConfig(config) {\n    return function (target) {\n        const networkConfig = deepmergeWrapper(DEFAULT_NETWORK_CONFIG, config.network || {});\n        Object.defineProperty(target.prototype, 'paginationClass', {\n            value: config.paginationClass,\n        });\n        Object.defineProperty(target.prototype, '_cacheStrategy', {\n            value: config.cacheStrategy,\n        });\n        Object.defineProperty(target.prototype, '_storage', {\n            value: config.storage,\n        });\n        Object.defineProperty(target.prototype, 'networkConfig', {\n            value: networkConfig,\n            writable: true,\n        });\n        Reflect.defineMetadata(HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY, config.halDocumentClass, target);\n        return target;\n    };\n}\n\nfunction ModelServiceConfig(config) {\n    return function (target) {\n        return target;\n    };\n}\n\nclass ModelOptions {\n}\nconst DEFAULT_MODEL_OPTIONS = {\n    type: '',\n};\nconst DEFAULT_MODEL_TYPE = '__DEFAULT_MODEL_TYPE__';\n\nfunction ModelConfig(config) {\n    return function (target) {\n        const configValue = deepmergeWrapper(DEFAULT_MODEL_OPTIONS, config);\n        Object.defineProperty(target.prototype, 'config', {\n            value: configValue,\n            writable: true,\n        });\n        Reflect.defineMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, config.halDocumentClass, target);\n        return target;\n    };\n}\n\nconst DEFAULT_ATTRIBUTE_OPTIONS = {\n    excludeFromPayload: false,\n    useClass: false,\n};\n\nvar ModelProperty;\n(function (ModelProperty) {\n    ModelProperty[\"Attribute\"] = \"Attribute\";\n    ModelProperty[\"HasMany\"] = \"HasMany\";\n    ModelProperty[\"HasOne\"] = \"HasOne\";\n    ModelProperty[\"HeaderAttribute\"] = \"HeaderAttribute\";\n})(ModelProperty || (ModelProperty = {}));\n\nfunction updateModelPropertiesWithTheNewOne(modelProperties, newModelProperty) {\n    const properties = [].concat(modelProperties);\n    const existingProperty = properties.find((property) => {\n        return property.name === newModelProperty.name;\n    });\n    if (existingProperty) {\n        const indexOfExistingProperty = properties.indexOf(existingProperty);\n        properties[indexOfExistingProperty] = newModelProperty;\n    }\n    else {\n        properties.push(newModelProperty);\n    }\n    return properties;\n}\n\nfunction Attribute(options = {}) {\n    return (model, propertyName) => {\n        const attributeOptions = deepmergeWrapper(DEFAULT_ATTRIBUTE_OPTIONS, options);\n        const existingAttributeProperties = Reflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n        const attributeProperty = {\n            type: ModelProperty.Attribute,\n            transformResponseValue: attributeOptions.transformResponseValue,\n            transformBeforeSave: attributeOptions.transformBeforeSave,\n            name: propertyName,\n            externalName: options.externalName || propertyName,\n            excludeFromPayload: options.excludeFromPayload,\n        };\n        if (attributeOptions.useClass) {\n            if (attributeOptions.useClass === true) {\n                const propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n                attributeProperty.propertyClass = propertyClass;\n            }\n            else {\n                attributeProperty.propertyClass = attributeOptions.useClass;\n            }\n        }\n        const attributeProperties = updateModelPropertiesWithTheNewOne(existingAttributeProperties, attributeProperty);\n        Reflect.defineMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, attributeProperties, model);\n    };\n}\n\nconst DEFAULT_HEADER_ATTRIBUTE_OPTIONS = {\n    useClass: false,\n};\n\nfunction HeaderAttribute(options = {}) {\n    return (model, propertyName) => {\n        const headerAttributeOptions = deepmergeWrapper(DEFAULT_HEADER_ATTRIBUTE_OPTIONS, options);\n        // tslint:disable-next-line:max-line-length\n        const existingHeaderAttributeProperties = Reflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n        const attributeProperty = {\n            type: ModelProperty.HeaderAttribute,\n            transformResponseValue: headerAttributeOptions.transformResponseValue,\n            transformBeforeSave: headerAttributeOptions.transformBeforeSave,\n            name: propertyName,\n            externalName: options.externalName || propertyName,\n        };\n        if (headerAttributeOptions.useClass) {\n            if (headerAttributeOptions.useClass === true) {\n                const propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n                attributeProperty.propertyClass = propertyClass;\n            }\n            else {\n                attributeProperty.propertyClass = headerAttributeOptions.useClass;\n            }\n        }\n        const headerAttributeProperties = updateModelPropertiesWithTheNewOne(existingHeaderAttributeProperties, attributeProperty);\n        Reflect.defineMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, headerAttributeProperties, model);\n    };\n}\n\nconst DEFAULT_HAS_MANY_OPTIONS = {\n    includeInPayload: false,\n};\n\nfunction HasMany(options) {\n    return (model, propertyName) => {\n        const hasManyOptions = deepmergeWrapper(DEFAULT_HAS_MANY_OPTIONS, options);\n        const existingHasManyProperties = Reflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, model) || [];\n        const hasManyProperty = {\n            includeInPayload: hasManyOptions.includeInPayload,\n            name: propertyName,\n            propertyClass: hasManyOptions.itemsType,\n            type: ModelProperty.HasMany,\n            externalName: options.externalName || propertyName,\n        };\n        const hasManyProperties = updateModelPropertiesWithTheNewOne(existingHasManyProperties, hasManyProperty);\n        Reflect.defineMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, hasManyProperties, model);\n    };\n}\n\nconst DEFAULT_HAS_ONE_OPTIONS = {\n    includeInPayload: false,\n};\n\nfunction HasOne(options = {}) {\n    return (model, propertyName) => {\n        const hasOneOptions = deepmergeWrapper(DEFAULT_HAS_ONE_OPTIONS, options);\n        const existingHasOneProperties = Reflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, model) || [];\n        const hasOneProperty = {\n            includeInPayload: hasOneOptions.includeInPayload,\n            name: propertyName,\n            propertyClass: hasOneOptions.propertyClass || Reflect.getMetadata('design:type', model, propertyName),\n            type: ModelProperty.HasOne,\n            externalName: options.externalName || propertyName,\n        };\n        const hasOneProperties = updateModelPropertiesWithTheNewOne(existingHasOneProperties, hasOneProperty);\n        Reflect.defineMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, hasOneProperties, model);\n    };\n}\n\nconst EMBEDDED_PROPERTY_NAME = '_embedded';\nconst LINKS_PROPERTY_NAME = '_links';\nconst SELF_PROPERTY_NAME = 'self';\n\nconst LOCAL_MODEL_ID_PREFIX = 'local-MODEL-identificator';\nconst LOCAL_DOCUMENT_ID_PREFIX = 'local-document-identificator';\n\nfunction isArray(item) {\n    return Array.isArray(item);\n}\n\nfunction generateUUID() {\n    return `${Math.floor(Math.random() * 1e10)}-${Date.now()}`;\n}\n\nclass HalDocument {\n    constructor(rawResource, rawResponse, modelClass, datastore) {\n        this.rawResource = rawResource;\n        this.rawResponse = rawResponse;\n        this.modelClass = modelClass;\n        this.datastore = datastore;\n        this.parseRawResources(rawResource);\n        this.generateUniqueModelIdentificator();\n    }\n    get hasEmbeddedItems() {\n        const listPropertyName = this.getListPropertyName(this.rawResource);\n        return (this.rawResource[EMBEDDED_PROPERTY_NAME] &&\n            this.rawResource[EMBEDDED_PROPERTY_NAME][listPropertyName]);\n    }\n    get itemLinks() {\n        const listPropertyName = this.getListPropertyName(this.rawResource);\n        return this.links[listPropertyName] || [];\n    }\n    getPage(pageNumber, includeRelationships = [], requestOptions = {}, subsequentRequestsOptions = {}) {\n        requestOptions.params = requestOptions.params || {};\n        if (pageNumber || pageNumber === 0) {\n            requestOptions.params['page'] = pageNumber;\n        }\n        const relationshipUrl = this.links[SELF_PROPERTY_NAME].href;\n        return this.datastore.find(this.modelClass, {}, true, includeRelationships, requestOptions, relationshipUrl, subsequentRequestsOptions);\n    }\n    parseRawResources(resources) {\n        const items = this.getRawResourcesFromResponse(resources);\n        this.models = this.generateModels(items);\n        this.pagination = this.generatePagination(resources);\n    }\n    generateModels(resources) {\n        return resources.map((resource) => {\n            return new this.modelClass(resource, this.datastore, this.rawResponse);\n        });\n    }\n    generatePagination(pagination) {\n        if (!this.datastore.paginationClass) {\n            return null;\n        }\n        return new this.datastore.paginationClass(pagination);\n    }\n    getRawResourcesFromResponse(resources) {\n        const listPropertyName = this.getListPropertyName(resources);\n        if (!resources[EMBEDDED_PROPERTY_NAME]) {\n            return [];\n        }\n        return resources[EMBEDDED_PROPERTY_NAME][listPropertyName] || [];\n    }\n    getListPropertyName(listResponse) {\n        const links = listResponse[LINKS_PROPERTY_NAME];\n        const embdedded = this.rawResource[EMBEDDED_PROPERTY_NAME];\n        const fallbackListPropertyName = embdedded\n            ? Object.keys(embdedded)[0]\n            : 'noListPropertyPresent';\n        return (Object.keys(links || {}).find((propertyName) => {\n            return isArray(links[propertyName]);\n        }) || fallbackListPropertyName);\n    }\n    get selfLink() {\n        return this.links && this.links[SELF_PROPERTY_NAME]\n            ? this.links[SELF_PROPERTY_NAME].href\n            : null;\n    }\n    get links() {\n        return this.rawResource[LINKS_PROPERTY_NAME];\n    }\n    generateUniqueModelIdentificator() {\n        this.uniqueModelIdentificator = generateUUID();\n    }\n}\n\nfunction getResponseHeader(response, headerName) {\n    const emptyHeaders = new HttpHeaders();\n    const headers = response ? response.headers || emptyHeaders : emptyHeaders;\n    return headers.get(headerName);\n}\n\nfunction isHalModelInstance(classInstance) {\n    if (!classInstance) {\n        return false;\n    }\n    if (classInstance instanceof HalModel) {\n        return true;\n    }\n    return isHalModelInstance(classInstance.prototype);\n}\n\nfunction ensureRelationshipRequestDescriptors(relationships) {\n    return relationships.map((relationshipDescriptor) => {\n        if (typeof relationshipDescriptor === 'string') {\n            return { name: relationshipDescriptor };\n        }\n        return relationshipDescriptor;\n    });\n}\n\nfunction removeQueryParams(uri) {\n    const splittedUri = hasOnlyTemplatedQueryParameters(uri)\n        ? uri.split('{?')\n        : uri.split('?');\n    if (splittedUri.length > 1) {\n        splittedUri.pop();\n    }\n    return splittedUri.join('');\n}\nfunction hasOnlyTemplatedQueryParameters(uri) {\n    return uri.indexOf('{?') !== -1;\n}\n\nfunction setRequestHeader(initialHeaders, headerName, headerValue) {\n    if (initialHeaders instanceof HttpHeaders) {\n        return setHttpRequestHeader(initialHeaders, headerName, headerValue);\n    }\n    return setObjectRequestHeader(initialHeaders, headerName, headerValue);\n}\nfunction setHttpRequestHeader(initialHeaders, headerName, headerValue) {\n    if (headerValue !== undefined && headerValue !== null) {\n        return initialHeaders.append(headerName, headerValue);\n    }\n    return initialHeaders;\n}\nfunction setObjectRequestHeader(initialHeaders, headerName, headerValue) {\n    const headers = {};\n    Object.assign(headers, initialHeaders);\n    if (headerValue !== undefined && headerValue !== null) {\n        headers[headerName] = headerValue;\n    }\n    return headers;\n}\n\nfunction isString(item) {\n    return typeof item === 'string' || item instanceof String;\n}\n\nclass SimpleHalModel {\n}\n\nfunction isSimpleHalModelInstance(classInstance) {\n    if (!classInstance) {\n        return false;\n    }\n    if (classInstance instanceof SimpleHalModel) {\n        return true;\n    }\n    return isSimpleHalModelInstance(classInstance.prototype);\n}\n\nfunction isFunction(functionToCheck) {\n    return (typeof functionToCheck === 'function' &&\n        !isHalModelInstance(functionToCheck) &&\n        !isSimpleHalModelInstance(functionToCheck));\n}\n\nclass HalModel {\n    constructor(resource = {}, datastore, rawResponse) {\n        this.resource = resource;\n        this.datastore = datastore;\n        this.rawResponse = rawResponse;\n        this.config = this['config'] || DEFAULT_MODEL_OPTIONS;\n        this.temporarySelfLink = null;\n        this.internalHasManyDocumentIdentificators = {};\n        this.setLocalModelIdentificator();\n        this.parseAttributes(resource);\n        this.parseHeaderAttributes(rawResponse);\n        this.initializeHasOneProperties();\n        this.initialzieHasManyProperties();\n        this.extractEmbeddedProperties(resource);\n    }\n    get uniqueModelIdentificator() {\n        return this.getUniqueModelIdentificator();\n    }\n    getUniqueModelIdentificator() {\n        return this.selfLink || this.localModelIdentificator;\n    }\n    get id() {\n        if (!this.selfLink) {\n            return null;\n        }\n        const selfLink = removeQueryParams(this.selfLink);\n        return selfLink.split('/').pop();\n    }\n    get endpoint() {\n        return this.config.endpoint || 'unknownModelEndpoint';\n    }\n    get modelEndpoints() {\n        return null;\n    }\n    get networkConfig() {\n        return this.config.networkConfig;\n    }\n    get type() {\n        return this.config.type;\n    }\n    getHalDocumentClass() {\n        return Reflect.getMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, this.constructor);\n    }\n    getRelationshipUrl(relationshipName) {\n        const property = this.getPropertyData(relationshipName);\n        if (!property) {\n            console.warn(`Relationship with the name ${relationshipName} is not defined on the model.`);\n            return;\n        }\n        const fieldName = property.externalName || relationshipName;\n        return this.links[fieldName] ? this.links[fieldName].href : '';\n    }\n    getPropertyData(propertyName) {\n        const attributeProperty = this.attributeProperties.find((property) => property.name === propertyName);\n        const hasOneProperty = this.hasOneProperties.find((property) => property.name === propertyName);\n        const hasManyProperty = this.hasManyProperties.find((property) => property.name === propertyName);\n        return attributeProperty || hasOneProperty || hasManyProperty;\n    }\n    getEmbeddedResource(resourceName) {\n        const property = this.getPropertyData(resourceName);\n        if (this.resource[property.externalName]) {\n            return this.resource[property.externalName];\n        }\n        if (!this.resource[EMBEDDED_PROPERTY_NAME]) {\n            return;\n        }\n        return this.resource[EMBEDDED_PROPERTY_NAME][property.externalName];\n    }\n    save(requestOptions, options = {}) {\n        const modelClass = Object.getPrototypeOf(this).constructor;\n        return this.datastore.save(this, modelClass, requestOptions, options);\n    }\n    update(requestOptions, options = {}) {\n        return this.datastore.update(this, requestOptions, options);\n    }\n    delete(requestOptions, options = {}) {\n        return this.datastore.delete(this, requestOptions, options);\n    }\n    generatePayload(options = {}) {\n        const attributePropertiesPayload = this.getAttributePropertiesPayload(options);\n        const relationshipsPayload = this.generateRelationshipsPayload(options);\n        const hasRelationshipLinks = Boolean(Object.keys(relationshipsPayload).length);\n        const payload = Object.assign({}, attributePropertiesPayload);\n        if (hasRelationshipLinks) {\n            payload[LINKS_PROPERTY_NAME] = relationshipsPayload;\n        }\n        return payload;\n    }\n    // Used only when HalModels or HalDocument are passed when creating a new model\n    extractEmbeddedProperties(rawResource) {\n        const embeddedProperties = rawResource[EMBEDDED_PROPERTY_NAME] || {};\n        Object.keys(embeddedProperties).forEach((propertyName) => {\n            const property = this.getPropertyData(propertyName);\n            const isRelationshipProperty = property && (this.isHasOneProperty(property) || this.isHasManyProperty(property));\n            const propertyValue = embeddedProperties[propertyName];\n            const isHalModelOrDocument = isHalModelInstance(propertyValue) || propertyValue instanceof HalDocument;\n            if (isRelationshipProperty && isHalModelOrDocument) {\n                this[property.name] = propertyValue;\n            }\n        });\n    }\n    getAttributePropertiesPayload(payloadOptions = {}) {\n        const { specificFields, changedPropertiesOnly } = payloadOptions;\n        return this.attributeProperties.reduce((payload, property) => {\n            const propertyName = property.name;\n            const isPropertyExcludedFromPaylaod = property.excludeFromPayload;\n            const isSpecificFieldsSpecified = specificFields && Boolean(specificFields.length);\n            const isSpecificFieldsConditionSatisfied = !isSpecificFieldsSpecified || specificFields.indexOf(propertyName) !== -1;\n            if (isPropertyExcludedFromPaylaod || !isSpecificFieldsConditionSatisfied) {\n                return payload;\n            }\n            const externalPropertyName = property.externalName;\n            const propertyPayload = property.transformBeforeSave\n                ? property.transformBeforeSave(this[propertyName])\n                : this[propertyName];\n            if (changedPropertiesOnly) {\n                const isPropertyChanged = propertyPayload !== this.resource[propertyName];\n                if (isPropertyChanged) {\n                    payload[externalPropertyName] = propertyPayload;\n                }\n            }\n            else {\n                payload[externalPropertyName] = propertyPayload;\n            }\n            return payload;\n        }, {});\n    }\n    generateHasOnePropertyPayload(property) {\n        const payload = {};\n        const propertyName = property.name;\n        const externalPropertyName = property.externalName;\n        if (!this[propertyName].selfLink) {\n            return payload;\n        }\n        payload[externalPropertyName] = {\n            href: this[propertyName].selfLink,\n        };\n        return payload;\n    }\n    generateHasManyPropertyPayload(property) {\n        const payload = {};\n        const hasManyPropertyLinks = [];\n        const propertyName = property.name;\n        const externalPropertyName = property.externalName;\n        // TODO check if this[propertyName] is an array of models or just a HalDocument\n        this[propertyName].forEach((model) => {\n            if (model && model.selfLink) {\n                hasManyPropertyLinks.push({\n                    href: model.selfLink,\n                });\n            }\n        });\n        if (hasManyPropertyLinks.length) {\n            payload[externalPropertyName] = hasManyPropertyLinks;\n        }\n        return payload;\n    }\n    generateRelationshipsPayload(payloadOptions = {}) {\n        const { specificFields } = payloadOptions;\n        const isSpecificFieldsSpecified = specificFields && Boolean(specificFields.length);\n        return [...this.hasOneProperties, ...this.hasManyProperties]\n            .filter((property) => property.includeInPayload)\n            .filter((property) => !isSpecificFieldsSpecified || specificFields.indexOf(property.name) !== -1)\n            .reduce((payload, property) => {\n            const propertyName = property.name;\n            if (!this[propertyName]) {\n                return payload;\n            }\n            const isHasOneProperty = property.type === ModelProperty.HasOne;\n            let propertyPayload;\n            if (isHasOneProperty) {\n                propertyPayload = this.generateHasOnePropertyPayload(property);\n            }\n            else {\n                propertyPayload = this.generateHasManyPropertyPayload(property);\n            }\n            Object.assign(payload, propertyPayload);\n            return payload;\n        }, {});\n    }\n    generateHeaders() {\n        return this.headerAttributeProperties.reduce((headers, property) => {\n            const externalPropertyName = property.externalName;\n            const propertyName = property.name;\n            const propertyValue = property.transformBeforeSave\n                ? property.transformBeforeSave(this[propertyName])\n                : this[propertyName];\n            return setRequestHeader(headers, externalPropertyName, propertyValue);\n        }, {});\n    }\n    get isSaved() {\n        return Boolean(this.id);\n    }\n    fetchRelationships(relationships, requestOptions = {}) {\n        const relationshipsArray = [].concat(relationships);\n        const relationshipDescriptors = ensureRelationshipRequestDescriptors(relationshipsArray);\n        return this.datastore.fetchModelRelationships(this, relationshipDescriptors, requestOptions);\n    }\n    getRelationship(relationshipName) {\n        const property = this.getPropertyData(relationshipName);\n        const isHasOneProperty = property.type === ModelProperty.HasOne;\n        if (isHasOneProperty) {\n            return this.getHasOneRelationship(property);\n        }\n        return this.getHasManyRelationship(property);\n    }\n    get attributeProperties() {\n        return Reflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    get headerAttributeProperties() {\n        return Reflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    get hasOneProperties() {\n        return Reflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    get hasManyProperties() {\n        return Reflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, this) || [];\n    }\n    initializeHasOneProperties() {\n        this.hasOneProperties.forEach((property) => {\n            Object.defineProperty(this, property.name, {\n                configurable: true,\n                get() {\n                    return this.getHasOneRelationship(property);\n                },\n                set(value) {\n                    if (isHalModelInstance(value) || !value) {\n                        this.replaceRelationshipModel(property.externalName, value);\n                    }\n                    else {\n                        console.warn(`Only HalModel instances can be assigned to property: ${property.name}. This will become an error in the next ngx-hal release`);\n                        // throw new Error(`Only HalModel instances can be assigned to property: ${property.name}`);\n                    }\n                },\n            });\n        });\n    }\n    initialzieHasManyProperties() {\n        this.hasManyProperties.forEach((property) => {\n            Object.defineProperty(this, property.name, {\n                configurable: true,\n                get() {\n                    const halDocument = this.getHasManyRelationship(property);\n                    if (!halDocument) {\n                        return;\n                    }\n                    return halDocument.models;\n                },\n                set(value) {\n                    const existingHalDocument = this.getHasManyRelationship(property);\n                    if (existingHalDocument) {\n                        existingHalDocument.models = value;\n                    }\n                    else {\n                        const halDocumentRaw = {\n                            models: value,\n                            uniqueModelIdentificator: `${LOCAL_DOCUMENT_ID_PREFIX}-${generateUUID()}`,\n                        };\n                        this.updateHasManyDocumentIdentificator(property, halDocumentRaw.uniqueModelIdentificator);\n                        this.datastore.storage.save(halDocumentRaw);\n                        this.replaceRelationshipModel(property.externalName, halDocumentRaw);\n                    }\n                },\n            });\n        });\n    }\n    setProperty(modelProperty, rawPropertyValue) {\n        if (isString(modelProperty.propertyClass)) {\n            this[modelProperty.name] = this.datastore.findModelClassByType(modelProperty.propertyClass);\n        }\n        else if (isFunction(modelProperty.propertyClass)) {\n            const propertyClass = modelProperty.propertyClass(rawPropertyValue);\n            this[modelProperty.name] = new propertyClass(rawPropertyValue);\n        }\n        else if (modelProperty.propertyClass) {\n            this[modelProperty.name] = new modelProperty.propertyClass(rawPropertyValue);\n        }\n        else if (modelProperty.transformResponseValue) {\n            this[modelProperty.name] = modelProperty.transformResponseValue(rawPropertyValue);\n        }\n        else {\n            this[modelProperty.name] = rawPropertyValue;\n        }\n    }\n    parseAttributes(resource) {\n        this.attributeProperties.forEach((attributeProperty) => {\n            const rawPropertyValue = resource[attributeProperty.externalName];\n            this.setProperty(attributeProperty, rawPropertyValue);\n        });\n    }\n    parseHeaderAttributes(response) {\n        this.headerAttributeProperties.forEach((headerAttributeProperty) => {\n            const rawPropertyValue = getResponseHeader(response, headerAttributeProperty.externalName);\n            this.setProperty(headerAttributeProperty, rawPropertyValue);\n        });\n    }\n    getHasOneRelationship(property) {\n        const relationshipLinks = this.links[property.externalName];\n        if (!relationshipLinks) {\n            return;\n        }\n        const modelIdentificator = relationshipLinks.href;\n        return this.datastore.storage.get(modelIdentificator);\n    }\n    getHasManyRelationship(property) {\n        const uniqueRelationshipIdentificator = this.hasManyDocumentIdentificators[property.externalName];\n        if (!uniqueRelationshipIdentificator) {\n            return;\n        }\n        const halDocument = this.datastore.storage.get(uniqueRelationshipIdentificator);\n        if (!halDocument) {\n            console.warn(`Has many relationship ${property.name} is not fetched.`);\n            return;\n        }\n        return halDocument;\n    }\n    get links() {\n        return this.resource[LINKS_PROPERTY_NAME] || {};\n    }\n    get selfLink() {\n        return this.links && this.links[SELF_PROPERTY_NAME]\n            ? this.links[SELF_PROPERTY_NAME].href\n            : this.temporarySelfLink;\n    }\n    set selfLink(link) {\n        this.temporarySelfLink = link;\n    }\n    replaceRelationshipModel(relationshipName, relationshipModel) {\n        this.resource[LINKS_PROPERTY_NAME] = this.resource[LINKS_PROPERTY_NAME] || {\n            self: null,\n        };\n        let relationshipLink = null;\n        if (relationshipModel) {\n            relationshipLink = {\n                href: relationshipModel.uniqueModelIdentificator || relationshipModel.selfLink,\n            };\n        }\n        this.resource[LINKS_PROPERTY_NAME][relationshipName] = relationshipLink;\n        // Save the model to the storage if it's not already there\n        if (!this[relationshipName] && relationshipModel) {\n            // TODO should the model be removed from the storage if relationshipModel does not exist?\n            this.datastore.storage.save(relationshipModel);\n        }\n    }\n    setLocalModelIdentificator() {\n        this.localModelIdentificator = `${LOCAL_MODEL_ID_PREFIX}-${generateUUID()}`;\n    }\n    isHasOneProperty(property) {\n        return property.type === ModelProperty.HasOne;\n    }\n    isHasManyProperty(property) {\n        return property.type === ModelProperty.HasMany;\n    }\n    updateHasManyDocumentIdentificator(property, identificator) {\n        this.hasManyDocumentIdentificators[property.externalName] = identificator;\n    }\n    set hasManyDocumentIdentificators(hasManyDocumentIdentificators) {\n        this.internalHasManyDocumentIdentificators = Object.assign({}, hasManyDocumentIdentificators);\n    }\n    get hasManyDocumentIdentificators() {\n        return this.internalHasManyDocumentIdentificators;\n    }\n}\nHalModel.modelType = DEFAULT_MODEL_TYPE;\n\nclass Pagination {\n    constructor(rawResource = {}) {\n        this.rawResource = rawResource;\n    }\n}\n\nclass HalStorage {\n    constructor() {\n        this.internalStorage = {};\n    }\n    saveAll(models, savePartialModels = false) {\n        models.forEach((model) => {\n            if (savePartialModels || !this.get(model.uniqueModelIdentificator)) {\n                this.save(model);\n            }\n        });\n    }\n    remove(model) {\n        delete this.internalStorage[model.uniqueModelIdentificator];\n    }\n    enrichRequestOptions(uniqueModelIdentificator, requestOptions) {\n        // noop\n    }\n}\n\nclass EtagHalStorage extends HalStorage {\n    save(model, response, alternateUniqueIdentificators = []) {\n        const storedModels = [];\n        const identificators = [].concat(alternateUniqueIdentificators);\n        identificators.push(model.uniqueModelIdentificator);\n        identificators.filter(Boolean).forEach((identificator) => {\n            const storedModel = {\n                model,\n                etag: this.getEtagFromResponse(response),\n            };\n            this.internalStorage[identificator] = storedModel;\n            storedModels.push(storedModel);\n        });\n        return storedModels;\n    }\n    get(uniqueModelIdentificator) {\n        const localModel = this.getRawStorageModel(uniqueModelIdentificator);\n        return localModel ? localModel.model : undefined;\n    }\n    enrichRequestOptions(uniqueModelIdentificator, requestOptions) {\n        const storageModel = this.getRawStorageModel(uniqueModelIdentificator);\n        if (!storageModel) {\n            return;\n        }\n        if (storageModel.etag) {\n            requestOptions.headers = setRequestHeader(requestOptions.headers, 'If-None-Match', storageModel.etag);\n        }\n    }\n    getRawStorageModel(uniqueModelIdentificator) {\n        return this.internalStorage[uniqueModelIdentificator];\n    }\n    getEtagFromResponse(response) {\n        if (!response || !response.headers || !response.headers.get) {\n            return;\n        }\n        return response.headers.get('ETag');\n    }\n}\n\nclass SimpleHalStorage extends HalStorage {\n    save(model, response, alternateUniqueIdentificators = []) {\n        const identificators = [].concat(alternateUniqueIdentificators);\n        identificators.push(model.uniqueModelIdentificator);\n        identificators.filter(Boolean).forEach((identificator) => {\n            this.internalStorage[identificator] = model;\n        });\n    }\n    get(uniqueModelIdentificator) {\n        return this.internalStorage[uniqueModelIdentificator];\n    }\n}\n\nvar CacheStrategy;\n(function (CacheStrategy) {\n    CacheStrategy[\"CUSTOM\"] = \"CUSTOM\";\n    CacheStrategy[\"ETAG\"] = \"ETAG\";\n    CacheStrategy[\"NONE\"] = \"NONE\";\n})(CacheStrategy || (CacheStrategy = {}));\n\nclass ModelServiceOptions {\n}\n\nconst DEFAULT_REQUEST_OPTIONS = {\n    observe: 'response',\n    params: {},\n};\n\nfunction createHalStorage(cacheStrategy = CacheStrategy.NONE, storageInstance) {\n    let storage;\n    switch (cacheStrategy) {\n        case CacheStrategy.NONE:\n            storage = new SimpleHalStorage();\n            break;\n        case CacheStrategy.ETAG:\n            storage = new EtagHalStorage();\n            break;\n        case CacheStrategy.CUSTOM:\n            if (!storageInstance) {\n                throw new Error('When CacheStrategy.CUSTOM is specified, config.storage is required.');\n            }\n            storage = storageInstance;\n            break;\n        default:\n            throw new Error(`Unknown CacheStrategy: ${cacheStrategy}`);\n            break;\n    }\n    return storage;\n}\n\nfunction makeQueryParamsString(params, sortAlphabetically = false) {\n    let paramKeys = Object.keys(params);\n    if (sortAlphabetically) {\n        paramKeys = paramKeys.sort();\n    }\n    const queryParamsString = paramKeys.reduce((paramsString, queryParamKey) => {\n        return `${paramsString}&${queryParamKey}=${params[queryParamKey]}`;\n    }, '');\n    return queryParamsString.slice(1);\n}\n\nfunction getQueryParams(url) {\n    const queryParams = {};\n    const parser = document.createElement('a');\n    parser.href = url;\n    const query = parser.search.substring(1);\n    if (!query) {\n        return {};\n    }\n    const params = query.split('&');\n    params.forEach((param) => {\n        const [key, value] = param.split('=');\n        if (queryParams[key]) {\n            queryParams[key] = [decodeURIComponentWithErrorHandling(value)].concat(queryParams[key]);\n        }\n        else {\n            const items = value.split(',');\n            if (items.length === 1) {\n                queryParams[key] = decodeURIComponentWithErrorHandling(value);\n            }\n            else {\n                queryParams[key] = items.map((urlParam) => decodeURIComponentWithErrorHandling(urlParam));\n            }\n        }\n    });\n    return queryParams;\n}\nfunction decodeURIComponentWithErrorHandling(value) {\n    try {\n        return decodeURIComponent(value);\n    }\n    catch (e) {\n        console.error(e);\n        return value;\n    }\n}\n\nfunction makeHttpParams(params, httpParamsOptions) {\n    let httpParams = new HttpParams(httpParamsOptions);\n    Object.keys(params).forEach((paramKey) => {\n        httpParams = httpParams.append(paramKey, params[paramKey]);\n    });\n    return httpParams;\n}\n\nconst UriTemplate = UriTemplates.default || UriTemplates;\nclass DatastoreService {\n    constructor(http) {\n        this.http = http;\n        this.networkConfig = this['networkConfig'] || DEFAULT_NETWORK_CONFIG;\n        this.internalStorage = createHalStorage(this.cacheStrategy, this.halStorage);\n        this.modelTypes = [];\n    }\n    getHalDocumentClass() {\n        return (Reflect.getMetadata(HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY, this.constructor) ||\n            HalDocument);\n    }\n    buildUrl(model) {\n        const hostUrl = this.buildHostUrl(model);\n        const urlParts = [hostUrl, model ? model.endpoint : null];\n        if (model && model.id) {\n            urlParts.push(model.id);\n        }\n        return urlParts.filter((urlPart) => urlPart).join('/');\n    }\n    createHalDocument(rawResource, modelClass, rawResponse) {\n        const propertyClass = isFunction(modelClass)\n            ? modelClass(rawResource)\n            : modelClass;\n        const representantiveModel = new propertyClass({}, this);\n        const halDocumentClass = representantiveModel.getHalDocumentClass() || this.getHalDocumentClass();\n        return new halDocumentClass(rawResource, rawResponse, propertyClass, this);\n    }\n    findOne(modelClass, modelId, includeRelationships = [], requestOptions = {}, customUrl, subsequentRequestsOptions = {}) {\n        const url = customUrl || this.buildModelUrl(modelClass, modelId);\n        const requestsOptions = {\n            mainRequest: requestOptions,\n            subsequentRequests: subsequentRequestsOptions,\n        };\n        const relationshipDescriptors = ensureRelationshipRequestDescriptors(includeRelationships);\n        return this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, true, relationshipDescriptors);\n    }\n    fetchModelRelationships(model, relationshipNames, requestOptions = {}) {\n        const ensuredRelationshipNames = [].concat(relationshipNames);\n        const relationships$ = this.fetchRelationships(model, ensuredRelationshipNames, requestOptions);\n        if (!relationships$.length) {\n            return of(model);\n        }\n        return combineLatest(relationships$).pipe(map(() => model));\n    }\n    fetchRelationships(model, relationshipDescriptors, requestOptions = {}) {\n        const relationshipCalls = [];\n        const relationshipMappings = this.extractCurrentLevelRelationships(relationshipDescriptors);\n        for (const relationshipName in relationshipMappings) {\n            const url = model.getRelationshipUrl(relationshipName);\n            const property = model.getPropertyData(relationshipName);\n            if (!property) {\n                continue;\n            }\n            let modelClass = property.propertyClass;\n            if (isString(modelClass)) {\n                modelClass = this.findModelClassByType(modelClass);\n            }\n            const isSingleResource = property.type === ModelProperty.Attribute || property.type === ModelProperty.HasOne;\n            // Checks if the relationship is already embdedded inside the emdedded property, or\n            // as a part of attribute properties\n            const embeddedRelationship = model.getEmbeddedResource(relationshipName);\n            let fetchedModels;\n            if (embeddedRelationship) {\n                fetchedModels = this.processRawResource(embeddedRelationship, modelClass, isSingleResource, model.rawResponse);\n            }\n            if (!url ||\n                url.startsWith(LOCAL_MODEL_ID_PREFIX) ||\n                url.startsWith(LOCAL_DOCUMENT_ID_PREFIX)) {\n                continue;\n            }\n            const relationshipRequestOptions = relationshipMappings[relationshipName]\n                .originalRelationshipDescriptor\n                ? relationshipMappings[relationshipName].originalRelationshipDescriptor.options\n                : null;\n            const requestsOptions = {\n                mainRequest: relationshipRequestOptions || requestOptions,\n                subsequentRequests: requestOptions,\n            };\n            const relationshipCall$ = this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, isSingleResource, relationshipMappings[relationshipName].childrenRelationships, fetchedModels).pipe(map((fetchedRelation) => {\n                const externalRelationshipName = property.externalName;\n                if (isHalModelInstance(model)) {\n                    if (property.type === ModelProperty.HasOne) {\n                        // The original relationship URL on the parent model must be replaced because\n                        // the actual relationship URL may have some query parameteres attached to it\n                        model.links[externalRelationshipName].href = fetchedRelation.uniqueModelIdentificator;\n                    }\n                    else {\n                        model.updateHasManyDocumentIdentificator(property, fetchedRelation.uniqueModelIdentificator);\n                        // In case of a HalDocument, halDocument.models may contain model instances which are not the same as the models\n                        // saved in local storage. That happens if the same models are fetch beforehand through another API call.\n                        // In that case, hasManyDocumentIdentificators of the models from HalDocument must be updated as well.\n                        const localModel = this.storage.get(model.uniqueModelIdentificator);\n                        if (localModel && localModel !== model) {\n                            localModel.updateHasManyDocumentIdentificator(property, fetchedRelation.uniqueModelIdentificator);\n                        }\n                    }\n                }\n                return fetchedRelation;\n            }));\n            relationshipCalls.push(relationshipCall$);\n        }\n        return relationshipCalls;\n    }\n    extractCurrentLevelRelationships(relationshipDescriptors) {\n        return relationshipDescriptors.reduce((relationships, currentRelationshipDescriptor) => {\n            const relationshipNameParts = currentRelationshipDescriptor.name.split('.');\n            const currentLevelRelationship = relationshipNameParts.shift();\n            relationships[currentLevelRelationship] = relationships[currentLevelRelationship] || {\n                childrenRelationships: [],\n            };\n            if (relationshipNameParts.length) {\n                relationships[currentLevelRelationship].childrenRelationships.push({\n                    name: relationshipNameParts.join('.'),\n                    options: currentRelationshipDescriptor.options,\n                });\n            }\n            else {\n                relationships[currentLevelRelationship].originalRelationshipDescriptor =\n                    currentRelationshipDescriptor;\n            }\n            return relationships;\n        }, {});\n    }\n    handleGetRequestWithRelationships(url, requestsOptions, modelClass, isSingleResource, includeRelationships = [], fetchedModels = null, storePartialModels) {\n        if (fetchedModels) {\n            return of(fetchedModels);\n        }\n        const httpRequest$ = this.makeGetRequestWrapper(url, requestsOptions, modelClass, isSingleResource, storePartialModels);\n        if (includeRelationships.length) {\n            return httpRequest$.pipe(flatMap((model) => {\n                const models = isSingleResource\n                    ? [model]\n                    : model.models;\n                const relationshipCalls = this.triggerFetchingModelRelationships(models, includeRelationships, requestsOptions.subsequentRequests);\n                if (!relationshipCalls.length) {\n                    return of(model);\n                }\n                return combineLatest(relationshipCalls).pipe(map(() => model));\n            }));\n        }\n        return httpRequest$;\n    }\n    makeGetRequestWrapper(url, requestsOptions, modelClass, isSingleResource, storePartialModels) {\n        const originalGetRequest$ = this.makeGetRequest(url, requestsOptions.mainRequest, modelClass, isSingleResource, storePartialModels);\n        if (this.storage.makeGetRequestWrapper) {\n            const { cleanUrl, urlWithParams, requestOptions: options, } = this.extractRequestInfo(url, requestsOptions.mainRequest);\n            const cachedResoucesFromUrl = this.storage.get(decodeURIComponentWithErrorHandling(url)) ||\n                this.storage.get(decodeURIComponentWithErrorHandling(urlWithParams));\n            return this.storage.makeGetRequestWrapper({ cleanUrl, urlWithParams, originalUrl: url }, cachedResoucesFromUrl, originalGetRequest$, options, modelClass, storePartialModels);\n        }\n        return originalGetRequest$;\n    }\n    triggerFetchingModelRelationships(models, includeRelationships, requestOptions) {\n        const modelRelationshipCalls = [];\n        models.forEach((model) => {\n            const relationshipCalls = this.fetchRelationships(model, includeRelationships, requestOptions);\n            modelRelationshipCalls.push(...relationshipCalls);\n        });\n        return modelRelationshipCalls;\n    }\n    find(modelClass, params = {}, includeMeta = false, includeRelationships = [], requestOptions = {}, customUrl, subsequentRequestsOptions = {}, storePartialModels = false) {\n        const url = customUrl || this.buildModelUrl(modelClass);\n        const subsequentOptions = deepmergeWrapper({}, subsequentRequestsOptions);\n        const paramsObject = this.ensureParamsObject(params || {});\n        requestOptions.params = this.ensureParamsObject(requestOptions.params || {});\n        requestOptions.params = Object.assign(requestOptions.params, paramsObject);\n        const options = deepmergeWrapper({}, requestOptions);\n        const requestsOptions = {\n            mainRequest: options,\n            subsequentRequests: subsequentOptions,\n        };\n        const relationshipDescriptors = ensureRelationshipRequestDescriptors(includeRelationships);\n        return this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, false, relationshipDescriptors, null, storePartialModels).pipe(flatMap((halDocument) => {\n            return this.fetchEmbeddedListItems(halDocument, modelClass, relationshipDescriptors, subsequentOptions).pipe(map((models) => {\n                halDocument.models = models;\n                return halDocument;\n            }));\n        }), map((halDocument) => (includeMeta ? halDocument : halDocument.models)));\n    }\n    save(model, modelClass, requestOptions, saveOptions = {}) {\n        const defaultSaveOptions = {\n            buildUrlFunction: this.defaultUrlBuildFunction,\n            specificFields: null,\n            transformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n        };\n        const options = deepmergeWrapper(defaultSaveOptions, saveOptions);\n        const url = options.buildUrlFunction(model, this.buildUrl(model));\n        const payload = model.generatePayload({\n            specificFields: options.specificFields,\n            changedPropertiesOnly: false,\n        });\n        const transformedPaylaod = options.transformPayloadBeforeSave(payload);\n        const modelHeaders = model.generateHeaders();\n        const modelRequestOptions = requestOptions || {};\n        modelRequestOptions.headers = modelRequestOptions.headers || {};\n        Object.assign(modelRequestOptions.headers, modelHeaders);\n        let request$;\n        if (model.isSaved) {\n            request$ = this.makePutRequest(url, transformedPaylaod, modelRequestOptions);\n        }\n        else {\n            request$ = this.makePostRequest(url, transformedPaylaod, modelRequestOptions);\n        }\n        return request$.pipe(map((response) => {\n            const rawResource = this.extractResourceFromResponse(response);\n            if (rawResource) {\n                return this.processRawResource(rawResource, modelClass, true, response);\n            }\n            const newLocationLink = getResponseHeader(response, 'Location');\n            if (newLocationLink && model.selfLink !== newLocationLink) {\n                model.selfLink = newLocationLink;\n            }\n            if (!this.storage.get(model.selfLink)) {\n                this.storage.save(model, response);\n            }\n            return model;\n        }));\n    }\n    // TODO this updated Attribute properties only, implement HasOne and HasMany properties\n    updateModelWithChangedProperties(model, payload) {\n        Object.keys(payload).forEach((externalPropertyName) => {\n            const property = model.getPropertyData(externalPropertyName);\n            if (payload[externalPropertyName] &&\n                property &&\n                property.type === ModelProperty.Attribute) {\n                model['resource'][externalPropertyName] = payload[externalPropertyName];\n            }\n        });\n    }\n    update(model, requestOptions, updateOptions = {}) {\n        const defaultUpdateOptions = {\n            buildUrlFunction: this.defaultUrlBuildFunction,\n            specificFields: null,\n            transformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n        };\n        const options = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n        const url = options.buildUrlFunction(model, this.buildUrl(model));\n        const payload = model.generatePayload({\n            specificFields: options.specificFields,\n            changedPropertiesOnly: true,\n        });\n        const transformedPaylaod = options.transformPayloadBeforeSave(payload);\n        const modelHeaders = model.generateHeaders();\n        const modelRequestOptions = requestOptions || {};\n        modelRequestOptions.headers = modelRequestOptions.headers || {};\n        Object.assign(modelRequestOptions.headers, modelHeaders);\n        return this.makePatchRequest(url, transformedPaylaod, modelRequestOptions).pipe(map(() => {\n            this.updateModelWithChangedProperties(model, transformedPaylaod);\n            return model;\n        }));\n    }\n    delete(model, requestOptions, updateOptions = {}) {\n        const defaultUpdateOptions = {\n            buildUrlFunction: this.defaultUrlBuildFunction,\n        };\n        const options = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n        const url = options.buildUrlFunction(model, this.buildUrl(model));\n        return this.makeDeleteRequest(url, requestOptions).pipe(tap(() => {\n            this.storage.remove(model);\n        }));\n    }\n    get storage() {\n        return this.internalStorage;\n    }\n    request(method, url, requestOptions, modelClass, singleResource, includeNetworkConfig = true) {\n        const customUrl = includeNetworkConfig\n            ? `${this.buildHostUrl(new modelClass({}, this))}/${url}`\n            : url;\n        switch (method.toLocaleLowerCase()) {\n            case 'get':\n                return this.makeGetRequest(customUrl, requestOptions, modelClass, singleResource);\n            default:\n                throw new Error(`Method ${method} is not supported.`);\n        }\n    }\n    makeGetRequest(url, requestOptions, modelClass, singleResource, storePartialModels) {\n        const { cleanUrl, requestOptions: options, urlWithParams, } = this.extractRequestInfo(url, requestOptions);\n        return this.http.get(cleanUrl, options).pipe(map((response) => {\n            const rawResource = this.extractResourceFromResponse(response);\n            return this.processRawResource(rawResource, modelClass, singleResource, response, urlWithParams, storePartialModels);\n        }), catchError((response) => {\n            if (response.status === 304) {\n                const cachedModel = this.storage.get(url) || this.storage.get(response.url);\n                if (cachedModel) {\n                    return of(cachedModel);\n                }\n            }\n            return throwError(response);\n        }));\n    }\n    head(url, requestOptions) {\n        const { cleanUrl, requestOptions: options } = this.extractRequestInfo(url, requestOptions);\n        return this.http.head(cleanUrl, options);\n    }\n    extractRequestInfo(url, options) {\n        const params = this.ensureParamsObject(options.params || {});\n        Object.assign(options, { params });\n        const requestOptions = deepmergeWrapper(DEFAULT_REQUEST_OPTIONS, this.networkConfig.globalRequestOptions, options);\n        this.storage.enrichRequestOptions(url, options);\n        const fillParams = Object.assign({}, options.params, options.routeParams);\n        const templatedUrl = new UriTemplate(url).fill(fillParams);\n        const urlQueryParams = getQueryParams(templatedUrl);\n        requestOptions.params = Object.assign(urlQueryParams, requestOptions.params);\n        const cleanUrl = removeQueryParams(templatedUrl);\n        const queryParamsString = makeQueryParamsString(requestOptions.params, true);\n        const urlWithParams = queryParamsString ? `${cleanUrl}?${queryParamsString}` : cleanUrl;\n        requestOptions.params = makeHttpParams(requestOptions.params, this.httpParamsOptions);\n        return {\n            cleanUrl,\n            urlWithParams,\n            requestOptions,\n        };\n    }\n    ensureParamsObject(params) {\n        if (params instanceof HttpParams) {\n            return params.keys().reduce((paramsObject, paramName) => {\n                const arrayParam = params.getAll(paramName);\n                paramsObject[paramName] = arrayParam.length > 1 ? arrayParam : params.get(paramName);\n                return paramsObject;\n            }, {});\n        }\n        return params;\n    }\n    makePostRequest(url, payload, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.post(cleanUrl, payload, options);\n    }\n    makePutRequest(url, payload, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.put(cleanUrl, payload, options);\n    }\n    makePatchRequest(url, payload, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.patch(cleanUrl, payload, options);\n    }\n    makeDeleteRequest(url, requestOptions) {\n        const { requestOptions: options, cleanUrl } = this.extractRequestInfo(url, requestOptions || {});\n        return this.http.delete(cleanUrl, options);\n    }\n    processRawResource(rawResource, modelClass, isSingleResource, response, url, savePartialModels) {\n        if (isSingleResource) {\n            const propertyClass = isFunction(modelClass)\n                ? modelClass(rawResource)\n                : modelClass;\n            const model = new propertyClass(rawResource, this, response);\n            this.populateResourceWithRelationshipIndentificators(model);\n            this.storage.save(model, response, [url]);\n            return model;\n        }\n        const halDocument = this.createHalDocument(rawResource, modelClass, response);\n        this.storage.saveAll(halDocument.models, savePartialModels);\n        halDocument.models.forEach((listModel) => {\n            this.populateResourceWithRelationshipIndentificators(listModel);\n        });\n        this.storage.save(halDocument, response, [url]);\n        return halDocument;\n    }\n    buildModelUrl(modelClass, modelId) {\n        var _a, _b;\n        const model = new modelClass({}, this);\n        if (modelId && ((_a = model.modelEndpoints) === null || _a === void 0 ? void 0 : _a.singleResourceEndpoint)) {\n            return model.modelEndpoints.singleResourceEndpoint;\n        }\n        else if (!modelId && ((_b = model.modelEndpoints) === null || _b === void 0 ? void 0 : _b.collectionEndpoint)) {\n            return model.modelEndpoints.collectionEndpoint;\n        }\n        const modelUrl = this.buildUrl(model);\n        return modelId ? `${modelUrl}/${modelId}` : modelUrl;\n    }\n    extractResourceFromResponse(response) {\n        return response.body;\n    }\n    populateResourceWithRelationshipIndentificators(model) {\n        const localResource = this.storage.get(model.uniqueModelIdentificator);\n        if (localResource) {\n            model.hasManyDocumentIdentificators = localResource.hasManyDocumentIdentificators;\n        }\n    }\n    fetchEmbeddedListItems(halDocument, modelClass, includeRelationships = [], requestOptions = {}) {\n        const modelCalls = [];\n        const requestsOptions = {\n            mainRequest: requestOptions,\n            subsequentRequests: requestOptions,\n        };\n        // Don't fetch list items if they are embedded\n        if (halDocument.hasEmbeddedItems) {\n            halDocument.models.forEach((model) => {\n                const call$ = this.handleGetRequestWithRelationships(null, requestsOptions, modelClass, true, includeRelationships, model);\n                modelCalls.push(call$);\n            });\n        }\n        else {\n            halDocument.itemLinks.forEach((link) => {\n                const url = link.href;\n                if (url) {\n                    const call$ = this.handleGetRequestWithRelationships(url, requestsOptions, modelClass, true, includeRelationships);\n                    modelCalls.push(call$);\n                }\n            });\n        }\n        if (!modelCalls.length) {\n            return of([]);\n        }\n        return combineLatest(modelCalls);\n    }\n    buildHostUrl(model) {\n        // tslint:disable-next-line:max-line-length\n        const baseUrl = model && model.networkConfig && model.networkConfig.baseUrl\n            ? model.networkConfig.baseUrl\n            : this.networkConfig.baseUrl;\n        // tslint:disable-next-line:max-line-length\n        const networkEndpoint = model && model.networkConfig && model.networkConfig.endpoint\n            ? model.networkConfig.endpoint\n            : this.networkConfig.endpoint;\n        return [baseUrl, networkEndpoint].filter((urlPart) => urlPart).join('/');\n    }\n    defaultUrlBuildFunction(model, urlFromModel) {\n        var _a, _b;\n        if (model.isSaved && model.selfLink) {\n            return model.selfLink;\n        }\n        if (model.id && ((_a = model.modelEndpoints) === null || _a === void 0 ? void 0 : _a.singleResourceEndpoint)) {\n            return model.modelEndpoints.singleResourceEndpoint;\n        }\n        else if (!model.id && ((_b = model.modelEndpoints) === null || _b === void 0 ? void 0 : _b.collectionEndpoint)) {\n            return model.modelEndpoints.collectionEndpoint;\n        }\n        return urlFromModel;\n    }\n    defaultTransformPayloadBeforeSaveFunction(payload) {\n        return payload;\n    }\n    get cacheStrategy() {\n        return this._cacheStrategy;\n    }\n    get halStorage() {\n        return this._storage;\n    }\n    findModelClassByType(modelType) {\n        const modelClass = this.modelTypes.find((modelClass) => modelClass.modelType === modelType);\n        if (!modelClass) {\n            throw new Error(`Provided model name \"${modelType}\" cannot be found in the Datastore. Provide it in DatastoreService.modelTypes`);\n        }\n        return modelClass;\n    }\n    createModel(modelClass, recordData = {}) {\n        const rawRecordData = Object.assign({}, recordData);\n        rawRecordData[EMBEDDED_PROPERTY_NAME] = Object.assign({}, recordData, recordData[EMBEDDED_PROPERTY_NAME]);\n        const model = new modelClass(rawRecordData, this);\n        return model;\n    }\n}\nDatastoreService.ɵfac = function DatastoreService_Factory(t) { return new (t || DatastoreService)(i0.ɵɵinject(i1.HttpClient)); };\nDatastoreService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatastoreService, factory: DatastoreService.ɵfac });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatastoreService, [{\n            type: Injectable\n        }], function () { return [{ type: i1.HttpClient }]; }, null);\n})();\n\nclass ModelService {\n    constructor(datastore, modelClass) {\n        this.datastore = datastore;\n        this.modelClass = modelClass;\n    }\n    findOne(modelId, includeRelationships = [], requestOptions = {}, subsequentRequestsOptions = {}, customUrl) {\n        return this.datastore.findOne(this.modelClass, modelId, includeRelationships, requestOptions, customUrl, subsequentRequestsOptions);\n    }\n    find(params = {}, includeMeta = false, includeRelationships = [], requestOptions = {}, subsequentRequestsOptions = {}, customUrl, storePartialModels) {\n        return this.datastore.find(this.modelClass, params, includeMeta, includeRelationships, requestOptions, customUrl, subsequentRequestsOptions, storePartialModels);\n    }\n    createNewModel(recordData = {}) {\n        const model = this.datastore.createModel(this.modelClass, recordData);\n        this.datastore.storage.save(model);\n        return model;\n    }\n}\n\nfunction arrayAttr(classType) {\n    return class ArrayAttribute {\n        constructor(args = []) {\n            return args.map((arg) => new classType(arg));\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Attribute, CacheStrategy, DEFAULT_ATTRIBUTE_OPTIONS, DEFAULT_HAS_MANY_OPTIONS, DEFAULT_HAS_ONE_OPTIONS, DEFAULT_NETWORK_CONFIG, DatastoreConfig, DatastoreService, EtagHalStorage, HalDocument, HalModel, HalStorage, HasMany, HasOne, HeaderAttribute, ModelConfig, ModelService, ModelServiceConfig, ModelServiceOptions, NgxHalModule, Pagination, SimpleHalModel, SimpleHalStorage, arrayAttr };\n//# sourceMappingURL=ngx-hal.mjs.map\n","map":{"version":3,"file":"ngx-hal.mjs","sources":["../../../projects/ngx-hal/src/lib/ngx-hal.module.ts","../../../projects/ngx-hal/src/lib/constants/metadata.constant.ts","../../../projects/ngx-hal/src/lib/interfaces/network-config.interface.ts","../../../projects/ngx-hal/src/lib/utils/deepmerge-wrapper.ts","../../../projects/ngx-hal/src/lib/decorators/datastore-config.decorator.ts","../../../projects/ngx-hal/src/lib/decorators/model-service-config.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/model-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/model-config.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/attribute-options.interface.ts","../../../projects/ngx-hal/src/lib/enums/model-property.enum.ts","../../../projects/ngx-hal/src/lib/helpers/replace-model-property/replace-model-property.helper.ts","../../../projects/ngx-hal/src/lib/decorators/attribute.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/header-attribute-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/header-attribute.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/has-many-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/has-many.decorator.ts","../../../projects/ngx-hal/src/lib/interfaces/has-one-options.interface.ts","../../../projects/ngx-hal/src/lib/decorators/has-one.decorator.ts","../../../projects/ngx-hal/src/lib/constants/hal.constant.ts","../../../projects/ngx-hal/src/lib/constants/general.constant.ts","../../../projects/ngx-hal/src/lib/utils/is-array/is-array.util.ts","../../../projects/ngx-hal/src/lib/helpers/uuid/uuid.helper.ts","../../../projects/ngx-hal/src/lib/classes/hal-document.ts","../../../projects/ngx-hal/src/lib/utils/get-response-headers/get-response-header.util.ts","../../../projects/ngx-hal/src/lib/helpers/is-hal-model-instance.ts/is-hal-model-instance.helper.ts","../../../projects/ngx-hal/src/lib/utils/ensure-relationship-descriptors/ensure-relationship-descriptors.util.ts","../../../projects/ngx-hal/src/lib/utils/remove-query-params/remove-query-params.util.ts","../../../projects/ngx-hal/src/lib/utils/set-request-header/set-request-header.util.ts","../../../projects/ngx-hal/src/lib/utils/is-string/is-string.util.ts","../../../projects/ngx-hal/src/lib/models/simple-hal.model.ts","../../../projects/ngx-hal/src/lib/helpers/is-simple-hal-model-instance.ts/is-simple-hal-model-instance.helper.ts","../../../projects/ngx-hal/src/lib/helpers/is-function/is-function.helper.ts","../../../projects/ngx-hal/src/lib/models/hal.model.ts","../../../projects/ngx-hal/src/lib/classes/pagination.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/hal-storage.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/etag-hal-storage.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/simple-hal-storage.ts","../../../projects/ngx-hal/src/lib/enums/cache-strategy.enum.ts","../../../projects/ngx-hal/src/lib/interfaces/model-service-options.interface.ts","../../../projects/ngx-hal/src/lib/constants/request.constant.ts","../../../projects/ngx-hal/src/lib/classes/hal-storage/hal-storage-factory.ts","../../../projects/ngx-hal/src/lib/helpers/make-query-params-string/make-query-params-string.helper.ts","../../../projects/ngx-hal/src/lib/utils/get-query-params/get-query-params.util.ts","../../../projects/ngx-hal/src/lib/helpers/make-http-params/make-http-params.helper.ts","../../../projects/ngx-hal/src/lib/services/datastore/datastore.service.ts","../../../projects/ngx-hal/src/lib/services/model-service/model.service.ts","../../../projects/ngx-hal/src/lib/helpers/array-attribute-class/array-attribute-class.ts","../../../projects/ngx-hal/src/ngx-hal.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport 'reflect-metadata';\n\n@NgModule({\n\tdeclarations: [],\n\timports: [],\n\texports: [],\n})\nexport class NgxHalModule {}\n","export const ATTRIBUTE_PROPERTIES_METADATA_KEY = 'attributeProperties';\nexport const HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY = 'headerAttributeProperties';\nexport const HAS_MANY_PROPERTIES_METADATA_KEY = 'hasManyProperties';\nexport const HAS_ONE_PROPERTIES_METADATA_KEY = 'hasOneProperties';\nexport const HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY = 'halDatastoreDocumentClass';\nexport const HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY = 'halModelDocumentClass';\n","import { RequestOptions } from '../types/request-options.type';\n\nexport interface NetworkConfig {\n\tbaseUrl?: string;\n\tendpoint?: string;\n\tglobalRequestOptions?: RequestOptions;\n}\n\nexport const DEFAULT_NETWORK_CONFIG: NetworkConfig = {\n\tbaseUrl: '/',\n\tendpoint: '',\n\tglobalRequestOptions: {},\n};\n","import deepmerge from 'deepmerge';\n\nexport function deepmergeWrapper<T = { [K: string]: any }>(...args): T {\n\tconst ensuredArgs = args.map((arg: any) => arg || {});\n\treturn deepmerge.all(ensuredArgs) as unknown as T;\n}\n","import { DatastoreOptions } from '../interfaces/datastore-options.interface';\nimport { HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY } from '../constants/metadata.constant';\nimport { DEFAULT_NETWORK_CONFIG, NetworkConfig } from '../interfaces/network-config.interface';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function DatastoreConfig(config: DatastoreOptions) {\n\treturn function (target: any) {\n\t\tconst networkConfig = deepmergeWrapper<NetworkConfig>(\n\t\t\tDEFAULT_NETWORK_CONFIG,\n\t\t\tconfig.network || {},\n\t\t);\n\t\tObject.defineProperty(target.prototype, 'paginationClass', {\n\t\t\tvalue: config.paginationClass,\n\t\t});\n\t\tObject.defineProperty(target.prototype, '_cacheStrategy', {\n\t\t\tvalue: config.cacheStrategy,\n\t\t});\n\t\tObject.defineProperty(target.prototype, '_storage', {\n\t\t\tvalue: config.storage,\n\t\t});\n\t\tObject.defineProperty(target.prototype, 'networkConfig', {\n\t\t\tvalue: networkConfig,\n\t\t\twritable: true,\n\t\t});\n\t\tReflect.defineMetadata(\n\t\t\tHAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY,\n\t\t\tconfig.halDocumentClass,\n\t\t\ttarget,\n\t\t);\n\t\treturn target;\n\t};\n}\n","import { ModelServiceOptions } from '../interfaces/model-service-options.interface';\n\nexport function ModelServiceConfig(config: ModelServiceOptions) {\n\treturn function (target: any) {\n\t\treturn target;\n\t};\n}\n","import { HalDocumentConstructor } from '../types/hal-document-construtor.type';\nimport { HalModel } from '../models/hal.model';\nimport { NetworkConfig } from './network-config.interface';\n\nexport class ModelOptions {\n\ttype: string;\n\tendpoint?: string;\n\thalDocumentClass?: HalDocumentConstructor<HalModel>;\n\tnetworkConfig?: NetworkConfig;\n}\n\nexport const DEFAULT_MODEL_OPTIONS: ModelOptions = {\n\ttype: '',\n};\n\nexport const DEFAULT_MODEL_TYPE = '__DEFAULT_MODEL_TYPE__';\n","import { ModelOptions, DEFAULT_MODEL_OPTIONS } from '../interfaces/model-options.interface';\nimport { HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY } from '../constants/metadata.constant';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function ModelConfig(config: ModelOptions) {\n\treturn function (target: any) {\n\t\tconst configValue = deepmergeWrapper<ModelOptions>(DEFAULT_MODEL_OPTIONS, config);\n\t\tObject.defineProperty(target.prototype, 'config', {\n\t\t\tvalue: configValue,\n\t\t\twritable: true,\n\t\t});\n\t\tReflect.defineMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, config.halDocumentClass, target);\n\t\treturn target;\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface AttributeOptions {\n\tuseClass?: boolean | string | ModelConstructor<any> | ModelConstructorFn<any>;\n\ttransformResponseValue?: (rawAttribute: any) => any;\n\ttransformBeforeSave?: (raw: any) => any;\n\texternalName?: string;\n\texcludeFromPayload?: boolean;\n}\n\nexport const DEFAULT_ATTRIBUTE_OPTIONS = {\n\texcludeFromPayload: false,\n\tuseClass: false,\n};\n","export enum ModelProperty {\n\tAttribute = 'Attribute',\n\tHasMany = 'HasMany',\n\tHasOne = 'HasOne',\n\tHeaderAttribute = 'HeaderAttribute',\n}\n","import { ModelProperty } from '../../interfaces/model-property.interface';\n\nexport function updateModelPropertiesWithTheNewOne<T extends ModelProperty>(\n\tmodelProperties: Array<T>,\n\tnewModelProperty: T,\n): Array<T> {\n\tconst properties: Array<T> = [].concat(modelProperties);\n\n\tconst existingProperty: T = properties.find((property: T) => {\n\t\treturn property.name === newModelProperty.name;\n\t});\n\n\tif (existingProperty) {\n\t\tconst indexOfExistingProperty: number = properties.indexOf(existingProperty);\n\t\tproperties[indexOfExistingProperty] = newModelProperty;\n\t} else {\n\t\tproperties.push(newModelProperty);\n\t}\n\n\treturn properties;\n}\n","import { HalModel } from '../models/hal.model';\nimport { ATTRIBUTE_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport {\n\tAttributeOptions,\n\tDEFAULT_ATTRIBUTE_OPTIONS,\n} from '../interfaces/attribute-options.interface';\nimport { AttributeModelProperty } from '../interfaces/model-property.interface';\nimport { ModelProperty as ModelPropertyEnum } from '../enums/model-property.enum';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function Attribute(options: AttributeOptions = {}) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst attributeOptions: AttributeOptions = deepmergeWrapper(DEFAULT_ATTRIBUTE_OPTIONS, options);\n\t\tconst existingAttributeProperties: Array<AttributeModelProperty> =\n\t\t\tReflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst attributeProperty: AttributeModelProperty = {\n\t\t\ttype: ModelPropertyEnum.Attribute,\n\t\t\ttransformResponseValue: attributeOptions.transformResponseValue,\n\t\t\ttransformBeforeSave: attributeOptions.transformBeforeSave,\n\t\t\tname: propertyName,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t\texcludeFromPayload: options.excludeFromPayload,\n\t\t};\n\n\t\tif (attributeOptions.useClass) {\n\t\t\tif (attributeOptions.useClass === true) {\n\t\t\t\tconst propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n\t\t\t\tattributeProperty.propertyClass = propertyClass;\n\t\t\t} else {\n\t\t\t\tattributeProperty.propertyClass = attributeOptions.useClass;\n\t\t\t}\n\t\t}\n\n\t\tconst attributeProperties: Array<AttributeModelProperty> = updateModelPropertiesWithTheNewOne(\n\t\t\texistingAttributeProperties,\n\t\t\tattributeProperty,\n\t\t);\n\n\t\tReflect.defineMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, attributeProperties, model);\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface HeaderAttributeOptions {\n\tuseClass?: boolean | ModelConstructor<any> | ModelConstructorFn<any>;\n\ttransformResponseValue?: (rawAttribute: any) => any;\n\ttransformBeforeSave?: (raw: any) => any;\n\texternalName?: string;\n}\n\nexport const DEFAULT_HEADER_ATTRIBUTE_OPTIONS = {\n\tuseClass: false,\n};\n","import { HalModel } from '../models/hal.model';\nimport { HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport {\n\tAttributeModelProperty,\n\tHeaderAttributeModelProperty,\n} from '../interfaces/model-property.interface';\nimport { ModelProperty as ModelPropertyEnum } from '../enums/model-property.enum';\nimport {\n\tHeaderAttributeOptions,\n\tDEFAULT_HEADER_ATTRIBUTE_OPTIONS,\n} from '../interfaces/header-attribute-options.interface';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function HeaderAttribute(options: HeaderAttributeOptions = {}) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst headerAttributeOptions: HeaderAttributeOptions = deepmergeWrapper(\n\t\t\tDEFAULT_HEADER_ATTRIBUTE_OPTIONS,\n\t\t\toptions,\n\t\t);\n\n\t\t// tslint:disable-next-line:max-line-length\n\t\tconst existingHeaderAttributeProperties: Array<AttributeModelProperty> =\n\t\t\tReflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst attributeProperty: HeaderAttributeModelProperty = {\n\t\t\ttype: ModelPropertyEnum.HeaderAttribute,\n\t\t\ttransformResponseValue: headerAttributeOptions.transformResponseValue,\n\t\t\ttransformBeforeSave: headerAttributeOptions.transformBeforeSave,\n\t\t\tname: propertyName,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t};\n\n\t\tif (headerAttributeOptions.useClass) {\n\t\t\tif (headerAttributeOptions.useClass === true) {\n\t\t\t\tconst propertyClass = Reflect.getMetadata('design:type', model, propertyName);\n\t\t\t\tattributeProperty.propertyClass = propertyClass;\n\t\t\t} else {\n\t\t\t\tattributeProperty.propertyClass = headerAttributeOptions.useClass;\n\t\t\t}\n\t\t}\n\n\t\tconst headerAttributeProperties: Array<HeaderAttributeModelProperty> =\n\t\t\tupdateModelPropertiesWithTheNewOne(existingHeaderAttributeProperties, attributeProperty);\n\n\t\tReflect.defineMetadata(\n\t\t\tHEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY,\n\t\t\theaderAttributeProperties,\n\t\t\tmodel,\n\t\t);\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface HasManyOptions {\n\titemsType: string | ModelConstructor<any> | ModelConstructorFn<any>;\n\tincludeInPayload?: boolean;\n\texternalName?: string;\n}\n\nexport const DEFAULT_HAS_MANY_OPTIONS = {\n\tincludeInPayload: false,\n};\n","import { HalModel } from '../models/hal.model';\nimport { HAS_MANY_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport { HasManyModelProperty } from '../interfaces/model-property.interface';\nimport { ModelProperty } from '../enums/model-property.enum';\nimport { HasManyOptions, DEFAULT_HAS_MANY_OPTIONS } from '../interfaces/has-many-options.interface';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function HasMany(options: HasManyOptions) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst hasManyOptions: HasManyOptions = deepmergeWrapper(DEFAULT_HAS_MANY_OPTIONS, options);\n\n\t\tconst existingHasManyProperties: Array<HasManyModelProperty> =\n\t\t\tReflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst hasManyProperty: HasManyModelProperty = {\n\t\t\tincludeInPayload: hasManyOptions.includeInPayload,\n\t\t\tname: propertyName,\n\t\t\tpropertyClass: hasManyOptions.itemsType,\n\t\t\ttype: ModelProperty.HasMany,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t};\n\n\t\tconst hasManyProperties: Array<HasManyModelProperty> = updateModelPropertiesWithTheNewOne(\n\t\t\texistingHasManyProperties,\n\t\t\thasManyProperty,\n\t\t);\n\n\t\tReflect.defineMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, hasManyProperties, model);\n\t};\n}\n","import { ModelConstructor, ModelConstructorFn } from '../types/model-constructor.type';\n\nexport interface HasOneOptions {\n\texternalName?: string;\n\tincludeInPayload?: boolean;\n\tpropertyClass?: string | ModelConstructor<any> | ModelConstructorFn<any>;\n}\n\nexport const DEFAULT_HAS_ONE_OPTIONS = {\n\tincludeInPayload: false,\n};\n","import { HalModel } from '../models/hal.model';\nimport { HAS_ONE_PROPERTIES_METADATA_KEY } from '../constants/metadata.constant';\nimport { HasOneModelProperty } from '../interfaces/model-property.interface';\nimport { ModelProperty } from '../enums/model-property.enum';\nimport { HasOneOptions, DEFAULT_HAS_ONE_OPTIONS } from '../interfaces/has-one-options.interface';\nimport { updateModelPropertiesWithTheNewOne } from '../helpers/replace-model-property/replace-model-property.helper';\nimport { deepmergeWrapper } from '../utils/deepmerge-wrapper';\n\nexport function HasOne(options: HasOneOptions = {}) {\n\treturn (model: HalModel, propertyName: string) => {\n\t\tconst hasOneOptions: HasOneOptions = deepmergeWrapper(DEFAULT_HAS_ONE_OPTIONS, options);\n\n\t\tconst existingHasOneProperties: Array<HasOneModelProperty> =\n\t\t\tReflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, model) || [];\n\n\t\tconst hasOneProperty: HasOneModelProperty = {\n\t\t\tincludeInPayload: hasOneOptions.includeInPayload,\n\t\t\tname: propertyName,\n\t\t\tpropertyClass:\n\t\t\t\thasOneOptions.propertyClass || Reflect.getMetadata('design:type', model, propertyName),\n\t\t\ttype: ModelProperty.HasOne,\n\t\t\texternalName: options.externalName || propertyName,\n\t\t};\n\n\t\tconst hasOneProperties: Array<HasOneModelProperty> = updateModelPropertiesWithTheNewOne(\n\t\t\texistingHasOneProperties,\n\t\t\thasOneProperty,\n\t\t);\n\n\t\tReflect.defineMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, hasOneProperties, model);\n\t};\n}\n","export const EMBEDDED_PROPERTY_NAME = '_embedded';\nexport const LINKS_PROPERTY_NAME = '_links';\nexport const SELF_PROPERTY_NAME = 'self';\n","export const LOCAL_MODEL_ID_PREFIX = 'local-MODEL-identificator';\nexport const LOCAL_DOCUMENT_ID_PREFIX = 'local-document-identificator';\n","export function isArray(item: any): boolean {\n\treturn Array.isArray(item);\n}\n","export function generateUUID() {\n\treturn `${Math.floor(Math.random() * 1e10)}-${Date.now()}`;\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RawHalResource } from '../interfaces/raw-hal-resource.interface';\nimport {\n\tLINKS_PROPERTY_NAME,\n\tEMBEDDED_PROPERTY_NAME,\n\tSELF_PROPERTY_NAME,\n} from '../constants/hal.constant';\nimport { HalModel } from '../models/hal.model';\nimport { Pagination } from './pagination';\nimport { ModelConstructor } from '../types/model-constructor.type';\nimport { DatastoreService } from '../services/datastore/datastore.service';\nimport { isArray } from '../utils/is-array/is-array.util';\nimport { RawHalLink } from '../interfaces/raw-hal-link.interface';\nimport { RawHalLinks } from '../interfaces/raw-hal-links.interface';\nimport { RequestOptions } from '../types/request-options.type';\nimport { RelationshipRequestDescriptor } from '../types/relationship-request-descriptor.type';\nimport { generateUUID } from '../helpers/uuid/uuid.helper';\n\nexport class HalDocument<T extends HalModel> {\n\tpublic models: Array<T>;\n\tpublic pagination: Pagination;\n\tpublic uniqueModelIdentificator: string;\n\n\tconstructor(\n\t\tprivate rawResource: RawHalResource,\n\t\tprivate rawResponse: HttpResponse<any>,\n\t\tprivate modelClass: ModelConstructor<T>,\n\t\tprivate datastore: DatastoreService,\n\t) {\n\t\tthis.parseRawResources(rawResource);\n\t\tthis.generateUniqueModelIdentificator();\n\t}\n\n\tpublic get hasEmbeddedItems(): boolean {\n\t\tconst listPropertyName: string = this.getListPropertyName(this.rawResource);\n\t\treturn (\n\t\t\tthis.rawResource[EMBEDDED_PROPERTY_NAME] &&\n\t\t\tthis.rawResource[EMBEDDED_PROPERTY_NAME][listPropertyName]\n\t\t);\n\t}\n\n\tpublic get itemLinks(): Array<RawHalLink> {\n\t\tconst listPropertyName: string = this.getListPropertyName(this.rawResource);\n\t\treturn (this.links[listPropertyName] as any) || [];\n\t}\n\n\tpublic getPage(\n\t\tpageNumber: number,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t): Observable<HalDocument<T>> {\n\t\trequestOptions.params = requestOptions.params || {};\n\n\t\tif (pageNumber || pageNumber === 0) {\n\t\t\trequestOptions.params['page'] = pageNumber;\n\t\t}\n\n\t\tconst relationshipUrl: string = this.links[SELF_PROPERTY_NAME].href;\n\n\t\treturn this.datastore.find(\n\t\t\tthis.modelClass,\n\t\t\t{},\n\t\t\ttrue,\n\t\t\tincludeRelationships,\n\t\t\trequestOptions,\n\t\t\trelationshipUrl,\n\t\t\tsubsequentRequestsOptions,\n\t\t);\n\t}\n\n\tprivate parseRawResources(resources: RawHalResource): void {\n\t\tconst items: Array<RawHalResource> = this.getRawResourcesFromResponse(resources);\n\t\tthis.models = this.generateModels(items);\n\t\tthis.pagination = this.generatePagination(resources);\n\t}\n\n\tprivate generateModels(resources: Array<RawHalResource>): Array<T> {\n\t\treturn resources.map((resource: RawHalResource) => {\n\t\t\treturn new this.modelClass(resource, this.datastore, this.rawResponse);\n\t\t});\n\t}\n\n\tprivate generatePagination(pagination: RawHalResource): Pagination {\n\t\tif (!this.datastore.paginationClass) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new this.datastore.paginationClass(pagination);\n\t}\n\n\tprivate getRawResourcesFromResponse(resources: RawHalResource): Array<RawHalResource> {\n\t\tconst listPropertyName: string = this.getListPropertyName(resources);\n\n\t\tif (!resources[EMBEDDED_PROPERTY_NAME]) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn resources[EMBEDDED_PROPERTY_NAME][listPropertyName] || [];\n\t}\n\n\tprivate getListPropertyName(listResponse: RawHalResource): string {\n\t\tconst links = listResponse[LINKS_PROPERTY_NAME];\n\n\t\tconst embdedded: object = this.rawResource[EMBEDDED_PROPERTY_NAME];\n\t\tconst fallbackListPropertyName = embdedded\n\t\t\t? Object.keys(embdedded)[0]\n\t\t\t: 'noListPropertyPresent';\n\n\t\treturn (\n\t\t\tObject.keys(links || {}).find((propertyName: string) => {\n\t\t\t\treturn isArray(links[propertyName]);\n\t\t\t}) || fallbackListPropertyName\n\t\t);\n\t}\n\n\tpublic get selfLink(): string {\n\t\treturn this.links && this.links[SELF_PROPERTY_NAME]\n\t\t\t? this.links[SELF_PROPERTY_NAME].href\n\t\t\t: null;\n\t}\n\n\tprivate get links(): RawHalLinks {\n\t\treturn this.rawResource[LINKS_PROPERTY_NAME];\n\t}\n\n\tprivate generateUniqueModelIdentificator(): void {\n\t\tthis.uniqueModelIdentificator = generateUUID();\n\t}\n}\n","import { HttpResponse, HttpHeaders } from '@angular/common/http';\n\nexport function getResponseHeader(response: HttpResponse<any>, headerName: string): any {\n\tconst emptyHeaders: HttpHeaders = new HttpHeaders();\n\tconst headers: HttpHeaders = response ? response.headers || emptyHeaders : emptyHeaders;\n\treturn headers.get(headerName);\n}\n","import { HalModel } from '../../models/hal.model';\n\nexport function isHalModelInstance(classInstance: any): boolean {\n\tif (!classInstance) {\n\t\treturn false;\n\t}\n\n\tif (classInstance instanceof HalModel) {\n\t\treturn true;\n\t}\n\n\treturn isHalModelInstance(classInstance.prototype);\n}\n","import { RelationshipRequestDescriptor } from '../../types/relationship-request-descriptor.type';\n\nexport function ensureRelationshipRequestDescriptors(\n\trelationships: Array<string | RelationshipRequestDescriptor>,\n): Array<RelationshipRequestDescriptor> {\n\treturn relationships.map((relationshipDescriptor: string | RelationshipRequestDescriptor) => {\n\t\tif (typeof relationshipDescriptor === 'string') {\n\t\t\treturn { name: relationshipDescriptor };\n\t\t}\n\n\t\treturn relationshipDescriptor;\n\t});\n}\n","export function removeQueryParams(uri: string): string {\n\tconst splittedUri: Array<string> = hasOnlyTemplatedQueryParameters(uri)\n\t\t? uri.split('{?')\n\t\t: uri.split('?');\n\n\tif (splittedUri.length > 1) {\n\t\tsplittedUri.pop();\n\t}\n\n\treturn splittedUri.join('');\n}\n\nfunction hasOnlyTemplatedQueryParameters(uri: string): boolean {\n\treturn uri.indexOf('{?') !== -1;\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { PlainHeaders } from '../../types/request-options.type';\n\nexport function setRequestHeader<HttpHeaders>(\n\tinitialHeaders: HttpHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): HttpHeaders;\nexport function setRequestHeader<PlainHeaders>(\n\tinitialHeaders: PlainHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): PlainHeaders;\nexport function setRequestHeader(\n\tinitialHeaders: HttpHeaders | PlainHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): HttpHeaders | PlainHeaders {\n\tif (initialHeaders instanceof HttpHeaders) {\n\t\treturn setHttpRequestHeader(initialHeaders, headerName, headerValue);\n\t}\n\n\treturn setObjectRequestHeader(initialHeaders, headerName, headerValue);\n}\n\nfunction setHttpRequestHeader(\n\tinitialHeaders: HttpHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): HttpHeaders {\n\tif (headerValue !== undefined && headerValue !== null) {\n\t\treturn initialHeaders.append(headerName, headerValue);\n\t}\n\n\treturn initialHeaders;\n}\n\nfunction setObjectRequestHeader(\n\tinitialHeaders: PlainHeaders,\n\theaderName: string,\n\theaderValue: string | Array<string>,\n): PlainHeaders {\n\tconst headers: PlainHeaders = {};\n\n\tObject.assign(headers, initialHeaders);\n\n\tif (headerValue !== undefined && headerValue !== null) {\n\t\theaders[headerName] = headerValue;\n\t}\n\n\treturn headers;\n}\n","export function isString(item: any): boolean {\n\treturn typeof item === 'string' || item instanceof String;\n}\n","export class SimpleHalModel {}\n","import { SimpleHalModel } from '../../models/simple-hal.model';\n\nexport function isSimpleHalModelInstance(classInstance: any): boolean {\n\tif (!classInstance) {\n\t\treturn false;\n\t}\n\n\tif (classInstance instanceof SimpleHalModel) {\n\t\treturn true;\n\t}\n\n\treturn isSimpleHalModelInstance(classInstance.prototype);\n}\n","import { isHalModelInstance } from '../is-hal-model-instance.ts/is-hal-model-instance.helper';\nimport { isSimpleHalModelInstance } from '../is-simple-hal-model-instance.ts/is-simple-hal-model-instance.helper';\n\nexport function isFunction(functionToCheck) {\n\treturn (\n\t\ttypeof functionToCheck === 'function' &&\n\t\t!isHalModelInstance(functionToCheck) &&\n\t\t!isSimpleHalModelInstance(functionToCheck)\n\t);\n}\n","import { Observable } from 'rxjs';\nimport { HttpResponse } from '@angular/common/http';\nimport {\n\tModelOptions,\n\tDEFAULT_MODEL_OPTIONS,\n\tDEFAULT_MODEL_TYPE,\n} from '../interfaces/model-options.interface';\nimport { RawHalResource } from '../interfaces/raw-hal-resource.interface';\nimport {\n\tATTRIBUTE_PROPERTIES_METADATA_KEY,\n\tHAL_MODEL_DOCUMENT_CLASS_METADATA_KEY,\n\tHAS_ONE_PROPERTIES_METADATA_KEY,\n\tHAS_MANY_PROPERTIES_METADATA_KEY,\n\tHEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY,\n} from '../constants/metadata.constant';\nimport { HalDocumentConstructor } from '../types/hal-document-construtor.type';\nimport {\n\tModelProperty,\n\tAttributeModelProperty,\n\tHasOneModelProperty,\n\tHasManyModelProperty,\n\tHeaderAttributeModelProperty,\n} from '../interfaces/model-property.interface';\nimport {\n\tLINKS_PROPERTY_NAME,\n\tSELF_PROPERTY_NAME,\n\tEMBEDDED_PROPERTY_NAME,\n} from '../constants/hal.constant';\nimport { LOCAL_DOCUMENT_ID_PREFIX, LOCAL_MODEL_ID_PREFIX } from '../constants/general.constant';\nimport { DatastoreService } from '../services/datastore/datastore.service';\nimport { RawHalLink } from '../interfaces/raw-hal-link.interface';\nimport { RawHalLinks } from '../interfaces/raw-hal-links.interface';\nimport { HalDocument } from '../classes/hal-document';\nimport { NetworkConfig } from '../interfaces/network-config.interface';\nimport { generateUUID } from '../helpers/uuid/uuid.helper';\nimport { getResponseHeader } from '../utils/get-response-headers/get-response-header.util';\nimport { isHalModelInstance } from '../helpers/is-hal-model-instance.ts/is-hal-model-instance.helper';\nimport { PlainHeaders, RequestOptions } from '../types/request-options.type';\nimport { ModelProperty as ModelPropertyEnum } from '../enums/model-property.enum';\nimport { GeneratePayloadOptions } from '../interfaces/generate-payload-options.interface';\nimport { CustomOptions } from '../interfaces/custom-options.interface';\nimport { ensureRelationshipRequestDescriptors } from '../utils/ensure-relationship-descriptors/ensure-relationship-descriptors.util';\nimport { RelationshipRequestDescriptor } from '../types/relationship-request-descriptor.type';\nimport { removeQueryParams } from '../utils/remove-query-params/remove-query-params.util';\nimport { setRequestHeader } from '../utils/set-request-header/set-request-header.util';\nimport { isString } from '../utils/is-string/is-string.util';\nimport { isFunction } from '../helpers/is-function/is-function.helper';\nimport { ModelEndpoints } from '../interfaces/model-endpoints.interface';\n\nexport abstract class HalModel<Datastore extends DatastoreService = DatastoreService> {\n\tprivate config: ModelOptions = this['config'] || DEFAULT_MODEL_OPTIONS;\n\tprivate temporarySelfLink: string = null;\n\tprivate localModelIdentificator: string;\n\tprivate internalHasManyDocumentIdentificators: { [K: string]: string } = {};\n\tpublic static readonly modelType: string = DEFAULT_MODEL_TYPE;\n\n\tconstructor(\n\t\tprotected resource: RawHalResource = {},\n\t\tprotected datastore: Datastore,\n\t\tpublic rawResponse?: HttpResponse<any>,\n\t) {\n\t\tthis.setLocalModelIdentificator();\n\t\tthis.parseAttributes(resource);\n\t\tthis.parseHeaderAttributes(rawResponse);\n\t\tthis.initializeHasOneProperties();\n\t\tthis.initialzieHasManyProperties();\n\t\tthis.extractEmbeddedProperties(resource);\n\t}\n\n\tpublic get uniqueModelIdentificator(): string {\n\t\treturn this.getUniqueModelIdentificator();\n\t}\n\n\tprotected getUniqueModelIdentificator(): string {\n\t\treturn this.selfLink || this.localModelIdentificator;\n\t}\n\n\tpublic get id(): string {\n\t\tif (!this.selfLink) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst selfLink: string = removeQueryParams(this.selfLink);\n\t\treturn selfLink.split('/').pop();\n\t}\n\n\tpublic get endpoint(): string {\n\t\treturn this.config.endpoint || 'unknownModelEndpoint';\n\t}\n\n\tpublic get modelEndpoints(): ModelEndpoints {\n\t\treturn null;\n\t}\n\n\tpublic get networkConfig(): NetworkConfig {\n\t\treturn this.config.networkConfig;\n\t}\n\n\tpublic get type(): string {\n\t\treturn this.config.type;\n\t}\n\n\tpublic getHalDocumentClass<T extends this>(): HalDocumentConstructor<T> {\n\t\treturn Reflect.getMetadata(HAL_MODEL_DOCUMENT_CLASS_METADATA_KEY, this.constructor);\n\t}\n\n\tpublic getRelationshipUrl(relationshipName: string): string {\n\t\tconst property: ModelProperty = this.getPropertyData(relationshipName);\n\n\t\tif (!property) {\n\t\t\tconsole.warn(`Relationship with the name ${relationshipName} is not defined on the model.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst fieldName: string = property.externalName || relationshipName;\n\t\treturn this.links[fieldName] ? this.links[fieldName].href : '';\n\t}\n\n\tpublic getPropertyData(propertyName: string): ModelProperty {\n\t\tconst attributeProperty = this.attributeProperties.find(\n\t\t\t(property: ModelProperty) => property.name === propertyName,\n\t\t);\n\t\tconst hasOneProperty = this.hasOneProperties.find(\n\t\t\t(property: ModelProperty) => property.name === propertyName,\n\t\t);\n\t\tconst hasManyProperty = this.hasManyProperties.find(\n\t\t\t(property: ModelProperty) => property.name === propertyName,\n\t\t);\n\t\treturn attributeProperty || hasOneProperty || hasManyProperty;\n\t}\n\n\tpublic getEmbeddedResource(resourceName: string): RawHalResource | undefined {\n\t\tconst property: ModelProperty = this.getPropertyData(resourceName);\n\n\t\tif (this.resource[property.externalName]) {\n\t\t\treturn this.resource[property.externalName];\n\t\t}\n\n\t\tif (!this.resource[EMBEDDED_PROPERTY_NAME]) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.resource[EMBEDDED_PROPERTY_NAME][property.externalName];\n\t}\n\n\tpublic save(\n\t\trequestOptions?: RequestOptions,\n\t\toptions: CustomOptions<this> = {},\n\t): Observable<this> {\n\t\tconst modelClass = Object.getPrototypeOf(this).constructor;\n\t\treturn this.datastore.save(this, modelClass, requestOptions, options);\n\t}\n\n\tpublic update(\n\t\trequestOptions?: RequestOptions,\n\t\toptions: CustomOptions<this> = {},\n\t): Observable<this> {\n\t\treturn this.datastore.update(this, requestOptions, options);\n\t}\n\n\tpublic delete(\n\t\trequestOptions?: RequestOptions,\n\t\toptions: CustomOptions<this> = {},\n\t): Observable<void> {\n\t\treturn this.datastore.delete(this, requestOptions, options);\n\t}\n\n\tpublic generatePayload(options: GeneratePayloadOptions = {}): object {\n\t\tconst attributePropertiesPayload: object = this.getAttributePropertiesPayload(options);\n\t\tconst relationshipsPayload: object = this.generateRelationshipsPayload(options);\n\t\tconst hasRelationshipLinks: boolean = Boolean(Object.keys(relationshipsPayload).length);\n\n\t\tconst payload = { ...attributePropertiesPayload };\n\n\t\tif (hasRelationshipLinks) {\n\t\t\tpayload[LINKS_PROPERTY_NAME] = relationshipsPayload;\n\t\t}\n\n\t\treturn payload;\n\t}\n\n\t// Used only when HalModels or HalDocument are passed when creating a new model\n\tprivate extractEmbeddedProperties(rawResource: RawHalResource): void {\n\t\tconst embeddedProperties: object = rawResource[EMBEDDED_PROPERTY_NAME] || {};\n\n\t\tObject.keys(embeddedProperties).forEach((propertyName: string) => {\n\t\t\tconst property: ModelProperty = this.getPropertyData(propertyName);\n\t\t\tconst isRelationshipProperty: boolean =\n\t\t\t\tproperty && (this.isHasOneProperty(property) || this.isHasManyProperty(property));\n\t\t\tconst propertyValue = embeddedProperties[propertyName];\n\t\t\tconst isHalModelOrDocument: boolean =\n\t\t\t\tisHalModelInstance(propertyValue) || propertyValue instanceof HalDocument;\n\n\t\t\tif (isRelationshipProperty && isHalModelOrDocument) {\n\t\t\t\tthis[property.name] = propertyValue;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getAttributePropertiesPayload(payloadOptions: GeneratePayloadOptions = {}): object {\n\t\tconst { specificFields, changedPropertiesOnly } = payloadOptions;\n\n\t\treturn this.attributeProperties.reduce((payload: object, property: AttributeModelProperty) => {\n\t\t\tconst propertyName: string = property.name;\n\t\t\tconst isPropertyExcludedFromPaylaod: boolean = property.excludeFromPayload;\n\t\t\tconst isSpecificFieldsSpecified: boolean = specificFields && Boolean(specificFields.length);\n\t\t\tconst isSpecificFieldsConditionSatisfied: boolean =\n\t\t\t\t!isSpecificFieldsSpecified || specificFields.indexOf(propertyName) !== -1;\n\n\t\t\tif (isPropertyExcludedFromPaylaod || !isSpecificFieldsConditionSatisfied) {\n\t\t\t\treturn payload;\n\t\t\t}\n\n\t\t\tconst externalPropertyName: string = property.externalName;\n\t\t\tconst propertyPayload: object = property.transformBeforeSave\n\t\t\t\t? property.transformBeforeSave(this[propertyName])\n\t\t\t\t: this[propertyName];\n\n\t\t\tif (changedPropertiesOnly) {\n\t\t\t\tconst isPropertyChanged: boolean = propertyPayload !== this.resource[propertyName];\n\n\t\t\t\tif (isPropertyChanged) {\n\t\t\t\t\tpayload[externalPropertyName] = propertyPayload;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpayload[externalPropertyName] = propertyPayload;\n\t\t\t}\n\n\t\t\treturn payload;\n\t\t}, {});\n\t}\n\n\tprivate generateHasOnePropertyPayload(property: HasOneModelProperty): object {\n\t\tconst payload: object = {};\n\n\t\tconst propertyName: string = property.name;\n\t\tconst externalPropertyName: string = property.externalName;\n\n\t\tif (!this[propertyName].selfLink) {\n\t\t\treturn payload;\n\t\t}\n\n\t\tpayload[externalPropertyName] = {\n\t\t\thref: this[propertyName].selfLink,\n\t\t};\n\n\t\treturn payload;\n\t}\n\n\tprivate generateHasManyPropertyPayload(property: HasManyModelProperty): object {\n\t\tconst payload: object = {};\n\t\tconst hasManyPropertyLinks = [];\n\n\t\tconst propertyName: string = property.name;\n\t\tconst externalPropertyName: string = property.externalName;\n\n\t\t// TODO check if this[propertyName] is an array of models or just a HalDocument\n\t\tthis[propertyName].forEach((model: HalModel) => {\n\t\t\tif (model && model.selfLink) {\n\t\t\t\thasManyPropertyLinks.push({\n\t\t\t\t\thref: model.selfLink,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (hasManyPropertyLinks.length) {\n\t\t\tpayload[externalPropertyName] = hasManyPropertyLinks;\n\t\t}\n\n\t\treturn payload;\n\t}\n\n\tprivate generateRelationshipsPayload(payloadOptions: GeneratePayloadOptions = {}): object {\n\t\tconst { specificFields } = payloadOptions;\n\t\tconst isSpecificFieldsSpecified: boolean = specificFields && Boolean(specificFields.length);\n\n\t\treturn [...this.hasOneProperties, ...this.hasManyProperties]\n\t\t\t.filter((property: HasOneModelProperty) => property.includeInPayload)\n\t\t\t.filter(\n\t\t\t\t(property: HasOneModelProperty) =>\n\t\t\t\t\t!isSpecificFieldsSpecified || specificFields.indexOf(property.name) !== -1,\n\t\t\t)\n\t\t\t.reduce((payload: object, property: HasOneModelProperty) => {\n\t\t\t\tconst propertyName: string = property.name;\n\n\t\t\t\tif (!this[propertyName]) {\n\t\t\t\t\treturn payload;\n\t\t\t\t}\n\n\t\t\t\tconst isHasOneProperty: boolean = property.type === ModelPropertyEnum.HasOne;\n\t\t\t\tlet propertyPayload: object;\n\n\t\t\t\tif (isHasOneProperty) {\n\t\t\t\t\tpropertyPayload = this.generateHasOnePropertyPayload(property);\n\t\t\t\t} else {\n\t\t\t\t\tpropertyPayload = this.generateHasManyPropertyPayload(property);\n\t\t\t\t}\n\n\t\t\t\tObject.assign(payload, propertyPayload);\n\n\t\t\t\treturn payload;\n\t\t\t}, {});\n\t}\n\n\tpublic generateHeaders(): PlainHeaders {\n\t\treturn this.headerAttributeProperties.reduce(\n\t\t\t(headers: PlainHeaders, property: HeaderAttributeModelProperty) => {\n\t\t\t\tconst externalPropertyName: string = property.externalName;\n\t\t\t\tconst propertyName: string = property.name;\n\t\t\t\tconst propertyValue = property.transformBeforeSave\n\t\t\t\t\t? property.transformBeforeSave(this[propertyName])\n\t\t\t\t\t: this[propertyName];\n\n\t\t\t\treturn setRequestHeader(headers, externalPropertyName, propertyValue);\n\t\t\t},\n\t\t\t{},\n\t\t);\n\t}\n\n\tpublic get isSaved(): boolean {\n\t\treturn Boolean(this.id);\n\t}\n\n\tpublic fetchRelationships(\n\t\trelationships:\n\t\t\t| string\n\t\t\t| RelationshipRequestDescriptor\n\t\t\t| Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions = {},\n\t): Observable<this> {\n\t\tconst relationshipsArray: Array<string | RelationshipRequestDescriptor> = [].concat(\n\t\t\trelationships,\n\t\t);\n\t\tconst relationshipDescriptors: Array<RelationshipRequestDescriptor> =\n\t\t\tensureRelationshipRequestDescriptors(relationshipsArray);\n\t\treturn this.datastore.fetchModelRelationships(this, relationshipDescriptors, requestOptions);\n\t}\n\n\tpublic getRelationship<T extends HalModel>(relationshipName: string): T | HalDocument<T> {\n\t\tconst property: ModelProperty = this.getPropertyData(relationshipName);\n\n\t\tconst isHasOneProperty: boolean = property.type === ModelPropertyEnum.HasOne;\n\n\t\tif (isHasOneProperty) {\n\t\t\treturn this.getHasOneRelationship(property) as T;\n\t\t}\n\n\t\treturn this.getHasManyRelationship(property);\n\t}\n\n\tprivate get attributeProperties(): Array<AttributeModelProperty> {\n\t\treturn Reflect.getMetadata(ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate get headerAttributeProperties(): Array<HeaderAttributeModelProperty> {\n\t\treturn Reflect.getMetadata(HEADER_ATTRIBUTE_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate get hasOneProperties(): Array<HasOneModelProperty> {\n\t\treturn Reflect.getMetadata(HAS_ONE_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate get hasManyProperties(): Array<HasManyModelProperty> {\n\t\treturn Reflect.getMetadata(HAS_MANY_PROPERTIES_METADATA_KEY, this) || [];\n\t}\n\n\tprivate initializeHasOneProperties(): void {\n\t\tthis.hasOneProperties.forEach((property: ModelProperty) => {\n\t\t\tObject.defineProperty(this, property.name, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget() {\n\t\t\t\t\treturn this.getHasOneRelationship(property);\n\t\t\t\t},\n\t\t\t\tset<T extends HalModel>(value: T) {\n\t\t\t\t\tif (isHalModelInstance(value) || !value) {\n\t\t\t\t\t\tthis.replaceRelationshipModel(property.externalName, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t`Only HalModel instances can be assigned to property: ${property.name}. This will become an error in the next ngx-hal release`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// throw new Error(`Only HalModel instances can be assigned to property: ${property.name}`);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate initialzieHasManyProperties(): void {\n\t\tthis.hasManyProperties.forEach((property: ModelProperty) => {\n\t\t\tObject.defineProperty(this, property.name, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget() {\n\t\t\t\t\tconst halDocument: HalDocument<HalModel> = this.getHasManyRelationship(property);\n\n\t\t\t\t\tif (!halDocument) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn halDocument.models;\n\t\t\t\t},\n\t\t\t\tset<T extends HalModel>(value: Array<T>) {\n\t\t\t\t\tconst existingHalDocument: HalDocument<HalModel> = this.getHasManyRelationship(property);\n\n\t\t\t\t\tif (existingHalDocument) {\n\t\t\t\t\t\texistingHalDocument.models = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst halDocumentRaw = {\n\t\t\t\t\t\t\tmodels: value,\n\t\t\t\t\t\t\tuniqueModelIdentificator: `${LOCAL_DOCUMENT_ID_PREFIX}-${generateUUID()}`,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.updateHasManyDocumentIdentificator(\n\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\thalDocumentRaw.uniqueModelIdentificator,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.datastore.storage.save(halDocumentRaw);\n\t\t\t\t\t\tthis.replaceRelationshipModel(property.externalName, halDocumentRaw);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate setProperty(\n\t\tmodelProperty: AttributeModelProperty | HeaderAttributeModelProperty,\n\t\trawPropertyValue: any,\n\t): void {\n\t\tif (isString(modelProperty.propertyClass)) {\n\t\t\tthis[modelProperty.name] = this.datastore.findModelClassByType(modelProperty.propertyClass);\n\t\t} else if (isFunction(modelProperty.propertyClass)) {\n\t\t\tconst propertyClass = modelProperty.propertyClass(rawPropertyValue);\n\t\t\tthis[modelProperty.name] = new propertyClass(rawPropertyValue);\n\t\t} else if (modelProperty.propertyClass) {\n\t\t\tthis[modelProperty.name] = new modelProperty.propertyClass(rawPropertyValue);\n\t\t} else if (modelProperty.transformResponseValue) {\n\t\t\tthis[modelProperty.name] = modelProperty.transformResponseValue(rawPropertyValue);\n\t\t} else {\n\t\t\tthis[modelProperty.name] = rawPropertyValue;\n\t\t}\n\t}\n\n\tprivate parseAttributes(resource: RawHalResource): void {\n\t\tthis.attributeProperties.forEach((attributeProperty: AttributeModelProperty) => {\n\t\t\tconst rawPropertyValue: any = resource[attributeProperty.externalName];\n\t\t\tthis.setProperty(attributeProperty, rawPropertyValue);\n\t\t});\n\t}\n\n\tprivate parseHeaderAttributes(response: HttpResponse<any>): void {\n\t\tthis.headerAttributeProperties.forEach(\n\t\t\t(headerAttributeProperty: HeaderAttributeModelProperty) => {\n\t\t\t\tconst rawPropertyValue: any = getResponseHeader(\n\t\t\t\t\tresponse,\n\t\t\t\t\theaderAttributeProperty.externalName,\n\t\t\t\t);\n\t\t\t\tthis.setProperty(headerAttributeProperty, rawPropertyValue);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate getHasOneRelationship<T extends HalModel>(property: ModelProperty): T {\n\t\tconst relationshipLinks: RawHalLink = this.links[property.externalName];\n\n\t\tif (!relationshipLinks) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelIdentificator: string = relationshipLinks.href;\n\n\t\treturn this.datastore.storage.get(modelIdentificator);\n\t}\n\n\tprivate getHasManyRelationship<T extends HalModel>(property: ModelProperty): HalDocument<T> {\n\t\tconst uniqueRelationshipIdentificator: string =\n\t\t\tthis.hasManyDocumentIdentificators[property.externalName];\n\n\t\tif (!uniqueRelationshipIdentificator) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst halDocument: HalDocument<T> = this.datastore.storage.get(\n\t\t\tuniqueRelationshipIdentificator,\n\t\t) as HalDocument<T>;\n\n\t\tif (!halDocument) {\n\t\t\tconsole.warn(`Has many relationship ${property.name} is not fetched.`);\n\t\t\treturn;\n\t\t}\n\n\t\treturn halDocument;\n\t}\n\n\tpublic get links(): RawHalLinks | { [relationshipName: string]: RawHalLink } {\n\t\treturn this.resource[LINKS_PROPERTY_NAME] || {};\n\t}\n\n\tpublic get selfLink(): string {\n\t\treturn this.links && this.links[SELF_PROPERTY_NAME]\n\t\t\t? this.links[SELF_PROPERTY_NAME].href\n\t\t\t: this.temporarySelfLink;\n\t}\n\n\tpublic set selfLink(link: string) {\n\t\tthis.temporarySelfLink = link;\n\t}\n\n\tprivate replaceRelationshipModel<T extends HalModel>(\n\t\trelationshipName: string,\n\t\trelationshipModel: T,\n\t): void {\n\t\tthis.resource[LINKS_PROPERTY_NAME] = this.resource[LINKS_PROPERTY_NAME] || {\n\t\t\tself: null,\n\t\t};\n\n\t\tlet relationshipLink = null;\n\t\tif (relationshipModel) {\n\t\t\trelationshipLink = {\n\t\t\t\thref: relationshipModel.uniqueModelIdentificator || relationshipModel.selfLink,\n\t\t\t};\n\t\t}\n\n\t\tthis.resource[LINKS_PROPERTY_NAME][relationshipName] = relationshipLink;\n\n\t\t// Save the model to the storage if it's not already there\n\t\tif (!this[relationshipName] && relationshipModel) {\n\t\t\t// TODO should the model be removed from the storage if relationshipModel does not exist?\n\t\t\tthis.datastore.storage.save(relationshipModel);\n\t\t}\n\t}\n\n\tprivate setLocalModelIdentificator(): void {\n\t\tthis.localModelIdentificator = `${LOCAL_MODEL_ID_PREFIX}-${generateUUID()}`;\n\t}\n\n\tprivate isHasOneProperty(property: ModelOptions): boolean {\n\t\treturn property.type === ModelPropertyEnum.HasOne;\n\t}\n\n\tprivate isHasManyProperty(property: ModelOptions): boolean {\n\t\treturn property.type === ModelPropertyEnum.HasMany;\n\t}\n\n\tpublic updateHasManyDocumentIdentificator(\n\t\tproperty: HasManyModelProperty,\n\t\tidentificator: string,\n\t): void {\n\t\tthis.hasManyDocumentIdentificators[property.externalName] = identificator;\n\t}\n\n\tpublic set hasManyDocumentIdentificators(hasManyDocumentIdentificators: { [K: string]: string }) {\n\t\tthis.internalHasManyDocumentIdentificators = Object.assign({}, hasManyDocumentIdentificators);\n\t}\n\n\tpublic get hasManyDocumentIdentificators(): { [K: string]: string } {\n\t\treturn this.internalHasManyDocumentIdentificators;\n\t}\n}\n","import { RawHalResource } from '../interfaces/raw-hal-resource.interface';\n\nexport abstract class Pagination {\n\tconstructor(protected rawResource: RawHalResource = {}) {}\n}\n","import { HalModel } from '../../models/hal.model';\nimport { HalDocument } from './../hal-document';\nimport { HttpResponse } from '@angular/common/http';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { Observable } from 'rxjs';\nimport { ModelConstructor, ModelConstructorFn } from '../../types/model-constructor.type';\n\nexport abstract class HalStorage {\n\tprotected internalStorage: { [K: string]: any } = {};\n\n\tpublic abstract save<T extends HalModel>(\n\t\tmodel: T | HalDocument<T>,\n\t\tresponse?: HttpResponse<T>,\n\t\talternateUniqueIdentificators?: Array<string>,\n\t): void;\n\n\tpublic abstract get<T extends HalModel>(uniqueModelIdentificator: string): T | HalDocument<T>;\n\n\tpublic saveAll<T extends HalModel>(models: Array<T>, savePartialModels: boolean = false): void {\n\t\tmodels.forEach((model: T) => {\n\t\t\tif (savePartialModels || !this.get(model.uniqueModelIdentificator)) {\n\t\t\t\tthis.save(model);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic remove(model: HalModel): void {\n\t\tdelete this.internalStorage[model.uniqueModelIdentificator];\n\t}\n\n\tpublic enrichRequestOptions(\n\t\tuniqueModelIdentificator: string,\n\t\trequestOptions: RequestOptions,\n\t): void {\n\t\t// noop\n\t}\n\n\tpublic makeGetRequestWrapper?<T extends HalModel>(\n\t\turls: { originalUrl: string; cleanUrl: string; urlWithParams: string },\n\t\tcachedResource: T | HalDocument<T>,\n\t\toriginalGetRequest$: Observable<T | HalDocument<T>>,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T | HalDocument<T>>;\n}\n","import { HalModel } from '../../models/hal.model';\nimport { HalDocument } from './../hal-document';\nimport { HttpResponse } from '@angular/common/http';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { HalStorage } from './hal-storage';\nimport { setRequestHeader } from '../../utils/set-request-header/set-request-header.util';\n\nexport interface EtagStorageModel<T extends HalModel> {\n\tmodel: T | HalDocument<T>;\n\tetag: string;\n}\n\nexport class EtagHalStorage extends HalStorage {\n\tpublic save<T extends HalModel>(\n\t\tmodel: T | HalDocument<T>,\n\t\tresponse?: HttpResponse<T>,\n\t\talternateUniqueIdentificators: Array<string> = [],\n\t): Array<EtagStorageModel<T>> {\n\t\tconst storedModels: Array<EtagStorageModel<T>> = [];\n\n\t\tconst identificators: Array<string> = [].concat(alternateUniqueIdentificators);\n\t\tidentificators.push(model.uniqueModelIdentificator);\n\n\t\tidentificators.filter(Boolean).forEach((identificator: string) => {\n\t\t\tconst storedModel = {\n\t\t\t\tmodel,\n\t\t\t\tetag: this.getEtagFromResponse(response),\n\t\t\t};\n\t\t\tthis.internalStorage[identificator] = storedModel;\n\t\t\tstoredModels.push(storedModel);\n\t\t});\n\n\t\treturn storedModels;\n\t}\n\n\tpublic get<T extends HalModel>(uniqueModelIdentificator: string): T | HalDocument<T> {\n\t\tconst localModel: EtagStorageModel<T> = this.getRawStorageModel(uniqueModelIdentificator);\n\t\treturn localModel ? localModel.model : undefined;\n\t}\n\n\tpublic enrichRequestOptions(\n\t\tuniqueModelIdentificator: string,\n\t\trequestOptions: RequestOptions,\n\t): void {\n\t\tconst storageModel: EtagStorageModel<any> = this.getRawStorageModel(uniqueModelIdentificator);\n\n\t\tif (!storageModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (storageModel.etag) {\n\t\t\trequestOptions.headers = setRequestHeader(\n\t\t\t\trequestOptions.headers,\n\t\t\t\t'If-None-Match',\n\t\t\t\tstorageModel.etag,\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected getRawStorageModel<T extends HalModel>(\n\t\tuniqueModelIdentificator: string,\n\t): EtagStorageModel<T> {\n\t\treturn this.internalStorage[uniqueModelIdentificator];\n\t}\n\n\tprivate getEtagFromResponse<T>(response: HttpResponse<T>): string {\n\t\tif (!response || !response.headers || !response.headers.get) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn response.headers.get('ETag');\n\t}\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { HalModel } from '../../models/hal.model';\nimport { HalDocument } from './../hal-document';\nimport { HalStorage } from './hal-storage';\n\nexport class SimpleHalStorage extends HalStorage {\n\tpublic save<T extends HalModel>(\n\t\tmodel: T | HalDocument<T>,\n\t\tresponse?: HttpResponse<T>,\n\t\talternateUniqueIdentificators: Array<string> = [],\n\t): void {\n\t\tconst identificators: Array<string> = [].concat(alternateUniqueIdentificators);\n\t\tidentificators.push(model.uniqueModelIdentificator);\n\n\t\tidentificators.filter(Boolean).forEach((identificator: string) => {\n\t\t\tthis.internalStorage[identificator] = model;\n\t\t});\n\t}\n\n\tpublic get<T extends HalModel>(uniqueModelIdentificator: string): T | HalDocument<T> {\n\t\treturn this.internalStorage[uniqueModelIdentificator];\n\t}\n}\n","export enum CacheStrategy {\n\tCUSTOM = 'CUSTOM',\n\tETAG = 'ETAG',\n\tNONE = 'NONE',\n}\n","export class ModelServiceOptions {}\n","export const DEFAULT_REQUEST_OPTIONS = {\n\tobserve: 'response',\n\tparams: {},\n};\n","import { CacheStrategy } from '../../enums/cache-strategy.enum';\nimport { SimpleHalStorage } from '../../classes/hal-storage/simple-hal-storage';\nimport { EtagHalStorage } from '../../classes/hal-storage/etag-hal-storage';\nimport { HalStorage } from './hal-storage';\n\nexport type HalStorageType = SimpleHalStorage | EtagHalStorage;\n\nexport function createHalStorage(\n\tcacheStrategy: CacheStrategy = CacheStrategy.NONE,\n\tstorageInstance: HalStorage,\n): HalStorageType {\n\tlet storage: HalStorageType;\n\n\tswitch (cacheStrategy) {\n\t\tcase CacheStrategy.NONE:\n\t\t\tstorage = new SimpleHalStorage();\n\t\t\tbreak;\n\t\tcase CacheStrategy.ETAG:\n\t\t\tstorage = new EtagHalStorage();\n\t\t\tbreak;\n\t\tcase CacheStrategy.CUSTOM:\n\t\t\tif (!storageInstance) {\n\t\t\t\tthrow new Error('When CacheStrategy.CUSTOM is specified, config.storage is required.');\n\t\t\t}\n\t\t\tstorage = storageInstance;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown CacheStrategy: ${cacheStrategy}`);\n\t\t\tbreak;\n\t}\n\n\treturn storage;\n}\n","export function makeQueryParamsString(params: object, sortAlphabetically: boolean = false): string {\n\tlet paramKeys: Array<string> = Object.keys(params);\n\n\tif (sortAlphabetically) {\n\t\tparamKeys = paramKeys.sort();\n\t}\n\n\tconst queryParamsString: string = paramKeys.reduce(\n\t\t(paramsString: string, queryParamKey: string) => {\n\t\t\treturn `${paramsString}&${queryParamKey}=${params[queryParamKey]}`;\n\t\t},\n\t\t'',\n\t);\n\n\treturn queryParamsString.slice(1);\n}\n","export function getQueryParams(url: string): object {\n\tconst queryParams: object = {};\n\tconst parser: HTMLAnchorElement = document.createElement('a');\n\tparser.href = url;\n\n\tconst query: string = parser.search.substring(1);\n\n\tif (!query) {\n\t\treturn {};\n\t}\n\n\tconst params: Array<string> = query.split('&');\n\n\tparams.forEach((param: string) => {\n\t\tconst [key, value] = param.split('=');\n\n\t\tif (queryParams[key]) {\n\t\t\tqueryParams[key] = [decodeURIComponentWithErrorHandling(value)].concat(queryParams[key]);\n\t\t} else {\n\t\t\tconst items: Array<string> = value.split(',');\n\t\t\tif (items.length === 1) {\n\t\t\t\tqueryParams[key] = decodeURIComponentWithErrorHandling(value);\n\t\t\t} else {\n\t\t\t\tqueryParams[key] = items.map((urlParam: string) =>\n\t\t\t\t\tdecodeURIComponentWithErrorHandling(urlParam),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn queryParams;\n}\n\nexport function decodeURIComponentWithErrorHandling(value: string): string {\n\ttry {\n\t\treturn decodeURIComponent(value);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\treturn value;\n\t}\n}\n","import { HttpParams } from '@angular/common/http';\n\nexport function makeHttpParams(params: object, httpParamsOptions?: object): HttpParams {\n\tlet httpParams: HttpParams = new HttpParams(httpParamsOptions);\n\n\tObject.keys(params).forEach((paramKey: string) => {\n\t\thttpParams = httpParams.append(paramKey, params[paramKey]);\n\t});\n\n\treturn httpParams;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport { Observable, combineLatest, of, throwError, from } from 'rxjs';\nimport { map, flatMap, tap, catchError, mergeMap, delay } from 'rxjs/operators';\nimport * as UriTemplates from 'uri-templates';\nimport { NetworkConfig, DEFAULT_NETWORK_CONFIG } from '../../interfaces/network-config.interface';\nimport { HalModel } from '../../models/hal.model';\nimport { HalDocument } from '../../classes/hal-document';\nimport { ModelConstructor, ModelConstructorFn } from '../../types/model-constructor.type';\nimport { HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY } from '../../constants/metadata.constant';\nimport { LOCAL_MODEL_ID_PREFIX, LOCAL_DOCUMENT_ID_PREFIX } from '../../constants/general.constant';\nimport { HalDocumentConstructor } from '../../types/hal-document-construtor.type';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { DEFAULT_REQUEST_OPTIONS } from '../../constants/request.constant';\nimport { RawHalResource } from '../../interfaces/raw-hal-resource.interface';\nimport { ModelProperty, AttributeModelProperty } from '../../interfaces/model-property.interface';\nimport { ModelProperty as ModelPropertyEnum } from '../../enums/model-property.enum';\nimport { RawHalLink } from '../../interfaces/raw-hal-link.interface';\nimport { PaginationConstructor } from '../../types/pagination.type';\nimport { getResponseHeader } from '../../utils/get-response-headers/get-response-header.util';\nimport { CacheStrategy } from '../../enums/cache-strategy.enum';\nimport { createHalStorage } from '../../classes/hal-storage/hal-storage-factory';\nimport { RequestsOptions } from '../../interfaces/requests-options.interface';\nimport { makeQueryParamsString } from '../../helpers/make-query-params-string/make-query-params-string.helper';\nimport { removeQueryParams } from '../../utils/remove-query-params/remove-query-params.util';\nimport {\n\tgetQueryParams,\n\tdecodeURIComponentWithErrorHandling,\n} from '../../utils/get-query-params/get-query-params.util';\nimport { isHalModelInstance } from '../../helpers/is-hal-model-instance.ts/is-hal-model-instance.helper';\nimport { makeHttpParams } from '../../helpers/make-http-params/make-http-params.helper';\nimport { CustomOptions } from '../../interfaces/custom-options.interface';\nimport { deepmergeWrapper } from '../../utils/deepmerge-wrapper';\nimport { RelationshipRequestDescriptor } from '../../types/relationship-request-descriptor.type';\nimport { ensureRelationshipRequestDescriptors } from '../../utils/ensure-relationship-descriptors/ensure-relationship-descriptors.util';\nimport { RelationshipDescriptorMappings } from '../../types/relationship-descriptor-mappings.type';\nimport { EMBEDDED_PROPERTY_NAME } from '../../constants/hal.constant';\nimport { HalStorage } from '../../classes/hal-storage/hal-storage';\nimport { isString } from '../../utils/is-string/is-string.util';\nimport { isFunction } from '../../helpers/is-function/is-function.helper';\n\nconst UriTemplate = UriTemplates.default || UriTemplates;\n\n@Injectable()\nexport class DatastoreService {\n\tpublic networkConfig: NetworkConfig = this['networkConfig'] || DEFAULT_NETWORK_CONFIG;\n\tprivate _cacheStrategy: CacheStrategy;\n\t// tslint:disable-next-line\n\tprivate _storage: HalStorage; // set by Config decorator\n\tprivate internalStorage = createHalStorage(this.cacheStrategy, this.halStorage);\n\tprotected httpParamsOptions?: object;\n\tpublic paginationClass: PaginationConstructor;\n\tpublic modelTypes = [];\n\n\tconstructor(public http: HttpClient) {}\n\n\tprivate getHalDocumentClass<T extends HalModel>(): HalDocumentConstructor<T> {\n\t\treturn (\n\t\t\tReflect.getMetadata(HAL_DATASTORE_DOCUMENT_CLASS_METADATA_KEY, this.constructor) ||\n\t\t\tHalDocument\n\t\t);\n\t}\n\n\tpublic buildUrl(model?: HalModel): string {\n\t\tconst hostUrl: string = this.buildHostUrl(model);\n\n\t\tconst urlParts: Array<string> = [hostUrl, model ? model.endpoint : null];\n\n\t\tif (model && model.id) {\n\t\t\turlParts.push(model.id);\n\t\t}\n\n\t\treturn urlParts.filter((urlPart) => urlPart).join('/');\n\t}\n\n\tpublic createHalDocument<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\trawResponse?: HttpResponse<any>,\n\t): HalDocument<T> {\n\t\tconst propertyClass: ModelConstructor<T> = isFunction(modelClass)\n\t\t\t? (modelClass as ModelConstructorFn<T>)(rawResource)\n\t\t\t: (modelClass as ModelConstructor<T>);\n\t\tconst representantiveModel: T = new propertyClass({}, this);\n\t\tconst halDocumentClass =\n\t\t\trepresentantiveModel.getHalDocumentClass() || this.getHalDocumentClass<T>();\n\t\treturn new halDocumentClass(rawResource, rawResponse, propertyClass, this);\n\t}\n\n\tpublic findOne<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tmodelId: string,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t): Observable<T> {\n\t\tconst url: string = customUrl || this.buildModelUrl(modelClass, modelId);\n\n\t\tconst requestsOptions: RequestsOptions = {\n\t\t\tmainRequest: requestOptions,\n\t\t\tsubsequentRequests: subsequentRequestsOptions,\n\t\t};\n\n\t\tconst relationshipDescriptors: Array<RelationshipRequestDescriptor> =\n\t\t\tensureRelationshipRequestDescriptors(includeRelationships);\n\n\t\treturn this.handleGetRequestWithRelationships(\n\t\t\turl,\n\t\t\trequestsOptions,\n\t\t\tmodelClass,\n\t\t\ttrue,\n\t\t\trelationshipDescriptors,\n\t\t);\n\t}\n\n\tpublic fetchModelRelationships<T extends HalModel>(\n\t\tmodel: T,\n\t\trelationshipNames: RelationshipRequestDescriptor | Array<RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions = {},\n\t): Observable<T> {\n\t\tconst ensuredRelationshipNames: Array<RelationshipRequestDescriptor> = [].concat(\n\t\t\trelationshipNames,\n\t\t);\n\n\t\tconst relationships$: Array<Observable<any>> = this.fetchRelationships(\n\t\t\tmodel,\n\t\t\tensuredRelationshipNames,\n\t\t\trequestOptions,\n\t\t);\n\n\t\tif (!relationships$.length) {\n\t\t\treturn of(model);\n\t\t}\n\n\t\treturn combineLatest(relationships$).pipe(map(() => model));\n\t}\n\n\tprivate fetchRelationships<T extends HalModel>(\n\t\tmodel: T,\n\t\trelationshipDescriptors: Array<RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions = {}, // \"global\" options for all requests\n\t): Array<Observable<any>> {\n\t\tconst relationshipCalls: Array<Observable<any>> = [];\n\n\t\tconst relationshipMappings: RelationshipDescriptorMappings =\n\t\t\tthis.extractCurrentLevelRelationships(relationshipDescriptors);\n\n\t\tfor (const relationshipName in relationshipMappings) {\n\t\t\tconst url: string = model.getRelationshipUrl(relationshipName);\n\t\t\tconst property: ModelProperty = model.getPropertyData(relationshipName);\n\n\t\t\tif (!property) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet modelClass = property.propertyClass;\n\n\t\t\tif (isString(modelClass)) {\n\t\t\t\tmodelClass = this.findModelClassByType(modelClass);\n\t\t\t}\n\n\t\t\tconst isSingleResource: boolean =\n\t\t\t\tproperty.type === ModelPropertyEnum.Attribute || property.type === ModelPropertyEnum.HasOne;\n\n\t\t\t// Checks if the relationship is already embdedded inside the emdedded property, or\n\t\t\t// as a part of attribute properties\n\t\t\tconst embeddedRelationship: RawHalResource = model.getEmbeddedResource(relationshipName);\n\t\t\tlet fetchedModels: T | HalDocument<T>;\n\n\t\t\tif (embeddedRelationship) {\n\t\t\t\tfetchedModels = this.processRawResource(\n\t\t\t\t\tembeddedRelationship,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\tisSingleResource,\n\t\t\t\t\tmodel.rawResponse,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!url ||\n\t\t\t\turl.startsWith(LOCAL_MODEL_ID_PREFIX) ||\n\t\t\t\turl.startsWith(LOCAL_DOCUMENT_ID_PREFIX)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst relationshipRequestOptions = relationshipMappings[relationshipName]\n\t\t\t\t.originalRelationshipDescriptor\n\t\t\t\t? relationshipMappings[relationshipName].originalRelationshipDescriptor.options\n\t\t\t\t: null;\n\t\t\tconst requestsOptions: RequestsOptions = {\n\t\t\t\tmainRequest: relationshipRequestOptions || requestOptions,\n\t\t\t\tsubsequentRequests: requestOptions,\n\t\t\t};\n\n\t\t\tconst relationshipCall$: Observable<any> = this.handleGetRequestWithRelationships(\n\t\t\t\turl,\n\t\t\t\trequestsOptions,\n\t\t\t\tmodelClass,\n\t\t\t\tisSingleResource,\n\t\t\t\trelationshipMappings[relationshipName].childrenRelationships,\n\t\t\t\tfetchedModels,\n\t\t\t).pipe(\n\t\t\t\tmap((fetchedRelation) => {\n\t\t\t\t\tconst externalRelationshipName: string = property.externalName;\n\n\t\t\t\t\tif (isHalModelInstance(model)) {\n\t\t\t\t\t\tif (property.type === ModelPropertyEnum.HasOne) {\n\t\t\t\t\t\t\t// The original relationship URL on the parent model must be replaced because\n\t\t\t\t\t\t\t// the actual relationship URL may have some query parameteres attached to it\n\t\t\t\t\t\t\tmodel.links[externalRelationshipName].href = fetchedRelation.uniqueModelIdentificator;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmodel.updateHasManyDocumentIdentificator(\n\t\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\t\tfetchedRelation.uniqueModelIdentificator,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// In case of a HalDocument, halDocument.models may contain model instances which are not the same as the models\n\t\t\t\t\t\t\t// saved in local storage. That happens if the same models are fetch beforehand through another API call.\n\t\t\t\t\t\t\t// In that case, hasManyDocumentIdentificators of the models from HalDocument must be updated as well.\n\t\t\t\t\t\t\tconst localModel: T = this.storage.get(model.uniqueModelIdentificator);\n\t\t\t\t\t\t\tif (localModel && localModel !== model) {\n\t\t\t\t\t\t\t\tlocalModel.updateHasManyDocumentIdentificator(\n\t\t\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\t\t\tfetchedRelation.uniqueModelIdentificator,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fetchedRelation;\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\trelationshipCalls.push(relationshipCall$);\n\t\t}\n\n\t\treturn relationshipCalls;\n\t}\n\n\tprivate extractCurrentLevelRelationships(\n\t\trelationshipDescriptors: Array<RelationshipRequestDescriptor>,\n\t): RelationshipDescriptorMappings {\n\t\treturn relationshipDescriptors.reduce(\n\t\t\t(\n\t\t\t\trelationships: RelationshipDescriptorMappings,\n\t\t\t\tcurrentRelationshipDescriptor: RelationshipRequestDescriptor,\n\t\t\t) => {\n\t\t\t\tconst relationshipNameParts: Array<string> = currentRelationshipDescriptor.name.split('.');\n\t\t\t\tconst currentLevelRelationship: string = relationshipNameParts.shift();\n\n\t\t\t\trelationships[currentLevelRelationship] = relationships[currentLevelRelationship] || {\n\t\t\t\t\tchildrenRelationships: [],\n\t\t\t\t};\n\t\t\t\tif (relationshipNameParts.length) {\n\t\t\t\t\trelationships[currentLevelRelationship].childrenRelationships.push({\n\t\t\t\t\t\tname: relationshipNameParts.join('.'),\n\t\t\t\t\t\toptions: currentRelationshipDescriptor.options,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\trelationships[currentLevelRelationship].originalRelationshipDescriptor =\n\t\t\t\t\t\tcurrentRelationshipDescriptor;\n\t\t\t\t}\n\n\t\t\t\treturn relationships;\n\t\t\t},\n\t\t\t{},\n\t\t);\n\t}\n\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: true,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t): Observable<T>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: false,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t): Observable<HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t): Observable<T | HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: true,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: T | HalDocument<T>,\n\t): Observable<T>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: T,\n\t): Observable<T>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: HalDocument<T>,\n\t): Observable<HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\tfetchedModels: T | HalDocument<T>,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T | HalDocument<T>>;\n\tprivate handleGetRequestWithRelationships<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor> = [],\n\t\tfetchedModels: T | HalDocument<T> = null,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T | HalDocument<T>> {\n\t\tif (fetchedModels) {\n\t\t\treturn of(fetchedModels);\n\t\t}\n\n\t\tconst httpRequest$ = this.makeGetRequestWrapper(\n\t\t\turl,\n\t\t\trequestsOptions,\n\t\t\tmodelClass,\n\t\t\tisSingleResource,\n\t\t\tstorePartialModels,\n\t\t);\n\n\t\tif (includeRelationships.length) {\n\t\t\treturn httpRequest$.pipe(\n\t\t\t\tflatMap((model: T | HalDocument<T>) => {\n\t\t\t\t\tconst models: Array<T> = isSingleResource\n\t\t\t\t\t\t? ([model] as Array<T>)\n\t\t\t\t\t\t: (model as HalDocument<T>).models;\n\n\t\t\t\t\tconst relationshipCalls: Array<Observable<any>> = this.triggerFetchingModelRelationships(\n\t\t\t\t\t\tmodels,\n\t\t\t\t\t\tincludeRelationships,\n\t\t\t\t\t\trequestsOptions.subsequentRequests,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!relationshipCalls.length) {\n\t\t\t\t\t\treturn of(model);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn combineLatest(relationshipCalls).pipe(map(() => model));\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn httpRequest$;\n\t}\n\n\tprivate makeGetRequestWrapper<T extends HalModel>(\n\t\turl: string,\n\t\trequestsOptions: RequestsOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T> | T> {\n\t\tconst originalGetRequest$: Observable<T | HalDocument<T>> = this.makeGetRequest(\n\t\t\turl,\n\t\t\trequestsOptions.mainRequest,\n\t\t\tmodelClass,\n\t\t\tisSingleResource,\n\t\t\tstorePartialModels,\n\t\t);\n\n\t\tif (this.storage.makeGetRequestWrapper) {\n\t\t\tconst {\n\t\t\t\tcleanUrl,\n\t\t\t\turlWithParams,\n\t\t\t\trequestOptions: options,\n\t\t\t} = this.extractRequestInfo(url, requestsOptions.mainRequest);\n\t\t\tconst cachedResoucesFromUrl =\n\t\t\t\tthis.storage.get(decodeURIComponentWithErrorHandling(url)) ||\n\t\t\t\tthis.storage.get(decodeURIComponentWithErrorHandling(urlWithParams));\n\t\t\treturn this.storage.makeGetRequestWrapper(\n\t\t\t\t{ cleanUrl, urlWithParams, originalUrl: url },\n\t\t\t\tcachedResoucesFromUrl,\n\t\t\t\toriginalGetRequest$,\n\t\t\t\toptions,\n\t\t\t\tmodelClass,\n\t\t\t\tstorePartialModels,\n\t\t\t);\n\t\t}\n\n\t\treturn originalGetRequest$;\n\t}\n\n\tprivate triggerFetchingModelRelationships<T extends HalModel>(\n\t\tmodels: Array<T>,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor>,\n\t\trequestOptions?: RequestOptions,\n\t): Array<Observable<any>> {\n\t\tconst modelRelationshipCalls: Array<Observable<any>> = [];\n\n\t\tmodels.forEach((model: T) => {\n\t\t\tconst relationshipCalls = this.fetchRelationships(\n\t\t\t\tmodel,\n\t\t\t\tincludeRelationships,\n\t\t\t\trequestOptions,\n\t\t\t);\n\t\t\tmodelRelationshipCalls.push(...relationshipCalls);\n\t\t});\n\n\t\treturn modelRelationshipCalls;\n\t}\n\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl?: string,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<Array<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tstorePartialModels?: boolean,\n\t): Observable<T>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: boolean,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tcustomUrl: string,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tstorePartialModels?: boolean,\n\t): Observable<Array<T> | HalDocument<T>>;\n\tpublic find<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams = {},\n\t\tincludeMeta: boolean = false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t\tstorePartialModels: boolean = false,\n\t): Observable<HalDocument<T> | Array<T>> {\n\t\tconst url: string = customUrl || this.buildModelUrl(modelClass);\n\n\t\tconst subsequentOptions: RequestOptions = deepmergeWrapper({}, subsequentRequestsOptions);\n\n\t\tconst paramsObject: object = this.ensureParamsObject(params || {});\n\t\trequestOptions.params = this.ensureParamsObject(requestOptions.params || {});\n\t\trequestOptions.params = Object.assign(requestOptions.params, paramsObject);\n\n\t\tconst options: RequestOptions = deepmergeWrapper({}, requestOptions);\n\n\t\tconst requestsOptions: RequestsOptions = {\n\t\t\tmainRequest: options,\n\t\t\tsubsequentRequests: subsequentOptions,\n\t\t};\n\n\t\tconst relationshipDescriptors: Array<RelationshipRequestDescriptor> =\n\t\t\tensureRelationshipRequestDescriptors(includeRelationships);\n\n\t\treturn this.handleGetRequestWithRelationships(\n\t\t\turl,\n\t\t\trequestsOptions,\n\t\t\tmodelClass,\n\t\t\tfalse,\n\t\t\trelationshipDescriptors,\n\t\t\tnull,\n\t\t\tstorePartialModels,\n\t\t).pipe(\n\t\t\tflatMap((halDocument: HalDocument<T>) => {\n\t\t\t\treturn this.fetchEmbeddedListItems(\n\t\t\t\t\thalDocument,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\trelationshipDescriptors,\n\t\t\t\t\tsubsequentOptions,\n\t\t\t\t).pipe(\n\t\t\t\t\tmap((models: Array<T>) => {\n\t\t\t\t\t\thalDocument.models = models;\n\t\t\t\t\t\treturn halDocument;\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t\tmap((halDocument: HalDocument<T>) => (includeMeta ? halDocument : halDocument.models)),\n\t\t);\n\t}\n\n\tpublic save<T extends HalModel>(\n\t\tmodel: T,\n\t\tmodelClass: ModelConstructor<T>,\n\t\trequestOptions?: RequestOptions,\n\t\tsaveOptions: CustomOptions<T> = {},\n\t): Observable<T> {\n\t\tconst defaultSaveOptions: CustomOptions<T> = {\n\t\t\tbuildUrlFunction: this.defaultUrlBuildFunction,\n\t\t\tspecificFields: null,\n\t\t\ttransformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n\t\t};\n\n\t\tconst options: CustomOptions<T> = deepmergeWrapper(defaultSaveOptions, saveOptions);\n\n\t\tconst url: string = options.buildUrlFunction(model, this.buildUrl(model));\n\n\t\tconst payload: object = model.generatePayload({\n\t\t\tspecificFields: options.specificFields,\n\t\t\tchangedPropertiesOnly: false,\n\t\t});\n\n\t\tconst transformedPaylaod: object = options.transformPayloadBeforeSave(payload);\n\t\tconst modelHeaders: object = model.generateHeaders();\n\n\t\tconst modelRequestOptions: RequestOptions = requestOptions || {};\n\t\tmodelRequestOptions.headers = modelRequestOptions.headers || {};\n\t\tObject.assign(modelRequestOptions.headers, modelHeaders);\n\n\t\tlet request$;\n\n\t\tif (model.isSaved) {\n\t\t\trequest$ = this.makePutRequest(url, transformedPaylaod, modelRequestOptions);\n\t\t} else {\n\t\t\trequest$ = this.makePostRequest(url, transformedPaylaod, modelRequestOptions);\n\t\t}\n\n\t\treturn request$.pipe(\n\t\t\tmap((response: HttpResponse<T>) => {\n\t\t\t\tconst rawResource: RawHalResource = this.extractResourceFromResponse(response);\n\t\t\t\tif (rawResource) {\n\t\t\t\t\treturn this.processRawResource(rawResource, modelClass, true, response);\n\t\t\t\t}\n\n\t\t\t\tconst newLocationLink: string = getResponseHeader(response, 'Location');\n\t\t\t\tif (newLocationLink && model.selfLink !== newLocationLink) {\n\t\t\t\t\tmodel.selfLink = newLocationLink;\n\t\t\t\t}\n\n\t\t\t\tif (!this.storage.get(model.selfLink)) {\n\t\t\t\t\tthis.storage.save(model, response);\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\t\t\t}),\n\t\t);\n\t}\n\n\t// TODO this updated Attribute properties only, implement HasOne and HasMany properties\n\tprivate updateModelWithChangedProperties<T extends HalModel>(model: T, payload: object) {\n\t\tObject.keys(payload).forEach((externalPropertyName: string) => {\n\t\t\tconst property: AttributeModelProperty = model.getPropertyData(externalPropertyName);\n\n\t\t\tif (\n\t\t\t\tpayload[externalPropertyName] &&\n\t\t\t\tproperty &&\n\t\t\t\tproperty.type === ModelPropertyEnum.Attribute\n\t\t\t) {\n\t\t\t\tmodel['resource'][externalPropertyName] = payload[externalPropertyName];\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic update<T extends HalModel>(\n\t\tmodel: T,\n\t\trequestOptions?: RequestOptions,\n\t\tupdateOptions: CustomOptions<T> = {},\n\t): Observable<T> {\n\t\tconst defaultUpdateOptions: CustomOptions<T> = {\n\t\t\tbuildUrlFunction: this.defaultUrlBuildFunction,\n\t\t\tspecificFields: null,\n\t\t\ttransformPayloadBeforeSave: this.defaultTransformPayloadBeforeSaveFunction,\n\t\t};\n\n\t\tconst options: CustomOptions<T> = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n\n\t\tconst url: string = options.buildUrlFunction(model, this.buildUrl(model));\n\t\tconst payload: object = model.generatePayload({\n\t\t\tspecificFields: options.specificFields,\n\t\t\tchangedPropertiesOnly: true,\n\t\t});\n\t\tconst transformedPaylaod: object = options.transformPayloadBeforeSave(payload);\n\t\tconst modelHeaders: object = model.generateHeaders();\n\n\t\tconst modelRequestOptions: RequestOptions = requestOptions || {};\n\t\tmodelRequestOptions.headers = modelRequestOptions.headers || {};\n\t\tObject.assign(modelRequestOptions.headers, modelHeaders);\n\n\t\treturn this.makePatchRequest(url, transformedPaylaod, modelRequestOptions).pipe(\n\t\t\tmap(() => {\n\t\t\t\tthis.updateModelWithChangedProperties(model, transformedPaylaod);\n\t\t\t\treturn model;\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic delete<T extends HalModel>(\n\t\tmodel: T,\n\t\trequestOptions?: RequestOptions,\n\t\tupdateOptions: CustomOptions<T> = {},\n\t): Observable<void> {\n\t\tconst defaultUpdateOptions: CustomOptions<T> = {\n\t\t\tbuildUrlFunction: this.defaultUrlBuildFunction,\n\t\t};\n\n\t\tconst options: CustomOptions<T> = deepmergeWrapper(defaultUpdateOptions, updateOptions);\n\t\tconst url: string = options.buildUrlFunction(model, this.buildUrl(model));\n\n\t\treturn this.makeDeleteRequest(url, requestOptions).pipe(\n\t\t\ttap(() => {\n\t\t\t\tthis.storage.remove(model);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic get storage(): any {\n\t\treturn this.internalStorage;\n\t}\n\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: false,\n\t): Observable<HalDocument<T>>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: false,\n\t\tincludeNetworkConfig: false,\n\t): Observable<HalDocument<T>>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: false,\n\t\tincludeNetworkConfig: true,\n\t): Observable<HalDocument<T>>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: true,\n\t): Observable<T>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: boolean,\n\t): Observable<HalDocument<T> | T>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: boolean,\n\t\tincludeNetworkConfig?: boolean,\n\t): Observable<HalDocument<T> | T>;\n\tpublic request<T extends HalModel>(\n\t\tmethod: string,\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T>,\n\t\tsingleResource: boolean,\n\t\tincludeNetworkConfig: boolean = true,\n\t): Observable<HalDocument<T> | T> {\n\t\tconst customUrl: string = includeNetworkConfig\n\t\t\t? `${this.buildHostUrl(new modelClass({}, this))}/${url}`\n\t\t\t: url;\n\n\t\tswitch (method.toLocaleLowerCase()) {\n\t\t\tcase 'get':\n\t\t\t\treturn this.makeGetRequest(customUrl, requestOptions, modelClass, singleResource);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Method ${method} is not supported.`);\n\t\t}\n\t}\n\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: false,\n\t): Observable<HalDocument<T>>;\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: true,\n\t): Observable<T>;\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T> | T>;\n\tprivate makeGetRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions: RequestOptions,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tsingleResource: boolean,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<T> | T> {\n\t\tconst {\n\t\t\tcleanUrl,\n\t\t\trequestOptions: options,\n\t\t\turlWithParams,\n\t\t} = this.extractRequestInfo(url, requestOptions);\n\n\t\treturn this.http.get<T>(cleanUrl, options as any).pipe(\n\t\t\tmap((response: HttpResponse<T>) => {\n\t\t\t\tconst rawResource: RawHalResource = this.extractResourceFromResponse(response);\n\t\t\t\treturn this.processRawResource(\n\t\t\t\t\trawResource,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\tsingleResource,\n\t\t\t\t\tresponse,\n\t\t\t\t\turlWithParams,\n\t\t\t\t\tstorePartialModels,\n\t\t\t\t);\n\t\t\t}),\n\t\t\tcatchError((response: HttpResponse<T>) => {\n\t\t\t\tif (response.status === 304) {\n\t\t\t\t\tconst cachedModel: T = this.storage.get(url) || this.storage.get(response.url);\n\n\t\t\t\t\tif (cachedModel) {\n\t\t\t\t\t\treturn of(cachedModel);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn throwError(response);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic head<T extends HalModel>(url: string, requestOptions: RequestOptions): Observable<any> {\n\t\tconst { cleanUrl, requestOptions: options } = this.extractRequestInfo(url, requestOptions);\n\n\t\treturn this.http.head<T>(cleanUrl, options as any);\n\t}\n\n\tprivate extractRequestInfo(\n\t\turl: string,\n\t\toptions: RequestOptions,\n\t): {\n\t\tcleanUrl: string;\n\t\turlWithParams: string;\n\t\trequestOptions: RequestOptions;\n\t} {\n\t\tconst params: object = this.ensureParamsObject(options.params || {});\n\t\tObject.assign(options, { params });\n\t\tconst requestOptions: RequestOptions = deepmergeWrapper(\n\t\t\tDEFAULT_REQUEST_OPTIONS,\n\t\t\tthis.networkConfig.globalRequestOptions,\n\t\t\toptions,\n\t\t);\n\n\t\tthis.storage.enrichRequestOptions(url, options);\n\n\t\tconst fillParams = Object.assign({}, options.params, options.routeParams);\n\t\tconst templatedUrl: string = new UriTemplate(url).fill(fillParams);\n\n\t\tconst urlQueryParams: object = getQueryParams(templatedUrl);\n\t\trequestOptions.params = Object.assign(urlQueryParams, requestOptions.params);\n\n\t\tconst cleanUrl: string = removeQueryParams(templatedUrl);\n\t\tconst queryParamsString: string = makeQueryParamsString(requestOptions.params, true);\n\t\tconst urlWithParams = queryParamsString ? `${cleanUrl}?${queryParamsString}` : cleanUrl;\n\n\t\trequestOptions.params = makeHttpParams(requestOptions.params, this.httpParamsOptions);\n\n\t\treturn {\n\t\t\tcleanUrl,\n\t\t\turlWithParams,\n\t\t\trequestOptions,\n\t\t};\n\t}\n\n\tprivate ensureParamsObject(\n\t\tparams: HttpParams | { [param: string]: string | string[] } | object,\n\t): { [param: string]: string | string[] } | object {\n\t\tif (params instanceof HttpParams) {\n\t\t\treturn params.keys().reduce((paramsObject: object, paramName: string) => {\n\t\t\t\tconst arrayParam = params.getAll(paramName);\n\t\t\t\tparamsObject[paramName] = arrayParam.length > 1 ? arrayParam : params.get(paramName);\n\t\t\t\treturn paramsObject;\n\t\t\t}, {});\n\t\t}\n\n\t\treturn params;\n\t}\n\n\tprivate makePostRequest<T extends HalModel>(\n\t\turl: string,\n\t\tpayload: object,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.post<T>(cleanUrl, payload, options as { [K: string]: any });\n\t}\n\n\tprivate makePutRequest<T extends HalModel>(\n\t\turl: string,\n\t\tpayload: object,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.put<T>(cleanUrl, payload, options as { [K: string]: any });\n\t}\n\n\tprivate makePatchRequest<T extends HalModel>(\n\t\turl: string,\n\t\tpayload: object,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.patch<T>(cleanUrl, payload, options as { [K: string]: any });\n\t}\n\n\tprivate makeDeleteRequest<T extends HalModel>(\n\t\turl: string,\n\t\trequestOptions?: RequestOptions,\n\t): Observable<any> {\n\t\tconst { requestOptions: options, cleanUrl } = this.extractRequestInfo(\n\t\t\turl,\n\t\t\trequestOptions || {},\n\t\t);\n\t\treturn this.http.delete<T>(cleanUrl, options as { [K: string]: any });\n\t}\n\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: false,\n\t\tresponse: HttpResponse<T>,\n\t): HalDocument<T>;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: true,\n\t\tresponse: HttpResponse<T>,\n\t): T;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tresponse: HttpResponse<T>,\n\t): T | HalDocument<T>;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tresponse: HttpResponse<T>,\n\t\turl?: string,\n\t\tsavePartialModels?: boolean,\n\t): T | HalDocument<T>;\n\tprivate processRawResource<T extends HalModel>(\n\t\trawResource: RawHalResource,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tisSingleResource: boolean,\n\t\tresponse: HttpResponse<T>,\n\t\turl?: string,\n\t\tsavePartialModels?: boolean,\n\t): T | HalDocument<T> {\n\t\tif (isSingleResource) {\n\t\t\tconst propertyClass: ModelConstructor<T> = isFunction(modelClass)\n\t\t\t\t? (modelClass as ModelConstructorFn<T>)(rawResource)\n\t\t\t\t: (modelClass as ModelConstructor<T>);\n\t\t\tconst model: T = new propertyClass(rawResource, this, response);\n\t\t\tthis.populateResourceWithRelationshipIndentificators(model);\n\t\t\tthis.storage.save(model, response, [url]);\n\t\t\treturn model;\n\t\t}\n\n\t\tconst halDocument: HalDocument<T> = this.createHalDocument(rawResource, modelClass, response);\n\n\t\tthis.storage.saveAll(halDocument.models, savePartialModels);\n\n\t\thalDocument.models.forEach((listModel: T) => {\n\t\t\tthis.populateResourceWithRelationshipIndentificators(listModel);\n\t\t});\n\n\t\tthis.storage.save(halDocument, response, [url]);\n\t\treturn halDocument;\n\t}\n\n\tprivate buildModelUrl(modelClass: ModelConstructor<HalModel>, modelId?: string): string {\n\t\tconst model = new modelClass({}, this);\n\n\t\tif (modelId && model.modelEndpoints?.singleResourceEndpoint) {\n\t\t\treturn model.modelEndpoints.singleResourceEndpoint;\n\t\t} else if (!modelId && model.modelEndpoints?.collectionEndpoint) {\n\t\t\treturn model.modelEndpoints.collectionEndpoint;\n\t\t}\n\n\t\tconst modelUrl: string = this.buildUrl(model);\n\t\treturn modelId ? `${modelUrl}/${modelId}` : modelUrl;\n\t}\n\n\tprivate extractResourceFromResponse(response: HttpResponse<object>): RawHalResource {\n\t\treturn response.body;\n\t}\n\n\tprivate populateResourceWithRelationshipIndentificators<T extends HalModel>(model: T): void {\n\t\tconst localResource: T = this.storage.get(model.uniqueModelIdentificator);\n\t\tif (localResource) {\n\t\t\tmodel.hasManyDocumentIdentificators = localResource.hasManyDocumentIdentificators;\n\t\t}\n\t}\n\n\tprivate fetchEmbeddedListItems<T extends HalModel>(\n\t\thalDocument: HalDocument<T>,\n\t\tmodelClass: ModelConstructor<T> | ModelConstructorFn<T>,\n\t\tincludeRelationships: Array<RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t): Observable<Array<T>> {\n\t\tconst modelCalls: Array<Observable<T>> = [];\n\n\t\tconst requestsOptions: RequestsOptions = {\n\t\t\tmainRequest: requestOptions,\n\t\t\tsubsequentRequests: requestOptions,\n\t\t};\n\n\t\t// Don't fetch list items if they are embedded\n\t\tif (halDocument.hasEmbeddedItems) {\n\t\t\thalDocument.models.forEach((model: T) => {\n\t\t\t\tconst call$ = this.handleGetRequestWithRelationships(\n\t\t\t\t\tnull,\n\t\t\t\t\trequestsOptions,\n\t\t\t\t\tmodelClass,\n\t\t\t\t\ttrue,\n\t\t\t\t\tincludeRelationships,\n\t\t\t\t\tmodel,\n\t\t\t\t);\n\t\t\t\tmodelCalls.push(call$);\n\t\t\t});\n\t\t} else {\n\t\t\thalDocument.itemLinks.forEach((link: RawHalLink) => {\n\t\t\t\tconst url: string = link.href;\n\n\t\t\t\tif (url) {\n\t\t\t\t\tconst call$ = this.handleGetRequestWithRelationships(\n\t\t\t\t\t\turl,\n\t\t\t\t\t\trequestsOptions,\n\t\t\t\t\t\tmodelClass,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tincludeRelationships,\n\t\t\t\t\t);\n\t\t\t\t\tmodelCalls.push(call$);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (!modelCalls.length) {\n\t\t\treturn of([]);\n\t\t}\n\n\t\treturn combineLatest(modelCalls);\n\t}\n\n\tprivate buildHostUrl(model?: HalModel): string {\n\t\t// tslint:disable-next-line:max-line-length\n\t\tconst baseUrl: string =\n\t\t\tmodel && model.networkConfig && model.networkConfig.baseUrl\n\t\t\t\t? model.networkConfig.baseUrl\n\t\t\t\t: this.networkConfig.baseUrl;\n\t\t// tslint:disable-next-line:max-line-length\n\t\tconst networkEndpoint: string =\n\t\t\tmodel && model.networkConfig && model.networkConfig.endpoint\n\t\t\t\t? model.networkConfig.endpoint\n\t\t\t\t: this.networkConfig.endpoint;\n\n\t\treturn [baseUrl, networkEndpoint].filter((urlPart) => urlPart).join('/');\n\t}\n\n\tprivate defaultUrlBuildFunction<T extends HalModel>(model: T, urlFromModel: string): string {\n\t\tif (model.isSaved && model.selfLink) {\n\t\t\treturn model.selfLink;\n\t\t}\n\n\t\tif (model.id && model.modelEndpoints?.singleResourceEndpoint) {\n\t\t\treturn model.modelEndpoints.singleResourceEndpoint;\n\t\t} else if (!model.id && model.modelEndpoints?.collectionEndpoint) {\n\t\t\treturn model.modelEndpoints.collectionEndpoint;\n\t\t}\n\n\t\treturn urlFromModel;\n\t}\n\n\tprivate defaultTransformPayloadBeforeSaveFunction(payload: object): object {\n\t\treturn payload;\n\t}\n\n\tprivate get cacheStrategy(): CacheStrategy {\n\t\treturn this._cacheStrategy;\n\t}\n\n\tprivate get halStorage(): HalStorage {\n\t\treturn this._storage;\n\t}\n\n\tpublic findModelClassByType(modelType: string): typeof HalModel {\n\t\tconst modelClass: typeof HalModel = this.modelTypes.find(\n\t\t\t(modelClass) => modelClass.modelType === modelType,\n\t\t);\n\n\t\tif (!modelClass) {\n\t\t\tthrow new Error(\n\t\t\t\t`Provided model name \"${modelType}\" cannot be found in the Datastore. Provide it in DatastoreService.modelTypes`,\n\t\t\t);\n\t\t}\n\n\t\treturn modelClass;\n\t}\n\n\tpublic createModel<T extends HalModel>(\n\t\tmodelClass: ModelConstructor<T>,\n\t\trecordData: object = {},\n\t): T {\n\t\tconst rawRecordData: object = Object.assign({}, recordData);\n\t\trawRecordData[EMBEDDED_PROPERTY_NAME] = Object.assign(\n\t\t\t{},\n\t\t\trecordData,\n\t\t\trecordData[EMBEDDED_PROPERTY_NAME],\n\t\t);\n\t\tconst model: T = new modelClass(rawRecordData, this);\n\t\treturn model;\n\t}\n}\n","import { HttpResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HalModel } from '../../models/hal.model';\nimport { DatastoreService } from '../datastore/datastore.service';\nimport { RequestOptions } from '../../types/request-options.type';\nimport { HalDocument } from '../../classes/hal-document';\nimport { ModelConstructor } from '../../types/model-constructor.type';\nimport { RelationshipRequestDescriptor } from '../../types/relationship-request-descriptor.type';\n\nexport abstract class ModelService<Model extends HalModel> {\n\tconstructor(protected datastore: DatastoreService, private modelClass: ModelConstructor<Model>) {}\n\n\tpublic findOne(\n\t\tmodelId: string,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t): Observable<Model> {\n\t\treturn this.datastore.findOne<Model>(\n\t\t\tthis.modelClass,\n\t\t\tmodelId,\n\t\t\tincludeRelationships,\n\t\t\trequestOptions,\n\t\t\tcustomUrl,\n\t\t\tsubsequentRequestsOptions,\n\t\t);\n\t}\n\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: true,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tcustomUrl?: string,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams,\n\t\tincludeMeta: false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor>,\n\t\trequestOptions: RequestOptions,\n\t\tsubsequentRequestsOptions: RequestOptions,\n\t\tcustomUrl?: string,\n\t\tstorePartialModels?: boolean,\n\t): Observable<Array<Model>>;\n\tpublic find(\n\t\tparams: object | { [param: string]: string | string[] } | HttpParams = {},\n\t\tincludeMeta: boolean = false,\n\t\tincludeRelationships: Array<string | RelationshipRequestDescriptor> = [],\n\t\trequestOptions: RequestOptions = {},\n\t\tsubsequentRequestsOptions: RequestOptions = {},\n\t\tcustomUrl?: string,\n\t\tstorePartialModels?: boolean,\n\t): Observable<HalDocument<Model> | Array<Model>> {\n\t\treturn this.datastore.find(\n\t\t\tthis.modelClass,\n\t\t\tparams,\n\t\t\tincludeMeta,\n\t\t\tincludeRelationships,\n\t\t\trequestOptions,\n\t\t\tcustomUrl,\n\t\t\tsubsequentRequestsOptions,\n\t\t\tstorePartialModels,\n\t\t);\n\t}\n\n\tpublic createNewModel(recordData: object = {}): Model {\n\t\tconst model: Model = this.datastore.createModel(this.modelClass, recordData);\n\t\tthis.datastore.storage.save(model);\n\t\treturn model;\n\t}\n}\n","export function arrayAttr<T>(classType: { new (...args): T }) {\n\treturn class ArrayAttribute<T> {\n\t\tconstructor(args = []) {\n\t\t\treturn args.map((arg) => new classType(arg));\n\t\t}\n\t};\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["ModelPropertyEnum"],"mappings":"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"}}}